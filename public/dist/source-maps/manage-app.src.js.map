{"version":3,"sources":["ManageAppIgniter.js","ManageMasterEngine.js","ManageUserDataService.js","ManageUserEngine.js","UserDataService.js","UserEngine.js","ConfigurationDataService.js","ConfigurationEngine.js","DashboardDataService.js","DashboardEngine.js","RolePermissionDataServices.js","RolePermissionEngine.js","ActivityDataServices.js","ActivityEngine.js","CategoryDataServices.js","CategoryEngine.js","CustomerDataServices.js","CustomerEngine.js","SuppliersDataServices.js","SuppliersEngine.js","ProductDataServices.js","ProductEngine.js","LocationDataServices.js","LocationEngine.js","InventoryDataServices.js","InventoryEngine.js","ReportDataServices.js","ReportEngine.js","BillingDataServices.js","BillingEngine.js","TaxPresetDataServices.js","TaxPresetEngine.js","TaxDataServices.js","TaxEngine.js"],"names":[],"mappingshjxtvxihnlphwhRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpxpVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvxtuhflralxhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjfile":"../Components/manage-app.src.js","sourcesContent":["(function() {\n'use strict';\n\n  angular.module('ManageApp', [\n    'ngMessages',\n    'ngAnimate',\n    'ngSanitize',\n    'ui.router',\n    'ui.router.state.events',\n    'ngNotify',\n    'ngDialog',\n    'angular-loading-bar',\n    'selectize',\n    'NgSwitchery',\n    'lw.core.utils',\n    'lw.security.main',\n    'lw.auth',\n    'lw.data.datastore',\n    'lw.data.datatable',\n    'lw.form.main',\n    'app.service',\n    'app.http',\n    'app.notification',   \n    'app.form',\n    'app.directives',\n    'app.fileUploader',\n    'ui.router.state.events',\n    'ManageApp.master',\n    'app.UploaderDataService',\n    'app.UploaderEngine',\n\n    'ManageApp.ManageUserDataService',\n    'ManageApp.users',\n\n    'CommonApp.CommonUserDataService',\n    'CommonApp.users',\n\n    'Manage-app.users',\n    'ManageApp.UserDataService',\n\n    'ManageApp.ConfigurationDataService',\n    'ManageApp.configuration',\n\n    'ManageApp.DashboardDataService',\n    'ManageApp.DashboardEngine',\n\n    'app.RolePermissionDataServices',\n    'app.RolePermissionEngine',\n \t\n \t'app.ActivityDataServices',\n\t'app.ActivityEngine',\n\t\n\t'app.CategoryDataServices',\n\t'app.CategoryEngine',\n\t\n\t'app.CustomerDataServices',\n\t'app.CustomerEngine',\n\t\n\t'app.SuppliersDataServices',\n\t'app.SuppliersEngine',\n\t\n\t'app.ProductDataServices',\n\t'app.ProductEngine',\n\t\n\t'app.LocationDataServices',\n\t'app.LocationEngine',\n\t\n\t'app.InventoryDataServices',\n\t'app.InventoryEngine',\n\t'app.ReportDataServices', \n\t'app.ReportEngine',\n\t\n\t'app.BillingDataServices',\n\t'app.BillingEngine',\n\n\t'app.TaxPresetDataServices',\n\t'app.TaxPresetEngine',\n\n\t'app.TaxDataServices',\n\t'app.TaxEngine'\n  ]).\n  //constant('__ngSupport', window.__ngSupport).\n  run([\n    '__Auth', '$state', '$rootScope', '$transitions','$trace', function(__Auth, $state, $rootScope, $transitions, $trace) {\n\n        _.delay(function() {\n\n            __Auth.verifyRoute($state); \n\n\n            $rootScope.$on('$viewContentLoading', function(event, viewConfig) { \n               \n                var accessObject = $state.current;\n\n                if( accessObject  && _.has( accessObject, 'loginRequired' ) && accessObject.loginRequired === false) {\n\n                    if (__Auth.isLoggedIn()) {\n                        $state.go( 'dashboard' );\n                    }\n\n                    event.preventDefault();\n\n                    return false;\n                }\n            });\n\n        }, 100);\n\n        $rootScope.__ngSupport = window.__ngSupport;\n\n    }\n  ]).\n  config([\n    '$stateProvider', '$urlRouterProvider', '$interpolateProvider','$compileProvider', routes\n  ]);\n\n\n  /**\n    * Application Routes Configuration\n    *\n    * @inject $stateProvider\n    * @inject $urlRouterProvider\n    * @inject $interpolateProvider\n    * @inject $compileProvider\n    *\n    * @return void\n    *---------------------------------------------------------------- */\n\n  function routes($stateProvider, $urlRouterProvider, $interpolateProvider, $compileProvider) {\n\n    if( window.appConfig && window.appConfig.debug === false) {\n        $compileProvider.debugInfoEnabled(false);\n    }\n\n    $interpolateProvider.startSymbol('[[');\n    $interpolateProvider.endSymbol(']]');\n\n    /*$urlRouterProvider\n       .otherwise('/dashboard');*/\n\n    $urlRouterProvider.otherwise(function($injector, $location, $transitions) {\n       var state = $injector.get('$state'),\n            auth = $injector.get('__Auth'),\n            redirectState = __globals.appTemps('stateViaRoute');\n        if(_.has(redirectState, 'stateName')\n            && !_.isUndefined(redirectState.stateName)\n            && !_.isEmpty(redirectState.stateName)) {\n            if (_.isEmpty(redirectState.stateParams)) {\n                state.go(redirectState.stateName);\n            } else {\n                state.go(redirectState.stateName, redirectState.stateParams);\n            }\n        } else {\n            state.go('dashboard');\n        }\n\t\n        return $location.path();\n    });\n\n    //state configurations\n    $stateProvider\n\n        .state('base', {\n            abstract: true,\n            resolve: {\n                baseData: ['$stateParams', 'BaseDataService', function($stateParams, BaseDataService) {\n                    \n                    return BaseDataService.getBaseData('account_logged');\n                }]\n        }})\n\n        // login\n        .state('login',\n            __globals.stateConfig('/login', 'user.login', {\n                \n                parent : 'base',\n                loginRequired : false,\n            }) )\n\n        // forgot password\n        .state('forgot_password',\n            __globals.stateConfig('/forgot-password', 'user.forgot-password', {\n\n                parent : 'base',\n                loginRequired : false,\n            })\n        )\n\n\t\t// forgot password\n        .state('reset_password',\n            __globals.stateConfig('/reset-password/{reminderToken}', 'user.reset-password')\n        )\n\n        // Forgot Password Success\n        .state('forgot_password_sucess',\n            __globals.stateConfig('/forgot-password', 'user.forgot-password-success')\n        )\n\n        // home\n        .state('home',\n             __globals.stateConfig('/home', 'home', {\n                access  : {\n                    authority : 'public.app'\n                },\n                parent : 'base'\n              }\n            )\n        )\n\n        // invalid request\n        .state('invalid_request', __globals.stateConfig('/invalid-request',\n            'errors/invalid-request'\n        ))\n\n        // not found\n        .state('not_found', __globals.stateConfig('/not-found',\n            'errors.manage-not-exist'\n        ))\n\n        // not exist\n        .state('not_exist', __globals.stateConfig('/not-exist',\n            'errors.manage-not-exist'\n        ))\n\n        // unauthorized\n        .state('unauthorized', __globals.stateConfig('/unauthorized',\n            'errors.unauthorized'\n\t\t))\n\n        // dashboard\n        .state('dashboard',\n             __globals.stateConfig('/dashboard', 'dashboard.admin-dashboard', {\n                controller : 'AdminDashboardController as AdminDashboardCtrl',\n                access  : {\n                    authority : 'manage.dashboard.read.support_data'\n                },\n                parent : 'base',\n                resolve: {\n                    GetDatshboardData: [\"DashboardDataService\", function(DashboardDataService) {\n                        return DashboardDataService.getSupportData();\n                    }]\n                },\n              }\n            )\n        )\n\n        // users\n        .state('users',\n             __globals.stateConfig('/users', 'user/manage/list', {\n                controller : 'ManageUsersController as manageUsersCtrl',\n                access  : {\n                    authority : 'manage.user.read.datatable.list'\n                },\n                parent : 'base'\n              }\n            )\n        )\n\n        // RolePermission list\n        .state('role_permission',\n            __globals.stateConfig('/role-permissions', 'user/role-permission/list', {\n            access  : {\n                authority:'manage.user.role_permission.read.list'\n            },\n            controller : 'RolePermissionListController as rolePermissionListCtrl',\n            parent : 'base'\n        } ))\n\n        // profile\n        .state('profile',\n             __globals.stateConfig('/profile', 'user/manage-profile', {\n                access  : {\n                    authority : 'user.profile.update'\n                },\n                parent : 'base'\n              }\n            )\n        )\n\n        // profile edit\n        .state('profileEdit',\n             __globals.stateConfig('/profile/edit', 'user/profile-edit', {\n                access  : {\n                    authority : 'user.profile.update.process'\n                },\n                parent : 'base'\n              }\n            )\n        )\n\n        // change password\n        .state('changePassword',\n             __globals.stateConfig('/change-password', 'user/change-password', {\n                access  : {\n                    authority : 'user.change_password.process'\n                },\n                parent : 'base'\n              }\n            )\n        )\n\n        // change email\n        .state('changeEmail',\n             __globals.stateConfig('/change-email', 'user/change-email', {\n                access  : {\n                    authority : 'user.change_email.process'\n                },\n                parent : 'base'\n              }\n            )\n        )\n\n        // activity log\n        .state('activity_log',\n\t\t\t__globals.stateConfig('/activity-log', 'activity/activity-log', {\n            \tcontroller  : 'ActivityLogListController as activityLogListCtrl',\n                parent : 'base'\n        } ))\n\n        // categories\n        .state('categories',\n            __globals.stateConfig('/categories', 'category/list', {\n                controller  : 'CategoryListController as CategoryListCtrl',\n                access  : {\n                    authority : 'manage.category.read.list'\n                },\n                parent : 'base'\n        } ))\n        \n        \n        // Customer list\n        .state('customer', \n            __globals.stateConfig('/customers', 'customer/list', {\n            controller : 'CustomerListController as customerListCtrl',\n            access  : {\n                authority : 'manage.customer.read.list'\n            },\n            parent : 'base'\n        } ))\n        \n        \n        // Suppliers list\n        .state('suppliers', \n            __globals.stateConfig('/suppliers', 'suppliers/list', {\n            controller : 'SuppliersListController as suppliersListCtrl',\n            access  : {\n                authority : 'manage.suppliers.read.list'\n            },\n            parent : 'base'\n        } ))\n        \n        \n        // Product list\n        .state('product', \n            __globals.stateConfig('/products', 'product/list', {\n                access  : {\n                    authority : 'manage.product.read.list'\n                },\n                parent : 'base',\n                controller : 'ProductListController as productListCtrl',\n            } \n        ))\n        \n\n         // Product add\n        .state('product_add', \n            __globals.stateConfig('/product/add', 'product/add', {\n                access  : {\n                    authority : 'manage.product.write.create'\n                },\n                parent : 'base',\n                controller : 'ProductAddController as productAddCtrl',\n                resolve : {\n                    productAddData : [\"ProductDataService\", function(ProductDataService) {\n                        return ProductDataService\n                                .getAddSupportData();\n                    }]\n                }\n            }\n        ))\n\n\n        // Product edit\n        .state('product_edit', \n            __globals.stateConfig('/product/:productIdOrUid/edit', 'product/edit', {\n                access  : {\n                    authority : 'manage.product.write.update'\n                },\n                parent : 'base',\n                controller : 'ProductEditController as productEditCtrl',\n                resolve : {\n                    productEditData : [\"ProductDataService\", \"$stateParams\", function(ProductDataService, $stateParams) {\n                        return ProductDataService\n                                .getEditSupportData($stateParams.productIdOrUid);\n                    }]\n                }\n            }\n        ))\n        \n        // Location list\n        .state('location', \n            __globals.stateConfig('/locations', 'location/list', {\n            access  : {\n                authority : 'manage.location.read.list'\n            },\n            parent : 'base',\n            controller : 'LocationListController as locationListCtrl'\n        } ))\n\n        // Inventory\n        .state('inventory', \n            __globals.stateConfig('/inventory', 'inventory/list', {\n            access  : {\n                authority : 'manage.inventory.read.list'\n            },\n            parent : 'base',\n            controller : 'InventoryListController as InventoryListCtrl'\n        } ))\n\n\n        // configuration general\n        .state('configuration_general',\n             __globals.stateConfig('/general', 'configuration.general', {\n                parent : 'base',\n                controller  : 'GeneralController as generalCtrl',\n                access  : {\n                    authority : 'manage.configuration.process'\n                },\n                resolve: {\n                    getGeneralData: [\"ConfigurationDataService\", function(ConfigurationDataService) {\n\n                       return ConfigurationDataService\n                                .readConfigurationData(1) // general form\n                                .then(function(response) {\n                                    return response;\n                                });\n                    }]\n                }\n\n              }\n\n            )\n        )\n\n        // configuration currency\n        .state('configuration_currency',\n             __globals.stateConfig('/currency', 'configuration.currency', {\n                parent : 'base',\n                controller  : 'CurrencyConfigurationController as currencyConfigurationCtrl',\n                access  : {\n                    authority : 'manage.configuration.process'\n                },\n                resolve: {\n                    getCurrencyData: [\"ConfigurationDataService\", function(ConfigurationDataService) {\n\n                       return ConfigurationDataService\n                                .readConfigurationData(2) // Currency form\n                                .then(function(response) {\n                                    return response;\n                                });\n                    }]\n                }\n              }\n            )\n        )\n        \n        \n        // Report list\n        .state('report', \n            __globals.stateConfig('/reports', 'report/list', {\n                access  : {\n                    authority : 'manage.report.read.list'\n                },\n                resolve: {\n                    GetSupportData: [\"ReportDataService\", function(ReportDataService) {\n\n                       return ReportDataService.getSupportData(2);\n                    }]\n                },\n                controller : 'ReportListController as reportListCtrl',\n                parent : 'base'\n        } ))\n        \n        \n        // Billing list\n        .state('billing', \n            __globals.stateConfig('/billings', 'billing/list', {\n            access  : {\n                authority : 'manage.billing.read.list'\n            },\n            controller : 'BillingListController as billingListCtrl',\n            parent : 'base'\n        } ))\n\n        // Add Billing\n        .state('billing_add', \n            __globals.stateConfig('/billing/create', 'billing/add', {\n            access  : {\n                authority : 'manage.billing.read.list'\n            },\n            resolve: {\n                GetAddSupportData: [\"BillingDataService\", function(BillingDataService) {\n                   return BillingDataService.getAddSupportData();\n                }]\n            },\n            controller : 'BillingAddController as billingAddCtrl',\n            parent : 'base'\n        } ))\n\n        // Edit Billing\n        .state('billing_edit', \n            __globals.stateConfig('/billing/:billUid/edit', 'billing/edit', {\n            access  : {\n                authority : 'manage.billing.read.list'\n            },\n            resolve: {\n                GetEditSupportData: [\"BillingDataService\", \"$stateParams\", function(BillingDataService, $stateParams) {\n                   return BillingDataService.getEditSupportData($stateParams.billUid);\n                }]\n            },\n            controller : 'BillingEditController as billingEditCtrl',\n            parent : 'base'\n        } ))\n\n        // Edit Billing\n        .state('billing_details', \n            __globals.stateConfig('/billing/:billUid/details', 'billing/details', {\n            access  : {\n                authority : 'manage.billing.read.list'\n            },\n            resolve: {\n                GetEditSupportData: [\"BillingDataService\", \"$stateParams\", function(BillingDataService, $stateParams) {\n                   return BillingDataService.getDetailsSupportData($stateParams.billUid);\n                }]\n            },\n            controller : 'BillingDetailsController as billingDetailsCtrl',\n            parent : 'base'\n        } ))\n\n        // TaxPreset list\n        .state('tax_preset', \n            __globals.stateConfig('/tax-presets', 'tax-preset/list', {\n            access  : {\n            },\n            controller : 'TaxpresetListController as taxpresetListCtrl',\n            parent : 'base',\n        } ))\n\n\t\t// Tax list\n        .state('tax', \n            __globals.stateConfig('/tax-preset/:taxPresetIdOrUid/taxes', 'tax/list', {\n            access  : {\n            },\n            controller : 'TaxListController as taxListCtrl',\n            parent : 'base',\n        } ))\n\n        ;\n    };\n\n})();","(function () {\n    'use strict';\n\n    /*\n     ManageController\n    -------------------------------------------------------------------------- */\n\n    angular\n        .module('ManageApp.master', [])\n        .controller('ManageController', [\n            '$rootScope',\n            '__DataStore',\n            '$scope',\n            '__Auth',\n            'appServices',\n            'appNotify',\n            '__Form',\n            '$state',\n            'appToastNotify',\n            'ConfigurationDataService',\n            ManageController\n        ]).controller('HelpController', [\n            '$rootScope',\n            '$scope',\n            HelpController\n        ]);\n\n    /**\n       * ManageController for manage page application\n       *\n       * @inject $rootScope\n       * @inject __DataStore\n       * @inject $scope\n       * @inject __Auth\n       * @inject appServices\n       * @inject appNotify\n       *\n       * @return void\n       *-------------------------------------------------------- */\n\n    function ManageController($rootScope, __DataStore, $scope, __Auth, appServices, appNotify, __Form, $state, appToastNotify, ConfigurationDataService) {\n\n        var scope = this;\n\n\n        scope.pageStatus = false;\n\n        scope.refreshAuthObj = function () {\n\n            __Auth.refresh(function (authInfo) {\n\n                scope.auth_info = authInfo;\n            });\n\n        };\n        scope.refreshAuthObj();\n\n        scope.notify = __globals.getAppImmutables('notifyToAdmin');\n        scope.restrict_user_email_update = __globals.getAppImmutables('restrict_user_email_update');\n\n        scope.unhandledError = function () {\n\n            appNotify.error(__globals.getReactionMessage(19)); // Unhanded errors\n\n        };\n\n        $rootScope.isAdmin = function () {\n            return scope.auth_info.designation === 1;\n        };\n\n        $rootScope.$on('auth_info_updated', function (event, args) {\n            $rootScope.auth_info = args.auth_info;\n            if (!_.isEmpty(args.userFullName)) {\n                scope.userUpdateData = args.userFullName;\n            }\n            scope.auth_info = $rootScope.auth_info;\n\n        });\n\n        $rootScope.$on('lw.events.logged_in_user', function () {\n            scope.refreshAuthObj();\n        });\n\n        $rootScope.$on('lw.events.state.change_start', function () {\n            appServices.closeAllDialog();\n        });\n\n        $rootScope.$on('lw.datastore.event.post.started', __globals.showButtonLoader);\n\n        $rootScope.$on('lw.datastore.event.fetch.started', __globals.showFormLoader);\n\n        $rootScope.$on('lw.form.event.process.started');\n\n        $rootScope.$on('lw.form.event.fetch.started', __globals.showFormLoader);\n\n        $rootScope.$on('lw.datastore.event.fetch.finished', __globals.hideFormLoader);\n\n        $rootScope.$on('lw.datastore.event.post.finished', __globals.hideButtonLoader);\n\n        $rootScope.$on('lw.form.event.process.finished', __globals.hideButtonLoader);\n\n        $rootScope.$on('lw.datastore.event.fetch.error', scope.unhandledError);\n\n        $rootScope.$on('lw.form.event.process.error', scope.unhandledError);\n\n        $rootScope.$on('$stateChangeSuccess', function ($stateEvent, $stateInfo) {\n\n            var scrollOffsets = __globals.getScrollOffsets(),\n                yOffset = Math.round(scrollOffsets.y);\n            // document.body.scrollTop = document.documentElement.scrollTop = 0;\n            $('html, body').animate({ scrollTop: 0 }, yOffset < 500 ? 500 : yOffset);\n        });\n\n        // Dialog Opened Event\n        $rootScope.$on('ngDialog.opened', function (e, $dialog) {\n            _.defer(function () {\n                $('.ngdialog').scrollTop(0);\n            });\n        });\n\n        scope.showUploadManagerDialog = function () {\n            appServices.showDialog(scope, {\n                templateUrl: __globals.getTemplateURL('upload-manager.upload-manager-dialog')\n            },\n                function (promiseObj) {\n\n                });\n        };\n\n        /**\n        * Check if user logged in\n        *\n        * @return boolean\n        *---------------------------------------------------------------- */\n\n        scope.isLoggedIn = function () {\n            return __Auth.isLoggedIn();   // isLoggedIn\n        };\n\n        /**\n        * Check if user logged in\n        *\n        * @return boolean\n        *---------------------------------------------------------------- */\n\n        scope.logoutUser = function () {\n\n            __Auth.registerIntended(\"dashboard\");\n\n            __DataStore.post({\n                'apiURL': 'user.logout'\n            })\n                .success(function (responseData) {\n\n                    if (responseData.reaction == 1) {\n                        //__globals.setCookie('auth_access_token', '');\n\n                        __Auth.checkOut({}, function (authInfo) {\n                            $state.go('login');\n                        });\n                    }\n\n                });\n        };\n\n        /**\n          * Open help dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.openHelpDailog = function (templateUrl, templateTitle) {\n\n            scope.templateTitle = templateTitle;\n\n            appServices.showDialog(scope,\n                {\n                    templateUrl: __globals.getTemplateURL(templateUrl),\n\n                    controller: 'HelpController as helpCtrl'\n                },\n                function (promiseObj) {\n\n                });\n\n        };\n\n        scope.showGeneralSetting = function () {\n\n            ConfigurationDataService\n                .readConfigurationData(1)\n                .then(function (responseData) {\n\n                    var logo_background_color = responseData.data.configuration.logo_background_color;\n\n                    appServices.showDialog({\n                        'responseData': responseData\n                    }, {\n                        templateUrl: __globals.getTemplateURL('configuration.general')\n                    }, function (promiseObj) {\n\n                        $('#lwchangeBgHeaderColor').css('background', \"#\" + logo_background_color);\n                    });\n                });\n        };\n\n        scope.themeColors = __globals.getAppImmutables('config')['theme_colors'];\n\n        /**\n        * Set Theme color\n        *---------------------------------------------------------------- */\n        scope.setThemeColor = function (colorName) {\n            __DataStore.fetch({\n                'apiURL': 'theme_color',\n                'colorName': colorName\n            }).success(function (responseData) {\n                location.reload();\n            });\n        }\n\n        /**\n        * Show Hide Theme Color\n        *---------------------------------------------------------------- */\n        scope.showHideThemeContainer = function () {\n            if (!$('.lw-theme-color-container').hasClass('lw-theme-container-active')) {\n                $('.lw-theme-color-container').addClass('lw-theme-container-active');\n                $('.lw-switch i:first').replaceWith(\"<span>&times;</span>\");\n            } else {\n                $('.lw-theme-color-container').removeClass('lw-theme-container-active');\n                $('.lw-switch span:first').replaceWith(\"<i class='fa fa-cog'></i>\");\n            }\n        }\n\n        $rootScope.$on('lw-open-login-dialog', function (event, response) {\n\n\n            event.preventDefault();\n\n            appServices.loginRequiredDialog('login-dialog', response.data, function (result, newData) {\n\n                __DataStore.reset();\n\n                if (result) {\n                    scope.refreshAuthObj();\n                    $state.reload();\n                }\n            });\n\n        });\n    };\n\n    /**\n    * HelpController for helping information\n    *\n    * @inject $rootScope\n    * @inject $scope\n    *\n    * @return void\n    *-------------------------------------------------------- */\n\n    function HelpController($rootScope, $scope) {\n\n        var scope = this;\n\n        if (_.has($scope.ngDialogData, 'templateTitle')) {\n            scope.templateTitle = $scope.ngDialogData.templateTitle;\n        }\n\n        /**\n          * Close dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.closeDialog = function () {\n            $scope.closeThisDialog();\n        };\n\n    };\n\n})();","/*!\n*  Component  : Manage Users\n*  File       : ManageUserDataService.js  \n*  Engine     : ManageUserDataService \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.ManageUserDataService', [])\n\n        /**\n          Manage User Data Service  \n        ---------------------------------------------------------------- */\n        .service('ManageUserDataService', [\n            '$q',\n            '__DataStore',\n            '__Form',\n            'appServices',\n            ManageUserDataService\n        ]);\n\n    function ManageUserDataService($q, __DataStore, __Form, appServices) {\n\n        /*\n        Get User Info\n        -----------------------------------------------------------------*/\n        this.getUserInfo = function (userId) {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.user.read.info',\n                'userId': userId\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData);\n\n                });\n\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get User Add Support Data\n        -----------------------------------------------------------------*/\n        this.getUserAddSupportData = function () {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch('manage.user.read.create.support_data')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);\n\n                    });\n\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get User User Permissions\n        -----------------------------------------------------------------*/\n        this.getUserPermissions = function (userId) {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.user.read.get_user_permissions',\n                'userId': userId\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n\n                });\n\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get User User Permissions\n        -----------------------------------------------------------------*/\n        this.getUserDetailData = function (userId) {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.user.read.detail.data',\n                'userID': userId\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n\n                });\n\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get User Edit Data\n        -----------------------------------------------------------------*/\n        this.getUserEditData = function (userId) {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.user.read.edit_suppport_data',\n                'userId': userId\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n\n                });\n\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n    }\n    ;\n\n})(window, window.angular);","/*!\n*  Component  : Manage User\n*  File       : ManageUserEngine.js  \n*  Engine     : ManageUserEngine \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.users', [])\n\n        /**\n         * Manage Users Controller\n         *\n         * @inject $scope\n         * @inject __DataStore\n         * @inject appServices\n         *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('ManageUsersController', [\n            '$scope',\n            '__DataStore',\n            'appServices',\n            'ManageUserDataService',\n            'ConfigurationDataService',\n            'LocationDataService',\n            function ManageUsersController($scope, __DataStore, appServices, ManageUserDataService, ConfigurationDataService, LocationDataService) {\n\n                var dtUsersColumnsData = [\n                    {\n                        \"name\": null,\n                        \"template\": \"#profileImageColumnTemplate\"\n                    },\n                    {\n                        \"name\": \"name\",\n                        \"template\": \"#userNameColumnTemplate\",\n                        \"orderable\": true\n                    },\n                    {\n                        \"name\": \"username\",\n                        \"orderable\": true\n                    },\n                    {\n                        \"name\": \"email\",\n                        \"orderable\": true\n                    },\n                    {\n                        \"name\": \"updated_at\",\n                        \"template\": \"#userUpdatedDateColumnTemplate\",\n                        \"orderable\": true\n                    },\n                    {\n                        \"name\": \"user_role\",\n                        \"orderable\": true\n                    },\n                    {\n                        \"name\": null,\n                        \"template\": \"#userActionColumnTemplate\"\n                    }\n                ],\n                    dtDeletedUsersColumnsData = [\n                        {\n                            \"name\": null,\n                            \"template\": \"#profileImageColumnTemplate\"\n                        },\n                        {\n                            \"name\": \"name\",\n                            \"template\": \"#userNameColumnTemplate\",\n                            \"orderable\": true\n                        },\n                        {\n                            \"name\": \"username\",\n                            \"orderable\": true\n                        },\n                        {\n                            \"name\": \"email\",\n                            \"orderable\": true\n                        },\n                        {\n                            \"name\": \"updated_at\",\n                            \"template\": \"#userUpdatedDateColumnTemplate\",\n                            \"orderable\": true\n                        },\n                        {\n                            \"name\": \"user_role\",\n                            \"orderable\": true\n                        },\n                        {\n                            \"name\": null,\n                            \"template\": \"#userActionColumnTemplate\"\n                        }\n                    ],\n                    tabs = {\n                        'active': {\n                            id: 'activeUsersTabList',\n                            status: 1 // Active\n                        },\n                        'inactive': {\n                            id: 'inactiveUsersTabList',\n                            status: 2 // Inactive\n                        },\n                        'deleted': {\n                            id: 'deletedUsersTabList',\n                            status: 5 // Soft Deleted\n                        }\n                    },\n                    currentStatus = 1,\n                    scope = this;\n\n\n                // Manage users tab action\n                // When clicking on tab, its related tab data load on same page\n\n                $('#manageUsersTabs a').click(function (e) {\n\n                    e.preventDefault();\n\n                    var $this = $(this),\n                        tabName = $this.attr('aria-controls'),\n                        selectedTab = tabs[tabName];\n\n                    // Check if selected tab exist    \n                    if (!_.isEmpty(selectedTab)) {\n\n                        $(this).tab('show')\n\n                        currentStatus = selectedTab.status;\n                        scope.getUsers(selectedTab.id, selectedTab.status);\n\n                    }\n\n                });\n\n                /**\n                  * Get users as a datatable source  \n                  *\n                  * @param string tableID\n                  * @param number status\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.getUsers = function (tableID, status) {\n\n                    // destroy if existing instatnce available\n                    if (scope.usersListDataTable) {\n                        scope.usersListDataTable.destroy();\n                    }\n\n                    scope.usersListDataTable = __DataStore.dataTable('#' + tableID, {\n                        url: {\n                            'apiURL': 'manage.user.read.datatable.list',\n                            'status': status\n                        },\n                        dtOptions: {\n                            \"searching\": true,\n                            \"pageLength\": 25,\n                            \"order\": [[1, \"asc\"]]\n                        },\n                        columnsData: status == 5 ? dtDeletedUsersColumnsData : dtUsersColumnsData,\n                        scope: $scope\n\n                    });\n\n                };\n\n                // load initial data for first tab\n                scope.getUsers('activeUsersTabList', 1);\n\n                /*\n                  Reload current datatable\n                  ------------------------------------------------------------------- */\n\n                scope.reloadDT = function () {\n                    __DataStore.reloadDT(scope.usersListDataTable);\n                };\n\n                /**\n                  * Delete user \n                  *\n                  * @param number userID\n                  * @param string userName\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.delete = function (userID, userName, deleteType) {\n\n                    scope.deletingUserName = unescape(userName);\n\n                    _.defer(function () {\n\n                        var $lwUserDeleteConfirmTextMsg = $('#lwUserDeleteConfirmTextMsg');\n\n                        var $lwUserPerDeleteConfirmTextMsg = $('#lwUserPerDeleteConfirmTextMsg');\n\n                        if (deleteType == 1) { // Soft delete\n                            scope.deleteText = $lwUserDeleteConfirmTextMsg.attr('data-message');\n                            scope.deleteConfirmBtnText = $lwUserDeleteConfirmTextMsg.attr('data-delete-button-text');\n                            scope.successMsgText = $lwUserDeleteConfirmTextMsg.attr('success-msg');\n                        } else { // Permanent delete\n                            scope.deleteText = $lwUserPerDeleteConfirmTextMsg.attr('data-message');\n                            scope.deleteConfirmBtnText = $lwUserPerDeleteConfirmTextMsg.attr('data-delete-button-text');\n                            scope.successMsgText = $lwUserPerDeleteConfirmTextMsg.attr('success-msg');\n                        }\n\n                    });\n\n                    _.defer(function () {\n\n                        __globals.showConfirmation({\n                            html: scope.deleteText,\n                            confirmButtonText: scope.deleteConfirmBtnText\n                        },\n                            function () {\n\n                                __DataStore.post({\n                                    'apiURL': 'manage.user.write.delete',\n                                    'userID': userID,\n                                })\n                                    .success(function (responseData) {\n\n                                        var message = responseData.data.message;\n\n                                        appServices.processResponse(responseData, {\n\n                                            error: function () {\n\n                                                __globals.showConfirmation({\n                                                    title: 'Deleted!',\n                                                    text: message,\n                                                    type: 'error'\n                                                });\n\n                                            }\n                                        },\n                                            function () {\n\n                                                __globals.showConfirmation({\n                                                    title: 'Deleted!',\n                                                    text: scope.successMsgText,\n                                                    type: 'success'\n                                                });\n                                                scope.reloadDT();   // reload datatable\n\n                                            }\n                                        );\n\n                                    })\n\n                            })\n\n                    });\n\n                };\n\n                /**\n                  * Restore deleted user \n                  *\n                  * @param number userID\n                  * @param string userName\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.restore = function (userID, userName) {\n\n                    scope.restoringUserName = unescape(userName);\n\n                    _.defer(function () {\n\n                        var $lwUserRestoreConfirmTextMsg = $('#lwUserRestoreConfirmTextMsg');\n\n                        __globals.showConfirmation({\n                            text: $lwUserRestoreConfirmTextMsg.attr('data-message'),\n                            confirmButtonText: $lwUserRestoreConfirmTextMsg.attr('data-restore-button-text')\n                        },\n                            function () {\n\n                                __DataStore.post({\n                                    'apiURL': 'manage.user.write.restore',\n                                    'userID': userID,\n                                })\n                                    .success(function (responseData) {\n\n                                        var message = responseData.data.message;\n\n                                        appServices.processResponse(responseData, {\n\n                                            error: function () {\n                                                __globals.showConfirmation({\n                                                    title: 'Restore!',\n                                                    text: message,\n                                                    type: 'error'\n                                                });\n                                            }\n                                        },\n                                            function () {\n\n                                                __globals.showConfirmation({\n                                                    title: 'Restore!',\n                                                    text: message,\n                                                    type: 'success'\n                                                });\n                                                scope.reloadDT();   // reload datatable\n\n                                            })\n\n                                    })\n\n                            })\n\n                    });\n\n                };\n\n                /**\n                  * Change password of user by Admin \n                  *\n                  * @param number userID\n                  * @param number name\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.changePassword = function (userID, name) {\n\n                    // open change password dialog\n                    appServices.showDialog({\n                        userID: userID,\n                        name: unescape(name)\n                    },\n                        {\n                            templateUrl: __globals.getTemplateURL('user.manage.change-password'),\n                            controller: 'ManageUserChangePasswordController as userChangePassword'\n                        },\n                        function (promiseObj) {\n\n                        });\n                };\n\n                /**\n                  * Show add new user dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.showAddNewDialog = function () {\n\n                    appServices.showDialog(\n                        {\n                            'showRoleSelectBox': true\n                        },\n                        {\n                            templateUrl: __globals.getTemplateURL('user.manage.add-dialog'),\n                        },\n                        function (promiseObj) {\n\n                            // Check if category updated\n                            if (_.has(promiseObj.value, 'user_added')\n                                && promiseObj.value.user_added == true && currentStatus == 1) {\n                                scope.reloadDT();\n                            }\n\n                        });\n                };\n\n                /**\n                  * Edit User Dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.editUserDialog = function (userId, name) {\n                    appServices.showDialog(\n                        {\n                            'userId': userId,\n                            'name': name\n                        },\n                        {\n                            templateUrl: 'user.manage.edit-dialog',\n                            controller: 'EditUserDialogController as EditUserDialogCtrl',\n                            resolve: {\n                                EditUserData: function () {\n                                    return ManageUserDataService\n                                        .getUserEditData(userId);\n                                }\n                            }\n                        },\n                        function (promiseObj) {\n\n                            // Check if category updated\n                            if (_.has(promiseObj.value, 'user_updated')\n                                && promiseObj.value.user_updated == true) {\n                                scope.reloadDT();\n                            }\n\n                        });\n                };\n\n                scope.showUsersConfigurationDialog = function () {\n\n                    ConfigurationDataService\n                        .readConfigurationData(5)\n                        .then(function (responseData) {\n\n                            appServices.showDialog({\n                                'responseData': responseData\n                            }, {\n                                templateUrl: __globals.getTemplateURL('configuration.users')\n                            }, function (promiseObj) {\n\n                            });\n\n                        });\n\n                };\n\n                /**\n                  * Show User Permission Dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.usersPermissionDialog = function (userId, fullName) {\n\n                    appServices.showDialog({\n                        'userId': userId,\n                        'fullName': _.unescape(fullName)\n                    }, {\n                        templateUrl: __globals.getTemplateURL('user.manage.user-dynamic-permission'),\n                        controller: 'ManageUsersDynamicPermissionController as manageUsersDynamicPermissionCtrl',\n                        resolve: {\n                            UserPermission: function () {\n                                return ManageUserDataService.getUserPermissions(userId);\n                            }\n                        }\n                    }, function (promiseObj) {\n\n                    });\n                };\n\n                /**\n                  * Show User Permission Dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.openUserDetailsDialog = function (userId) {\n\n                    appServices.showDialog({}, {\n                        templateUrl: __globals.getTemplateURL('user.manage.user-detail-dialog'),\n                        controller: 'ManageUsersDetailController as manageUsersDetailCtrl',\n                        resolve: {\n                            UserDetailData: function () {\n                                return ManageUserDataService.getUserDetailData(userId);\n                            }\n                        }\n                    }, function (promiseObj) {\n\n                    });\n                };\n\n                /**\n                  * Show Assign location dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.showAssignLocationDialog = function (userAuthorityId, name) {\n\n                    appServices.showDialog(\n                        {\n                            userAuthorityId: userAuthorityId,\n                            name: unescape(name)\n                        },\n                        {\n                            templateUrl: __globals.getTemplateURL('location.assign-location-dialog'),\n                            controller: 'AssignLocationController as AssignLocationCtrl',\n                            resolve: {\n                                assignLocationData: function () {\n                                    return LocationDataService.getAssignLocationData(userAuthorityId);\n                                }\n                            }\n                        }, function (promiseObj) {\n\n                        });\n                };\n            }\n        ])\n\n        /**\n          * User Detail Dialog Controller\n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('ManageUsersDetailController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'appServices',\n            'UserDetailData',\n            function ($scope, __DataStore, __Form, $stateParams, appServices, UserDetailData) {\n\n                var scope = this,\n                    requestData = UserDetailData;\n\n                scope.userData = requestData.userData;\n\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n\n        /**\n          * Add User Dialog Controller handle add new user dialog scope\n          * \n          * @inject $scope\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('AddUserDialogController', [\n            '$scope',\n            '__Form',\n            'appServices',\n            'ManageUserDataService',\n            function ($scope, __Form, appServices, ManageUserDataService) {\n\n                var scope = this;\n\n                scope = __Form.setup(scope, 'add_user_form', 'userData', { secured: true });\n\n                scope.showRoleSelectBox = $scope.ngDialogData.showRoleSelectBox;\n\n                // Get User add Support Data\n                ManageUserDataService\n                    .getUserAddSupportData()\n                    .then(function (responseData) {\n                        var requestData = responseData.data;\n                        scope.userRoles = requestData.userRoles;\n                    });\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process('manage.user.write.create', scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null, function () {\n\n                                // close dialog\n                                $scope.closeThisDialog({\n                                    user_added: true,\n                                    'user_data': responseData.data.userData\n                                });\n\n                            });\n\n                        });\n\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n\n            }\n        ])\n\n        /**\n         * ManageUserChangePasswordController handle change password by admin\n         * \n         * @inject $scope\n         * @inject __Form\n         * @inject appServices\n         * \n         * @return void\n         *-------------------------------------------------------- */\n        .controller('ManageUserChangePasswordController', [\n            '$scope',\n            '__Form',\n            'appServices',\n            function ManageUserChangePasswordController($scope, __Form, appServices) {\n\n                var scope = this;\n\n                scope = __Form.setup(scope, 'change_password_form', 'changePasswordData', {\n                    secured: true\n                });\n\n                scope.ngDialogData = $scope.ngDialogData;\n\n                scope.title = unescape(scope.ngDialogData.name);\n\n                // get id of user\n                scope.userID = scope.ngDialogData.userID;\n\n\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process({\n                        'apiURL': 'manage.user.write.change_password.process',\n                        'userID': scope.userID\n                    }, scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null, function () {\n\n                                // close dialog\n                                $scope.closeThisDialog();\n\n                            });\n\n                        });\n\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n\n        /**\n          * Manage User Details Dialog for manage product list\n          *\n          * @inject $scope\n          * @inject __Form\n          * \n          * @return void\n          *-------------------------------------------------------- */\n        .controller('ManageUserDetailsDialog', [\n            '$scope',\n            function ManageUserDetailsDialog($scope) {\n\n                var scope = this;\n\n                scope.ngDialogData = $scope.ngDialogData;\n                scope.userDetails = scope.ngDialogData;\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n\n            }\n        ])/*.filter('searchFilterList', function() {\n\n\t\t  \treturn function(items, searchText) {__pr(items);\n\n\t\t\t\tvar filtered = [];\n\n\t\t\t    angular.forEach(items, function(el, index) {\n\t\t\t\t\tvar oldObj = index;\n\t\t\t\t\tvar obj = [];\n\n\t\t\t      \tif (index && index.indexOf(searchText)>-1) {\n\t\t\t        \tobj.push(el);\n\t\t\t      \t}\n\n\t\t\t\t\tfiltered.push(obj);\n\n\t\t\t    });\n\t\t\t\t__pr(filtered);\n\t\t\t    return filtered;\n\t\t  \t};\n\t\t})\n*/\n        /**\n          * Manage User Dynamic Permissions\n          *\n          * @inject $scope\n          * @inject __Form\n          * \n          * @return void\n          *-------------------------------------------------------- */\n        .controller('ManageUsersDynamicPermissionController', [\n            '$scope',\n            '__Form',\n            '__DataStore',\n            'appServices',\n            'UserPermission',\n            function ManageUsersDynamicPermissionController($scope, __Form, __DataStore, appServices, UserPermission) {\n\n                var scope = this;\n\n                scope = __Form.setup(scope, 'user_dynamic_access', 'accessData', {\n                    secured: true,\n                    unsecuredFields: []\n                });\n\n                scope.ngDialogData = $scope.ngDialogData;\n                scope.userId = scope.ngDialogData.userId;\n                scope.fullName = scope.ngDialogData.fullName;\n                scope.requestData = UserPermission;\n                scope.permissions = scope.requestData.permissions;\n\n                scope.accessData.allow_permissions = scope.requestData.allow_permissions;\n                scope.accessData.deny_permissions = scope.requestData.deny_permissions;\n                scope.accessData.inherit_permissions = scope.requestData.inherit_permissions;\n\n                scope.disablePermissions = function (eachPermission, permissionID) {\n                    _.map(eachPermission.children, function (key) {\n                        if (_.includes(key.dependencies, permissionID)) {\n                            _.delay(function (text) {\n                                $('input[name=\"' + key.id + '\"]').attr('disabled', true);\n                            }, 500);\n                        }\n                    });\n                }\n\n                scope.checkedPermission = {};\n\n                _.map(scope.accessData.allow_permissions, function (permission) {\n                    scope.checkedPermission[permission] = \"2\";\n                });\n\n                _.map(scope.accessData.deny_permissions, function (permission) {\n                    scope.checkedPermission[permission] = \"3\";\n\n\n                    _.map(scope.permissions, function (eachPermission) {\n\n                        var pluckedIDs = _.pluck(eachPermission.children, 'id');\n\n                        if (_.includes(pluckedIDs, permission)) {\n                            scope.disablePermissions(eachPermission, permission)\n                        }\n\n                        if (_.has(eachPermission, 'children_permission_group')) {\n\n                            _.map(eachPermission.children_permission_group, function (groupchild) {\n\n                                var pluckedIDs = _.pluck(groupchild.children, 'id');\n\n                                if (_.includes(pluckedIDs, permission)) {\n                                    scope.disablePermissions(groupchild, permission)\n                                }\n                            });\n                        }\n                    });\n\n                });\n\n                _.map(scope.accessData.inherit_permissions, function (permission) {\n                    scope.checkedPermission[permission] = \"1\";\n\n                    _.map(scope.permissions, function (eachPermission) {\n\n                        var pluckedIDs = _.pluck(eachPermission.children, 'id');\n\n                        if (_.includes(pluckedIDs, permission) && eachPermission.children[0].inheritStatus == false && eachPermission.children[0].result == \"1\") {\n                            scope.disablePermissions(eachPermission, permission);\n                        }\n\n                        if (_.has(eachPermission, 'children_permission_group')) {\n\n                            _.map(eachPermission.children_permission_group, function (groupchild) {\n\n                                var pluckedIDs = _.pluck(groupchild.children, 'id');\n\n                                if (_.includes(pluckedIDs, permission) && groupchild.children[0].inheritStatus == false && groupchild.children[0].result == \"1\") {\n                                    scope.disablePermissions(groupchild, permission);\n                                }\n\n                            });\n                        }\n                    });\n                });\n\n                //for updating permissions\n                scope.checkPermission = function (childId, status) {\n\n                    if (!_.isString(status)) {\n                        status = status.toString();\n                    }\n\n                    scope.checkedPermission[childId] = status;\n\n                    if (status == \"2\") {\n                        if (!_.includes(scope.accessData.allow_permissions, childId)) {\n                            scope.accessData.allow_permissions.push(childId);\n                        }\n                        if (_.includes(scope.accessData.deny_permissions, childId)) {\n                            scope.accessData.deny_permissions = _.without(scope.accessData.deny_permissions, childId);\n                        }\n                    } else if (status == \"3\") {\n\n                        if (!_.includes(scope.accessData.deny_permissions, childId)) {\n                            scope.accessData.deny_permissions.push(childId);\n                        }\n                        if (_.includes(scope.accessData.allow_permissions, childId)) {\n                            scope.accessData.allow_permissions = _.without(scope.accessData.allow_permissions, childId);\n                        }\n                    } else {\n                        if (_.includes(scope.accessData.deny_permissions, childId)) {\n                            scope.accessData.deny_permissions = _.without(scope.accessData.deny_permissions, childId);\n                        }\n                        if (_.includes(scope.accessData.allow_permissions, childId)) {\n                            scope.accessData.allow_permissions = _.without(scope.accessData.allow_permissions, childId);\n                        }\n                    }\n\n                    _.map(scope.permissions, function (permission) {\n\n                        var pluckedIDs = _.pluck(permission.children, 'id'),\n                            keyPermissions = [];\n\n                        if (_.includes(pluckedIDs, childId) && permission.children[0].id == childId) {\n\n                            _.map(permission.children, function (key) {\n                                if (_.includes(key.dependencies, childId) && status == \"3\") {\n\n                                    $('input[name=\"' + key.id + '\"]').attr('disabled', true);\n\n                                } else if (_.includes(key.dependencies, childId) && status == \"1\" && permission.children[0].result && permission.children[0].inheritStatus == false) {\n\n                                    $('input[name=\"' + key.id + '\"]').attr('disabled', true);\n\n                                }\n                                else {\n                                    $('input[name=\"' + key.id + '\"]').attr('disabled', false);\n                                }\n                            });\n\n                        }\n\n                        if (_.has(permission, 'children_permission_group')) {\n                            _.map(permission.children_permission_group, function (groupchild) {\n\n                                var pluckedGroupChildIDs = _.pluck(groupchild.children, 'id'),\n                                    keyPermissionsGroup = [];\n\n                                //for disabling options if read option  in denied\n                                if (_.includes(pluckedGroupChildIDs, childId) && groupchild.children[0].id == childId) {\n\n                                    _.map(groupchild.children, function (groupchildkey) {\n                                        if (_.includes(groupchildkey.dependencies, childId) && status == \"3\") {\n                                            $('input[name=\"' + groupchildkey.id + '\"]').attr('disabled', true);\n\n                                        } else if (_.includes(groupchildkey.dependencies, childId) && status == \"1\" && groupchild.children[0].result && groupchild.children[0].inheritStatus == false) {\n\n                                            $('input[name=\"' + groupchildkey.id + '\"]').attr('disabled', true);\n\n                                        } else {\n                                            $('input[name=\"' + groupchildkey.id + '\"]').attr('disabled', false);\n                                        }\n\n\n                                    });\n\n                                }\n                            })\n                        }\n                    })\n                }\n\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n\n                scope.submit = function () {\n                    // scope.preparePermissions();\n                    __Form.process({\n                        'apiURL': 'manage.user.write.user_dynamic_permission',\n                        'userId': scope.userId\n                    }, scope)\n                        .success(function (responseData) {\n                            appServices.processResponse(responseData, null, function () {\n                                // close dialog\n                                $scope.closeThisDialog();\n                            });\n                        });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n\n            }\n        ])\n\n        /**\n          * Edit User Dialog Controller\n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('EditUserDialogController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'appServices',\n            'EditUserData',\n            function ($scope, __DataStore, __Form, $stateParams, appServices, EditUserData) {\n\n                var scope = this,\n                    requestData = EditUserData,\n                    ngDialogData = $scope.ngDialogData;\n\n                scope.userRoles = requestData.userRoles;\n                scope = __Form.setup(scope, 'user_edit_form', 'userData');\n                scope = __Form.updateModel(scope, requestData.userUpdateData);\n\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process({\n                        'apiURL': 'manage.user.write.update_process',\n                        'userId': ngDialogData.userId\n                    }, scope)\n                        .success(function (responseData) {\n                            appServices.processResponse(responseData, null, function () {\n                                // close dialog\n                                $scope.closeThisDialog({ 'user_updated': true });\n                            });\n                        });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n\n})(window, window.angular);","/*!\n*  Component  : Users\n*  File       : UserDataService.js  \n*  Engine     : UserDataService \n----------------------------------------------------------------------------- */\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.UserDataService', [])\n\n        /**\n          User Data Service  \n        ---------------------------------------------------------------- */\n        .service('UserDataService', [\n            '$q',\n            '__DataStore',\n            '__Form',\n            'appServices',\n            UserDataService\n        ]);\n\n    function UserDataService($q, __DataStore, __Form, appServices) {\n\n        /*\n        Get Login attempts \n        -----------------------------------------------------------------*/\n        this.getLoginAttempts = function () {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __Form.fetch('user.login.attempts')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);\n\n                    });\n\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Countries List \n        -----------------------------------------------------------------*/\n        this.getCountries = function () {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch('user.get.country_list')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);\n\n                    });\n\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n    }\n    ;\n})(window, window.angular);","/*!\n*  Component  : User\n*  File       : UserEngine.js  \n*  Engine     : UserEngine \n----------------------------------------------------------------------------- */\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('Manage-app.users', [])\n\n        /**\n          * UserLoginController - login a user in application\n          *\n          * @inject __Form\n          * @inject __Auth\n          * @inject appServices\n          * @inject __Utils\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserLoginController', [\n            '__Form',\n            '__Auth',\n            'appServices',\n            '__Utils',\n            'UserDataService',\n            '$state',\n            '$rootScope',\n            function (__Form, __Auth, appServices, __Utils, UserDataService, $state, $rootScope) {\n\n                var scope = this;\n\n                scope = __Form.setup(scope, 'form_user_login', 'loginData', {\n                    secured: true\n                });\n\n                scope.show_captcha = false;\n                scope.request_completed = false;\n\n                /**\n                  * Get login attempts for this client ip\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                UserDataService.getLoginAttempts()\n                    .then(function (responseData) {\n                        scope.show_captcha = responseData.data.show_captcha;\n                        scope.site_key = responseData.data.site_key;\n                        scope.request_completed = true;\n                    });\n\n                /**\n                  * Fetch captch url\n                  *\n                  * @return string\n                  *---------------------------------------------------------------- */\n\n                scope.getCaptchaURL = function () {\n                    return __Utils.apiURL('security.captcha') + '?ver=' + Math.random();\n                };\n\n                /**\n                  * Refresh captch \n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.refreshCaptcha = function () {\n                    scope.captchaURL = scope.getCaptchaURL();\n                };\n\n                scope.captchaURL = scope.getCaptchaURL();\n\n                scope.redirectToIntended = function () {\n\n                    if (__globals.intended && __globals.intended.name && __globals.intended.params) {\n\n                        return $state.go(__globals.intended.name, __globals.intended.params);\n\n                    } else if (__globals.intended && __globals.intended.name) {\n\n                        return $state.go(__globals.intended.name);\n                    }\n\n                    return $state.go('dashboard');\n\n                };\n\n                /**\n                * Submit login form action\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    scope.isInActive = false;\n                    scope.accountDeleted = false;\n\n                    __Form.process('user.login.process', scope).success(function (responseData) {\n\n                        var requestData = responseData.data;\n\n                        if (responseData.reaction != 1) {\n                            scope[scope.ngFormModelName].recaptcha = null;\n                        }\n\n                        appServices.processResponse(responseData, {\n                            error: function () {\n\n                                scope.show_captcha = requestData.show_captcha;\n\n                                // reset password field\n                                scope[scope.ngFormModelName].password = \"\";\n\n                                // Check if show captcha exist then refresh captcha\n                                if (scope.show_captcha) {\n                                    scope[scope.ngFormModelName].confirmation_code = \"\";\n                                    scope.refreshCaptcha();\n                                }\n\n                            },\n                            otherError: function (reactionCode) {\n\n                                scope.isInActive = requestData.isInActive;\n                                scope.accountDeleted = requestData.accountDeleted;\n\n                                // If reaction code is Server Side Validation Error Then \n                                // Unset the form fields\n                                if (reactionCode == 3) {\n\n                                    // Check if show captcha exist then refresh captcha\n                                    if (scope.show_captcha) {\n                                        scope.refreshCaptcha();\n                                    }\n\n                                }\n\n                                // If reaction code 10 is already authenticate.\n                                if (reactionCode == 10) {\n\n                                    // Check if show captcha exist then refresh captcha\n                                    scope.redirectToIntended();\n                                    //__globals.redirectBrowser(__Utils.apiURL('dashboard'));\n\n                                }\n\n                            }\n                        },\n                            function () {\n\n                                __Auth.checkIn(requestData.auth_info, function () {\n\n                                    //__globals.setCookie('auth_access_token', requestData.access_token);\n\n                                    if (requestData.availableRoutes) {\n                                        __globals.appImmutable('availableRoutes',\n                                            requestData.availableRoutes);\n                                    }\n\n                                    if (requestData.ckeditor) {\n                                        __globals.appImmutable('ckeditor', requestData.ckeditor);\n                                    }\n\n\n                                    if (requestData.intendedUrl) {\n\n                                        __globals.redirectBrowser(requestData.intendedUrl);\n\n                                    } else {\n\n                                        /*if (requestData.auth_info.designation == 1) {\n\n                                            __globals.redirectBrowser(__Utils.apiURL('manage.app'));\n\n                                        } else {\n\n                                            __globals.redirectBrowser(window.appConfig.appBaseURL);\n                                        }*/\n                                        //__globals.redirectBrowser(__Utils.apiURL('manage.app'));\n                                        $rootScope.$emit('lw.events.logged_in_user', { data: true });\n\n                                        scope.redirectToIntended();\n\n                                    }\n\n                                });\n                            });\n\n                    });\n\n                };\n\n            }\n\n        ])\n\n\n        /**\n          * UserLogoutController for login logout\n          *\n          * @inject __DataStore\n          * @inject __Auth\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n        .controller('UserLogoutController', [\n            '__DataStore',\n            '__Auth',\n            'appServices',\n            function UserLogoutController(__DataStore, __Auth, appServices) {\n\n                var scope = this;\n\n                __DataStore.post('user.logout').success(function (responseData) {\n\n                    appServices.processResponse(responseData, function (reactionCode) {\n\n                        // set user auth information\n                        __Auth.checkIn(responseData.data.auth_info);\n\n                    });\n\n                });\n\n            }\n        ])\n\n        /**\n          * UserForgotPasswordController - request to send password reminder\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserForgotPasswordController', [\n            '__Form',\n            'appServices',\n            '__Utils',\n            '$state',\n            function (__Form, appServices, __Utils, $state) {\n\n                var scope = this;\n\n\n                scope = __Form.setup(scope, 'user_forgot_password_form', 'userData', {\n                    secured: true\n                });\n\n                /**\n                  * Submit form\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process('user.forgot_password.process', scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null, function () {\n\n                                $state.go('forgot_password_sucess');\n\n                            });\n\n                        });\n\n                };\n\n            }\n\n        ])\n\n        /**\n          * UserResetPasswordController for reset user password\n          *\n          * @inject __Form\n          * @inject appServices\n          * @inject __Utils\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserResetPasswordController', [\n            '__Form',\n            'appServices',\n            '__Utils',\n            '$state',\n            function (__Form, appServices, __Utils, $state) {\n\n                var scope = this;\n\n                scope = __Form.setup(scope, 'user_reset_password_form', 'userData', {\n                    secured: true\n                });\n\n                /**\n                  * Submit reset password form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process({\n                        'apiURL': 'user.reset_password.process',\n                        'reminderToken': $state.params.reminderToken\n                    }, scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null,\n                                function (reactionCode) {\n                                    $state.go('login');\n                                });\n\n                        });\n\n                };\n\n            }\n        ])\n\n        /**\n          * UserContactController handle register form & send request to server\n          * to submit form data. \n          *\n          * @inject __Form\n          * @inject $state\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n        .controller('UserContactController', [\n            '__Form',\n            '$state',\n            'appServices',\n            '__Utils',\n            '__Auth',\n            '$scope',\n            function UserContactController(__Form, $state, appServices, __Utils, __Auth, $scope) {\n\n                var scope = this;\n\n                scope.showCaptcha = false;\n\n                scope = __Form.setup(scope, 'user_contact_form', 'userData', {\n                    secured: true,\n                    unsecuredFields: ['message']\n                });\n\n                // additional option for ck-editor\n                scope.AdditionalOptionOfCkeditor = {\n                    toolbar: [\n                        {\n                            name: 'links',\n                            items: [\n                                'Link',\n                                'Unlink',\n                                'Anchor'\n                            ]\n                        },\n                        {\n                            name: 'insert',\n                            items: ['Smiley']\n                        }\n                    ],\n                    extraPlugins: 'smiley'\n                };\n\n                // get logged in user Info\n                __Auth.refresh(function (authInfo) {\n                    scope.auth_info = authInfo;\n                });\n\n                scope.isLoggedIn = scope.auth_info.authorized;\n\n                // check if user is logged in or not\n                if (!scope.isLoggedIn) {\n                    scope.showCaptcha = true;\n                }\n\n                if (scope.auth_info.reaction_code != 9) { // not authenticate\n                    scope.userData.email = scope.auth_info.profile.email;\n                    scope.userData.name = scope.auth_info.profile.full_name;\n                }\n\n                if (!_.isEmpty($scope.ngDialogData)) {\n\n                    scope.userData.orderUID = $scope.ngDialogData.orderUID;\n                }\n\n                /**\n                  * Fetch captch url\n                  *\n                  * @return string\n                  *---------------------------------------------------------------- */\n\n                scope.getCaptchaURL = function () {\n                    return __Utils.apiURL('security.captcha') + '?ver=' + Math.random();\n                };\n\n                /**\n                  * Refresh captch \n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.refreshCaptcha = function () {\n                    scope.captchaURL = scope.getCaptchaURL();\n                };\n\n                scope.captchaURL = scope.getCaptchaURL();\n\n\n                /**\n                  * Submit register form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.requestSuccess = false;\n                scope.submit = function (formType) {\n\n                    scope.userData.formType = formType;\n\n                    __Form.process('user.contact.process', scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, {\n                                error: function () {\n\n                                },\n                                otherError: function () {\n                                    // refresh captcha\n                                    scope[scope.ngFormModelName].confirmation_code = \"\";\n                                    scope.refreshCaptcha();\n                                }\n                            },\n                                function () {\n\n                                    scope.userData = '';\n\n                                    CKEDITOR.instances['message'].setData('');\n\n\n                                    // Check if form type dialog or form\n                                    if (scope.userData.formType == 2) { // dialog\n\n                                        $scope.closeThisDialog();\n\n                                    }\n\n                                    scope.requestSuccess = true;\n\n                                    $('.lw-contact-form').slideUp();\n                                });\n\n                        });\n\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n\n            }\n        ])\n\n        /**\n          * UserAddCountryController handle address form & send request to server\n          * to submit form data. \n          *\n          * @inject $scope\n          * @inject __Form\n          * @inject $state\n          * @inject appServices\n          * @inject __Utils\n          * \n          * @return void\n          *-------------------------------------------------------- */\n        .controller('UserAddCountryController', [\n            '$scope',\n            '__Form',\n            '$state',\n            'appServices',\n            '__Utils',\n            'UserDataService',\n            function UserAddCountryController($scope, __Form, $state, appServices, __Utils, UserDataService) {\n\n                var scope = this;\n\n                scope = __Form.setup(scope, 'user_country_add_form', 'userData');\n\n                scope.request_completed = false;\n                scope.countries = [];\n\n                UserDataService.getCountries()\n                    .then(function (responseData) {\n                        var requestData = responseData.data;\n                        scope.countries = requestData.countries;\n                        scope.request_completed = true;\n                    });\n\n                scope.countrySelectConfig = __globals.getSelectizeOptions();\n\n                /**\n                  * Submit profile edit form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process('user.add.country.process', scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null, function () {\n\n                                $scope.closeThisDialog({ 'countryAdded': true });\n\n                            });\n\n                        });\n\n                };\n\n\n                /**\n                 * Close dialog and return promise object\n                 *\n                 * @return void\n                 *---------------------------------------------------------------- */\n\n                scope.close = function () {\n\n                    $scope.closeThisDialog({ 'countryAdded': false });\n                };\n\n            }\n        ])\n})(window, window.angular);","/*!\n*  Component  : Configuration\n*  File       : ConfigurationDataService.js  \n*  Engine     : ConfigurationDataService \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.ConfigurationDataService', [])\n        .service('ConfigurationDataService', [\n            '$q',\n            '__DataStore',\n            'appServices',\n            ConfigurationDataService\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function ConfigurationDataService($q, __DataStore, appServices) {\n\n        /*\n        Get the data of configuration\n        -----------------------------------------------------------------*/\n\n        this.readConfigurationData = function (formType) {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.configuration.get.support.data',\n                'formType': formType // different form type like 1, 2,3,4 etc\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData);\n\n                });\n\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n    };\n\n\n})(window, window.angular);\n","\n/*!\n*  Component  : Configuration\n*  File       : ConfigurationEngine.js\n*  Engine     : ConfigurationEngine\n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.configuration', [])\n\n        /**\n         * GeneralDialogController for update request\n         *\n         * @inject $scope\n         * @inject __DataStore\n         * @inject appServices\n         * @inject __Form\n         *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('GeneralController', [\n            '$scope',\n            '__Form',\n            '$state',\n            'appServices',\n            'lwFileUploader',\n            '__Utils',\n            '$rootScope',\n            'getGeneralData',\n            function GeneralController(\n                $scope, __Form, $state, appServices, lwFileUploader, __Utils, $rootScope, getGeneralData\n            ) {\n\n                var scope = this;\n                // scope.default_header_background_color = getGeneralData.data.configuration.default_header_background_color;\n                //  scope.default_header_text_link_color = getGeneralData.data.configuration.default_header_text_link_color;\n                //  scope.themeColors = getGeneralData.data.configuration.theme_colors;\n\n                scope = __Form.setup(scope, 'general_edit', 'editData', {\n                    secured: true,\n                    modelUpdateWatcher: true,\n                    unsecuredFields: ['logoURL', 'faviconURL', 'smallLogoURL']\n                });\n\n                scope.pageStatus = false;\n\n                scope.timezone_select_config = __globals.getSelectizeOptions({\n                    valueField: 'value',\n                    labelField: 'text',\n                    searchField: ['text']\n                });\n\n                scope.home_page_select_config = __globals.getSelectizeOptions({\n                    valueField: 'id'\n                });\n\n                /*scope.selectSiteColor = function(themeColor) {\n                    scope.editData.header_background_color = themeColor.background;\n                    scope.editData.header_text_link_color = themeColor.text;\n                }*/\n\n                scope.checkLogo = function (from) {\n                    var isSame = false;\n\n                    if (scope.editData.invoice_logo_image == scope.editData.logo_image) {\n                        isSame = true;\n                    }\n\n                    if (isSame) {\n                        if (from == 1) { // Logo\n                            scope.editData.invoice_logo_image = '';\n                        } else if (from == 2) { // Invoice Logo\n                            scope.editData.logo_image = '';\n                        }\n                    }\n                };\n\n                /**\n                  * Clear Color \n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                /*scope.clearColor = function() {\n                    // var logo_background_color = ngDialogData.responseData.data.configuration.logo_background_color;\n                    scope.editData.header_background_color = scope.default_header_background_color;\n                \t\n                }*/\n\n                /**\n                  * Clear Color \n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                /*scope.clearPrimaryColor = function() {\n                    scope.editData.header_text_link_color = scope.default_header_text_link_color;\n                }*/\n\n                /**\n                  * Fetch support data\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                var requestData = getGeneralData.data;\n                scope.timezoneData = requestData.configuration.timezone_list;\n                scope.homePageData = __globals.generateKeyValueItems(requestData.configuration.home_page_list);\n\n                scope.languages = requestData.configuration.locale_list;\n                var configuration = requestData.configuration;\n\n                __Form.updateModel(scope, configuration);\n\n                scope.pageStatus = true;\n\n                scope.imagesSelectConfig = __globals.getSelectizeOptions({\n                    valueField: 'name',\n                    labelField: 'name',\n                    render: {\n                        item: function (item, escape) {\n                            return __Utils.template('#imageListItemTemplate',\n                                item\n                            );\n                        },\n                        option: function (item, escape) {\n                            return __Utils.template('#imageListOptionTemplate',\n                                item\n                            );\n                        }\n                    },\n                    searchField: ['name']\n                });\n\n\n                /**\n                  * Retrieve files required for account logo\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.retrieveSpecificFiles = function () {\n\n                    lwFileUploader.getTempUploadedFiles(scope, {\n                        'url': __Utils.apiURL('media.upload.read_logo')\n                    }, function (uploadedFile) {\n                        scope.logoFiles = uploadedFile;\n                        scope.logoFilesCount = uploadedFile.length;\n                    });\n\n                };\n                scope.retrieveSpecificFiles();\n\n                scope.retrieveFaviconFiles = function () {\n                    lwFileUploader.getTempUploadedFiles(scope, {\n                        'url': __Utils.apiURL('media.upload.read_favicon')\n                    }, function (uploadedFile) {\n                        scope.faviconFiles = uploadedFile;\n                        scope.faviconFilesCount = uploadedFile.length;\n                    });\n                };\n\n                scope.retrieveFaviconFiles();\n\n                $rootScope.$on('lw-loader-event-start', function (event, data) {\n                    $scope.loading = true;\n                    $(\"#lwFileupload\").attr(\"disabled\", true);\n                });\n\n                $rootScope.$on('lw-loader-event-stop', function (event, data) {\n                    $scope.loading = false;\n                    $(\"#lwFileupload\").attr(\"disabled\", false);\n                });\n\n                // uploader file instance\n                $scope.upload = function () {\n\n                    lwFileUploader.upload({\n                        'url': __Utils.apiURL('media.upload.write.logo')\n                    }, function (response) {\n\n                        scope.retrieveSpecificFiles();\n                        scope.retrieveFaviconFiles();\n\n                    });\n                };\n\n                /**\n                  * Show uploaded media files\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                $scope.showUploadedMediaDialog = function () {\n\n                    lwFileUploader.openDialog(scope, {\n                        'url': __Utils.apiURL('media.upload.read_logo')\n                    },\n                        function (promiseObject) {\n                            scope.retrieveSpecificFiles();\n                            scope.retrieveFaviconFiles();\n                        });\n\n                };\n\n                /**\n                  * update blog data\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process({\n                        'apiURL': 'manage.configuration.process',\n                        'formType': 1\n                    }, scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null, function () {\n\n                                var requestData = responseData.data;\n                                if (requestData.showRealodButton == true) {\n                                    __globals.showConfirmation({\n                                        title: responseData.data.message,\n                                        text: responseData.data.textMessage,\n                                        type: \"success\",\n                                        confirmButtonClass: \"btn-success\",\n                                        confirmButtonText: $(\"#lwReloadBtnText\").attr('data-message'),\n                                        confirmButtonColor: \"#337ab7\",\n                                    }, function () {\n                                        location.reload();\n                                    });\n                                }\n                            });\n                        });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                var logo_background_color = getGeneralData.data.configuration.logo_background_color;\n\n                scope.closeDialog = function () {\n\n                    // $('#lwchangeHeaderColor').css('background', \"#\"+logo_background_color);\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n\n        /**\n         * CurrencyConfigurationController for manage currency of store\n         *\n         * @inject $scope\n         * @inject __Form\n         * @inject appServices\n         *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('CurrencyConfigurationController', [\n            '$scope',\n            '__Form',\n            'appServices',\n            'getCurrencyData',\n            function CurrencyConfigurationController($scope, __Form, appServices, getCurrencyData) {\n\n                var scope = this,\n                    ngDialogData = $scope.ngDialogData;\n\n                scope.isZeroDecimalCurrency = false;\n\n                /**\n                  * Generate key value\n                  *\n                  * @param bool responseKeyValue\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.generateCurrenciesArray = function (currencies, responseKeyValue) {\n\n                    if (!responseKeyValue) {\n                        return currencies;\n                    }\n\n                    var currenciesArray = [];\n\n                    _.forEach(currencies, function (value, key) {\n\n                        currenciesArray.push({\n                            'currency_code': key,\n                            'currency_name': value.name\n                        });\n\n                    });\n\n                    var $lwCurrencySettingTxtMsg = $('#lwCurrencySettingTxtMsg');\n\n                    currenciesArray.push({\n                        'currency_code': 'other',\n                        'currency_name': $lwCurrencySettingTxtMsg.attr('other-text')\n                    });\n\n                    return currenciesArray;\n\n                };\n\n                /**\n                  *  Check the the currency match with zero decimal\n                  *\n                  * @param array zeroDecimalCurrecies\n                  * @param string selectedCurrencyValue\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.checkIsZeroDecimalCurrency = function (zeroDecimalCurrecies, selectedCurrencyValue) {\n\n                    var isMatch = _.filter(zeroDecimalCurrecies, function (value, key) {\n\n                        return (key === selectedCurrencyValue);\n                    });\n\n                    scope.isZeroDecimalCurrency = Boolean(isMatch.length);\n\n                };\n\n                /**\n                  * Check if current currency is Paypal supported or not\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.checkIsPaypalSupported = function (currencyValue) {\n\n                    var isPaypalSupported = _.filter(scope.options, function (value, key) {\n\n                        return (key == currencyValue);\n                    });\n\n                    scope.isPaypalSupport = Boolean(isPaypalSupported.length);\n                };\n\n                /**\n                  * format currency symbol and currency value\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.formatCurrency = function (currencySymbol, currency) {\n\n                    _.defer(function () {\n\n                        var $lwCurrencyFormat = $('#lwCurrencyFormat');\n\n                        var string = $lwCurrencyFormat.attr('data-format');\n\n                        scope.currency_format_preview = string.split('{__currencySymbol__}').join(currencySymbol)\n                            .split('{__amount__}').join(100)\n                            .split('{__currencyCode__}').join(currency);\n                    });\n                };\n\n                scope.pageStatus = false;\n\n                scope = __Form.setup(scope, 'edit_currency_configuration', 'editData', {\n                    secured: true,\n                    unsecuredFields: [\n                        'currency_symbol',\n                        'currency_format'\n                    ]\n                });\n\n                scope.currencies_select_config = __globals.getSelectizeOptions({\n                    valueField: 'currency_code',\n                    labelField: 'currency_name',\n                    searchField: ['currency_code', 'currency_name']\n                });\n\n                scope.multi_currencies_select_config = __globals.getSelectizeOptions({\n                    valueField: 'currency_code',\n                    labelField: 'currency_name',\n                    searchField: ['currency_code', 'currency_name'],\n                    plugins: ['remove_button'],\n                    maxItems: 1000,\n                    delimiter: ',',\n                    persist: false\n                });\n\n                scope.is_support_paypal = true;\n\n\n                var requestData = getCurrencyData.data,\n                    currenciesData = requestData.configuration.currencies;\n\n                scope.options = currenciesData.options;\n                scope.currencies = currenciesData.details;\n                scope.zeroDecimal = currenciesData.zero_decimal;\n                /*scope.currencies_options\n                        = scope.generateCurrenciesArray(currenciesData.details, true);*/\n\n                _.defer(function () {\n                    scope.currencies_options\n                        = scope.generateCurrenciesArray(currenciesData.details, true);\n                });\n\n                scope.checkIsZeroDecimalCurrency(scope.zeroDecimal, requestData.configuration.currency_value);\n\n                scope.checkIsPaypalSupported(requestData.configuration.currency);\n\n                scope.default_currency_format = requestData.configuration.default_currency_format;\n\n                scope.placeholders = requestData.placeholders;\n                scope = __Form.updateModel(scope, requestData.configuration);\n\n                _.forEach(scope.currencies, function (currencyObj, key) {\n\n                    if (key == scope.editData.currency_value) {\n                        scope.currencySymbol = currencyObj.symbol;\n                    }\n                });\n\n                if (requestData.configuration.currency == 'other') {\n                    scope.currencySymbol = requestData.configuration.currency_symbol;\n                }\n\n                scope.formatCurrency(scope.currencySymbol, scope.editData.currency_value);\n\n\n                scope.pageStatus = true;\n\n\n                /**\n                  * Use default format for currency\n                  *\n                  * @param string defaultCurrencyFormat\n                  *\n                  * @return string\n                  *---------------------------------------------------------------- */\n                scope.useDefaultFormat = function (defaultCurrencyFormat, currency_symbol, currency_value) {\n\n                    scope.editData.currency_format = defaultCurrencyFormat;\n\n                    var string = scope.editData.currency_format;\n\n                    scope.currency_format_preview = string.split('{__currencySymbol__}').join(currency_symbol)\n                        .split('{__amount__}').join(100)\n                        .split('{__currencyCode__}').join(currency_value);\n                };\n\n\n                /**\n                  * Use default format for currency\n                  *\n                  * @param string defaultCurrencyFormat\n                  *\n                  * @return string\n                  *---------------------------------------------------------------- */\n                scope.updateCurrencyPreview = function (currency_symbol, currency_value) {\n\n                    if (_.isUndefined(currency_symbol)) {\n                        currency_symbol = '';\n                    }\n\n                    if (_.isUndefined(currency_value)) {\n                        currency_value = '';\n                    }\n\n                    var $lwCurrencyFormat = $('#lwCurrencyFormat');\n\n                    var string = $lwCurrencyFormat.attr('data-format');\n\n                    scope.currency_format_preview = string.split('{__currencySymbol__}').join(currency_symbol)\n                        .split('{__amount__}').join(100)\n                        .split('{__currencyCode__}').join(currency_value);\n\n                };\n\n                /**\n                  * Submit currency Data\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process({\n                        'apiURL': 'manage.configuration.process',\n                        'formType': 2 // currency\n                    }, scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null, function () {\n\n                                var requestData = responseData.data;\n\n                                if (requestData.showRealodButton == true) {\n\n                                    __globals.showConfirmation({\n                                        title: responseData.data.message,\n                                        text: responseData.data.textMessage,\n                                        type: \"success\",\n                                        showCancelButton: true,\n                                        confirmButtonClass: \"btn-success\",\n                                        confirmButtonText: $(\"#lwReloadBtnText\").attr('data-message'),\n                                        confirmButtonColor: \"#337ab7\"\n                                    }, function () {\n\n                                        location.reload();\n\n                                    });\n                                }\n                            });\n\n                        });\n                };\n\n\n                /**\n                  * currency change\n                  *\n                  * @param selectedCurrency\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.currencyChange = function (selectedCurrency) {\n\n                    scope.checkIsZeroDecimalCurrency(scope.zeroDecimal, selectedCurrency);\n\n                    if (!_.isEmpty(selectedCurrency) && selectedCurrency != 'other') {\n\n                        _.forEach(scope.currencies, function (currencyObj, key) {\n\n                            if (key == selectedCurrency) {\n                                scope.editData.currency_value = selectedCurrency;\n                                scope.editData.currency_symbol = currencyObj.ASCII;\n                                scope.currencySymbol = currencyObj.symbol;\n                            }\n\n                        });\n\n                        scope.is_support_paypal = true;\n\n                    } else {\n\n                        scope.editData.currency_value = '';\n                        scope.editData.currency_symbol = '';\n\n                    }\n\n                    scope.updateCurrencyPreview(scope.currencySymbol, scope.editData.currency_value);\n\n                    scope.checkIsPaypalSupported(scope.editData.currency_value);\n\n                };\n\n                /**\n                  * currency value change\n                  *\n                  * @param currencyValue\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.currencyValueChange = function (currencyValue) {\n\n                    scope.checkIsZeroDecimalCurrency(scope.zeroDecimal, currencyValue);\n\n                    if (!_.isEmpty(currencyValue) && currencyValue != 'other') {\n\n                        var currency = {};\n                        _.forEach(scope.currencies, function (currencyObj, key) {\n\n                            if (key == currencyValue) {\n                                currency = currencyObj;\n                            }\n\n                        });\n\n                        if (_.isEmpty(currency)) {\n                            //scope.is_support_paypal = false;\n                            scope.editData.currency = 'other';\n                        } else {\n                            //scope.is_support_paypal     = true;\n                            scope.editData.currency = currencyValue;\n                            scope.editData.currency_symbol = currency.ASCII;\n                            scope.currencySymbol = currency.symbol;\n                        }\n\n                    } else if (!_.isEmpty(currencyValue)) {\n\n                        //scope.is_support_paypal     = false;\n                        scope.editData.currency = 'other';\n\n                    } else {\n\n                        //scope.is_support_paypal  = true;\n                        scope.editData.currency = '';\n\n                    }\n\n                    scope.checkIsPaypalSupported(currencyValue);\n\n                    if (_.isUndefined(scope.editData.currency_value)) {\n                        scope.currencySymbol = '';\n                    }\n\n                    scope.updateCurrencyPreview(scope.currencySymbol, scope.editData.currency_value);\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog(scope.currencySymbol, scope.editData.currency);\n                };\n            }\n        ])\n        ;\n\n})(window, window.angular);","/*!\n*  Component  : Dashboard\n*  File       : DashboardDataService.js  \n*  Engine     : DashboardDataService \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.DashboardDataService', [])\n        .service('DashboardDataService', [\n            '$q',\n            '__DataStore',\n            'appServices',\n            DashboardDataService\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function DashboardDataService($q, __DataStore, appServices) {\n\n        /*\n        Get support data\n        -----------------------------------------------------------------*/\n\n        this.getSupportData = function (formType) {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch('manage.dashboard.read.support_data')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n\n                    });\n\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n\n        /*\n         Get product search data\n         -----------------------------------------------------------------*/\n\n        this.getProductSearchData = function (searchTerm) {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.dashboard.read.search_products',\n                'searchTerm': searchTerm\n            }, { fresh: true }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData);\n\n                });\n\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get support data\n        -----------------------------------------------------------------*/\n\n        this.getProductInventoryDetails = function (productId) {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.dashboard.read.product_inventory_details',\n                'productId': productId\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n\n                });\n\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n    };\n\n\n})(window, window.angular);\n","/*!\n*  Component  : Dashboard\n*  File       : DashboardEngine.js  \n*  Engine     : DashboardEngine \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.DashboardEngine', [])\n\n        /**\n          * Admin Dashboard Controller \n          *\n          * @inject object $scope\n          * @inject object DashboardDataService\n          * @inject object __Form\n          * @inject object $stateParams\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        .controller('AdminDashboardController', [\n            '$scope',\n            'GetDatshboardData',\n            '$rootScope',\n            'appServices',\n            'DashboardDataService',\n            'InventoryDataService',\n            '__Utils',\n            '$compile',\n            function ($scope, GetDatshboardData, $rootScope, appServices, DashboardDataService, InventoryDataService, __Utils, $compile) {\n\n                var scope = this;\n                scope.pageStatus = false;\n\n                scope.dashboardData = GetDatshboardData.dashboard.dashboardData;\n                scope.myLocations = scope.dashboardData.myLocations;\n                scope.isAdmin = scope.dashboardData.isAdmin;\n                scope.options = [];\n\n                $.typeahead({\n                    input: '.lw-product-search-input',\n                    minLength: 1,\n                    order: \"asc\",\n                    dynamic: true,\n                    delay: 500,\n                    hint: false,\n                    searchOnFocus: false,\n                    emptyTemplate: \"no result found for '{{query}}' \",\n                    template: function (query, item) {\n\n                        return '<span>' +\n                            '<span>{{product_name}}</span> ' +\n                            '<span>{{name}}</span>' +\n                            \"</span>\"\n                    },\n                    source: {\n                        productList: {\n                            display: [\"product_name\", \"name\", \"barcode\", \"location_name\"],\n                            ajax: function (query, callback) {\n\n                                return {\n                                    type: \"GET\",\n                                    path: \"productList\",\n                                    url: __Utils.apiURL({\n                                        'apiURL': 'manage.dashboard.read.search_products',\n                                        'searchTerm': query\n                                    }),\n                                    callback: {\n                                        done: function (responseData) {\n                                            scope.options = responseData.data.productList;\n                                            return responseData.data;\n                                        }\n                                    }\n                                }\n                            },\n                        }\n                    },\n                    callback: {\n                        onClick: function (node, a, item, event) {\n                            event.preventDefault();\n\n                            if (!_.isEmpty(item)) {\n                                scope.updateInventory(item.id, null, null);\n                            }\n\n                        },\n                    },\n                    debug: true\n                });\n\n                /* scope.productSelectConfig = __globals.getSelectizeOptions({\n                     valueField  : 'id',\n                     labelField  : 'name',\n                     searchField : ['name', 'product_name', 'barcode'],\n                     options: [],\n                     create: false,\n                     loadThrottle: 600,\n                     // render: {\n                     //     option: function(item, escape) {\n                     //     \t__pr(item);\n                     //         return $compile(__Utils.template('#lwSelectizeOp', {\n                     //             item : item\n                     //         }))(scope);\n                     //     }\n                     // },\n                     load: function(searchTerm, callback) {\n \n                         var $this = this;\n \n                         if (searchTerm.length == 0) {\n                             return callback();\n                         }\n                         _.defer(function() {\n                                       DashboardDataService\n                                 .getProductSearchData(searchTerm)\n                                 .then(function(responseData) {\n                                     scope.options = responseData.data.productList;\n \n                                     if (scope.options.length == 1) {\n                                         _.forEach(scope.options, function(item) {\n                                             if (item.barcode == searchTerm) {\n                                                 scope.updateInventory(item.id, null, null)\n                                             }\n                                         });\n \n                                         $this.clearOptions();\n                                     }\n                                 \t\n                                     if (!_.isEmpty(scope.options)) {\n                                         callback(responseData.data.productList);\n                                     } else {\n                                         callback();\n                                         $this.blur();\n                                         $this.clearOptions();\n                                         $this.focus();\n                                     }\n                                 });\n                         });\n                     },\n                     onChange : function(value) {\n                           this.clearOptions();\n                     },\n                     onFocus  : function(value) {\n                           this.clearOptions();\n                     },\n                 });*/\n\n\n\n                /*\n                Update Inventory\n                ------------------------------------------------------------ */\n                scope.updateInventory = function (combinationId, locationId, type) {\n\n                    var productId = null,\n                        productName = null,\n                        supplierId = null;\n                    _.forEach(scope.options, function (item) {\n                        if (item.id == combinationId) {\n                            productId = item.product_id;\n                            productName = item.product_name;\n                            supplierId = item.supplier_id;\n                        }\n                    });\n\n                    if (_.isUndefined(combinationId)) {\n                        return false;\n                    }\n\n                    appServices.showDialog(\n                        {\n                            productName: productName,\n                            productId: productId,\n                            type: type,\n                            combinationId: parseInt(combinationId),\n                            supplierId: supplierId,\n                            showProductList: false\n                        },\n                        {\n                            templateUrl: \"inventory.update-inventory-dialog\",\n                            controller: 'UpdateInventoryController as UpdateInventoryCtrl',\n                            resolve: {\n                                InventoryUpdateData: function () {\n                                    return InventoryDataService\n                                        .getInventoryUpdateData(productId, combinationId, locationId, supplierId);\n                                }\n                            }\n                        },\n                        function (promiseObj) {\n                            if (_.has(promiseObj.value, 'inventory_updated')\n                                && promiseObj.value.inventory_updated) {\n                                //scope.getInventories(null);\n                            }\n                        });\n                }\n            }\n        ])\n\n        /**\n          * Inventory Detail Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('InventoryDetailController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'InventoryDataService',\n            'appServices',\n            'DashboardDataService',\n            function ($scope, __DataStore, __Form, $stateParams, InventoryDataService, appServices, DashboardDataService) {\n\n                var scope = this;\n                scope.initialContentLoaded = false;\n\n                scope.getproductInventoryDetails = function () {\n                    DashboardDataService\n                        .getProductInventoryDetails($scope.ngDialogData.productId)\n                        .then(function (responseData) {\n                            scope.inventoryData = responseData.invetoryData;\n                            scope.initialContentLoaded = true;\n                        });\n                }\n                scope.getproductInventoryDetails();\n\n                /*\n                Update Inventory\n                ------------------------------------------------------------ */\n                scope.updateInventory = function (productId, productName, comboKey, locationId, type, supplierId) {\n                    appServices.showDialog(\n                        {\n                            productName: productName,\n                            productId: productId,\n                            type: type\n                        },\n                        {\n                            templateUrl: \"inventory.update-inventory-dialog\",\n                            controller: 'UpdateInventoryController as UpdateInventoryCtrl',\n                            resolve: {\n                                InventoryUpdateData: function () {\n                                    return InventoryDataService\n                                        .getInventoryUpdateData(productId, comboKey, locationId, supplierId);\n                                }\n                            }\n                        },\n                        function (promiseObj) {\n                            if (_.has(promiseObj.value, 'inventory_updated')\n                                && promiseObj.value.inventory_updated) {\n                                scope.getproductInventoryDetails();\n                            }\n                        });\n                }\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        ;\n\n})(window, window.angular);","/*!\n*  Component  : RolePermission\n*  File       : RolePermissionDataServices.js  \n*  Engine     : RolePermissionServices \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.RolePermissionDataServices', [])\n        .service('RolePermissionDataService', [\n            '$q',\n            '__DataStore',\n            'appServices',\n            RolePermissionDataService\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function RolePermissionDataService($q, __DataStore, appServices) {\n\n        /*\n        Get Permissions\n        -----------------------------------------------------------------*/\n        this.getPermissions = function (roleId) {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.user.role_permission.read',\n                'roleId': roleId\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n\n                });\n\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Add Role Support Data\n        -----------------------------------------------------------------*/\n        this.getAddSupportData = function () {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch('manage.user.role_permission.read.add_support_data')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n\n                    });\n\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get add support Data \n        -----------------------------------------------------------------*/\n        this.getAllPermissionsById = function (roleId) {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.user.role_permission.read.using_id',\n                'roleId': roleId\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n\n                });\n\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n    };\n\n})(window, window.angular);\n","/*!\n*  Component  : RolePermission\n*  File       : RolePermission.js  \n*  Engine     : RolePermission \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.RolePermissionEngine', [])\n\n        /**\n          * Role Permission Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('RolePermissionController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            function ($scope, __DataStore, __Form, $stateParams) {\n\n                var scope = this;\n\n            }\n        ])\n\n\n        /**\n        * Role Permission List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object RolePermissionDataService\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('RolePermissionListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'RolePermissionDataService',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, RolePermissionDataService) {\n                var dtColumnsData = [\n                    {\n                        \"name\": \"title\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": null,\n                        \"template\": \"#rolePermissionActionColumnTemplate\"\n                    }\n                ],\n                    scope = this;\n\n                /**\n                * Get general user test as a datatable source object  \n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.rolePermissionDataTable = __DataStore.dataTable('#lwrolePermissionList', {\n                    url: 'manage.user.role_permission.read.list',\n                    dtOptions: {\n                        \"searching\": true,\n                        \"pageLength\": 25\n                    },\n                    columnsData: dtColumnsData,\n                    scope: $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function () {\n                    __DataStore.reloadDT(scope.rolePermissionDataTable);\n                };\n\n                /**\n                 * rolePermission delete \n                 *\n                 * inject rolePermissionIdUid\n                 *\n                 * @return    void\n                 *---------------------------------------------------------------- */\n\n                scope.delete = function (rolePermissionIdOrUid, name) {\n\n                    var $lwRolePermissionDeleteTextMsg = $('#lwRolePermissionDeleteTextMsg');\n\n                    __globals.showConfirmation({\n                        html: __globals.getReplacedString($lwRolePermissionDeleteTextMsg,\n                            '__name__',\n                            _.unescape(name)\n                        ),\n                        confirmButtonText: $lwRolePermissionDeleteTextMsg.attr('data-delete-button-text')\n                    }, function () {\n\n                        __DataStore.post({\n                            'apiURL': 'manage.user.role_permission.write.delete',\n                            'rolePermissionIdOrUid': rolePermissionIdOrUid\n                        }).success(function (responseData) {\n\n                            var message = responseData.data.message;\n\n                            appServices.processResponse(responseData, {\n\n                                error: function (data) {\n                                    __globals.showConfirmation({\n                                        title: $lwRolePermissionDeleteTextMsg.attr('data-error-text'),\n                                        text: message,\n                                        type: 'error'\n                                    });\n                                }\n\n                            }, function (data) {\n                                __globals.showConfirmation({\n                                    title: $lwRolePermissionDeleteTextMsg.attr('data-success-text'),\n                                    text: message,\n                                    type: 'success'\n                                });\n                                scope.reloadDT();\n                            });\n\n                        });\n\n                    });\n                };\n\n                /**\n                * Show add new role dialog \n                *\n                * @return    void\n                *---------------------------------------------------------------- */\n                scope.showAddNewDialog = function () {\n\n                    appServices.showDialog({},\n                        {\n                            templateUrl: __globals.getTemplateURL(\n                                'user.role-permission.add-dialog'\n                            ),\n                            controller: 'AddRoleController as addRoleCtrl',\n                            resolve: {\n                                addSupportData: function () {\n                                    return RolePermissionDataService\n                                        .getAddSupportData();\n                                }\n                            }\n                        },\n                        function (promiseObj) {\n                            if (_.has(promiseObj.value, 'role_Added')\n                                && (promiseObj.value.role_Added === true)) {\n                                scope.reloadDT();\n                            }\n                        });\n                };\n\n                /**\n                  * Role Permission Dialog \n                  *\n                  * inject roleId\n                  *\n                  * @return    void\n                  *---------------------------------------------------------------- */\n                scope.rolePermissionDialog = function (roleId, title) {\n\n                    appServices.showDialog({\n                        'roleId': roleId,\n                        'title': _.unescape(title)\n                    },\n                        {\n                            templateUrl: __globals.getTemplateURL(\n                                'user.role-permission.dynamic-role-permissions'\n                            ),\n                            controller: 'DynamicRolePermissionController as DynamicRolePermissionCtrl',\n                            resolve: {\n                                permissionData: function () {\n                                    return RolePermissionDataService\n                                        .getPermissions(roleId);\n                                }\n                            }\n                        },\n                        function (promiseObj) {\n\n                        });\n                };\n            }\n        ])\n        // Role Permission List Controller ends here\n\n        /**\n          * Dynamic Role Permission Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('DynamicRolePermissionController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'appServices',\n            'permissionData',\n            function ($scope, __DataStore, __Form, $stateParams, appServices, permissionData) {\n                var scope = this,\n                    ngDialog = $scope.ngDialogData,\n                    roleId = ngDialog.roleId;\n\n                scope = __Form.setup(scope, 'user_role_dynamic_access', 'accessData', {\n                    secured: true,\n                    unsecuredFields: []\n                });\n\n                scope.title = ngDialog.title;\n                scope.permissions = permissionData.permissions;\n\n                scope.accessData.allow_permissions = permissionData.allow_permissions;\n                scope.accessData.deny_permissions = permissionData.deny_permissions;\n                scope.checkedPermission = {};\n\n                scope.disablePermissions = function (eachPermission, permissionID) {\n\n                    _.map(eachPermission.children, function (key) {\n                        if (_.includes(key.dependencies, permissionID)) {\n                            _.delay(function (text) {\n                                $('input[name=\"' + key.id + '\"]').attr('disabled', true);\n                            }, 500);\n                        }\n                    });\n\n                }\n\n                _.map(scope.accessData.allow_permissions, function (permission) {\n                    scope.checkedPermission[permission] = \"2\";\n                })\n                _.map(scope.accessData.deny_permissions, function (permission) {\n                    scope.checkedPermission[permission] = \"3\";\n\n                    _.map(scope.permissions, function (eachPermission) {\n\n                        var pluckedIDs = _.pluck(eachPermission.children, 'id');\n\n                        if (_.includes(pluckedIDs, permission)) {\n                            scope.disablePermissions(eachPermission, permission)\n                        }\n\n                        if (_.has(eachPermission, 'children_permission_group')) {\n\n                            _.map(eachPermission.children_permission_group, function (groupchild) {\n\n                                var pluckedIDs = _.pluck(groupchild.children, 'id');\n\n                                if (_.includes(pluckedIDs, permission)) {\n                                    scope.disablePermissions(groupchild, permission)\n                                }\n                            });\n                        }\n                    });\n                })\n\n                scope = __Form.updateModel(scope, scope.accessData);\n\n                //for updating permissions\n                scope.checkPermission = function (childId, status) {\n\n                    if (!_.isString(status)) {\n                        status = status.toString();\n                    }\n\n                    scope.checkedPermission[childId] = status;\n\n                    if (status == \"2\") {\n                        if (!_.includes(scope.accessData.allow_permissions, childId)) {\n                            scope.accessData.allow_permissions.push(childId);\n                        }\n                        if (_.includes(scope.accessData.deny_permissions, childId)) {\n                            scope.accessData.deny_permissions = _.without(scope.accessData.deny_permissions, childId);\n                        }\n                    } else if (status == \"3\") {\n\n                        if (!_.includes(scope.accessData.deny_permissions, childId)) {\n                            scope.accessData.deny_permissions.push(childId);\n                        }\n                        if (_.includes(scope.accessData.allow_permissions, childId)) {\n                            scope.accessData.allow_permissions = _.without(scope.accessData.allow_permissions, childId);\n                        }\n                    } else {\n\n                        if (_.includes(scope.accessData.deny_permissions, childId)) {\n                            scope.accessData.deny_permissions = _.without(scope.accessData.deny_permissions, childId);\n                        }\n                        if (_.includes(scope.accessData.allow_permissions, childId)) {\n                            scope.accessData.allow_permissions = _.without(scope.accessData.allow_permissions, childId);\n                        }\n                    }\n\n                    _.map(scope.permissions, function (permission) {\n\n                        var pluckedIDs = _.pluck(permission.children, 'id'),\n                            keyPermissions = [];\n                        if (_.includes(pluckedIDs, childId) && permission.children[0].id != childId) {\n                            // _.map(permission.children, function(key) {\n\n                            // \tif (permission.children[0].id != key.id && !_.isUndefined(scope.checkedPermission[key.id])) {\n                            // \t\tkeyPermissions.push(scope.checkedPermission[key.id]);\n                            // \t}\n                            //     // if (key.id == childId && permission.children[0].id != childId) {\n                            //     //     _.map(key.dependencies, function(dependency) {\n                            //     //         scope.checkedPermission[dependency] = \"2\";\n                            //     //     })\n                            //     // }\n                            // });\n\n                            // scope.checkedPermission[permission.children[0].id] = \"3\";\n\n                            // if (_.includes(keyPermissions, \"2\")) {\n                            // \tscope.checkedPermission[permission.children[0].id] = \"2\";\n                            // }\n\n                        } else if (_.includes(pluckedIDs, childId) && permission.children[0].id == childId) {\n\n                            _.map(permission.children, function (key) {\n\n                                if (key.id != permission.children[0].id) {\n                                    _.map(key.dependencies, function (dependency) {\n\n                                        if (_.includes(key.dependencies, childId) && status == \"3\") {\n\n                                            $('input[name=\"' + key.id + '\"]').attr('disabled', true);\n\n                                        } else {\n                                            $('input[name=\"' + key.id + '\"]').attr('disabled', false);\n\n                                        }\n                                    });\n                                }\n                            })\n                        }\n\n                        if (_.has(permission, 'children_permission_group')) {\n                            _.map(permission.children_permission_group, function (groupchild) {\n\n                                var pluckedGroupChildIDs = _.pluck(groupchild.children, 'id'),\n                                    keyPermissionsGroup = [];\n\n                                if (_.includes(pluckedGroupChildIDs, childId) && groupchild.children[0].id != childId) {\n                                    //                            _.map(groupchild.children, function(groupchildkey) {\n                                    //                                // if (groupchildkey.id == childId && groupchild.children[0].id != childId) {\n                                    //                                //     _.map(groupchildkey.dependencies, function(dependency) {\n                                    //                                //         scope.checkedPermission[dependency] = \"2\";\n                                    //                                //     })\n                                    //                                // }\n\n                                    //                                if (groupchild.children[0].id != groupchildkey.id && !_.isUndefined(scope.checkedPermission[groupchildkey.id])) {\n                                    //                      \t\tkeyPermissionsGroup.push(scope.checkedPermission[groupchildkey.id]);\n                                    //                      \t}\n\n                                    //                            });\n\n                                    //                            scope.checkedPermission[groupchild.children[0].id] = \"3\";\n\n                                    // if (_.includes(keyPermissionsGroup, \"2\")) {\n                                    // \tscope.checkedPermission[groupchild.children[0].id] = \"2\";\n                                    // }\n\n                                } else if (_.includes(pluckedGroupChildIDs, childId) && groupchild.children[0].id == childId) {\n\n                                    _.map(groupchild.children, function (key2) {\n\n                                        if (key2.id != groupchild.children[0].id) {\n                                            _.map(key2.dependencies, function (dependency) {\n\n                                                if (_.includes(key2.dependencies, childId) && status == \"3\") {\n\n                                                    $('input[name=\"' + key2.id + '\"]').attr('disabled', true);\n\n                                                } else {\n                                                    $('input[name=\"' + key2.id + '\"]').attr('disabled', false);\n\n                                                }\n                                            })\n                                        }\n                                    });\n                                }\n                            })\n                        }\n                    })\n                }\n\n                // scope.preparePermissionData = function() {\n                //     scope.accessData.allow_permissions = [];\n                //     scope.accessData.deny_permissions = [];\n\n                //     if (!_.isEmpty(scope.accessData.selected_permissions)) {\n                //         _.forEach(scope.accessData.selected_permissions, function(item) {\n                //             var number = item.split(\"_\").pop();\n                //             if (number == 2) {\n                //                 scope.accessData.allow_permissions.push(_.trimRight(item, '_'+number));\n                //             } else if (number == 3) {\n                //                 scope.accessData.deny_permissions.push(_.trimRight(item, '_'+number));\n                //             }\n                //         });\n                //     }                    \n                // }\n\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n                //           scope.filterPermissions = function(match) {\n\n                //         \t\tvar treeInstance = $(\"#permissionTree\").fancytree(\"getTree\"),\n                //         \t\t\tfilteredNodes,\n                //           \t\tfilteredbranches,\n                //        opts = {\n                //       \t'autoApply' : true,\n                // \t'autoExpand' : true,\n                // \t'fuzzy' : false,\n                // \t'hideExpanders' : true,\n                // \t'highlight' : true,\n                // \t'leavesOnly' : true,\n                // \t'nodata' : 'No results found.',\n                // \t'mode' : \"hide\",\n                // \t'counter': true,\n                //       };\n\n                // \t// Pass function to perform match\n                // filteredNodes = treeInstance.filterNodes(match, opts);\n                // filteredbranches = treeInstance.filterBranches(match, opts);\n                //             }\n\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n\n                scope.submit = function () {\n                    // scope.preparePermissionData();\n                    __Form.process({\n                        'apiURL': 'manage.user.role_permission.write.create',\n                        'roleId': roleId\n                    }, scope)\n                        .success(function (responseData) {\n                            appServices.processResponse(responseData, null, function () {\n                                // close dialog\n                                $scope.closeThisDialog();\n                            });\n                        });\n                };\n\n                /*\n                 * Check if value updated then enable and disable radio button according to \n                 * current radio button\n                 *\n                 * @param string name  \n                 * @param number value\n                 * @param array dependencies\n                 * @param bool inheritStatus\n                 *\n                 * return array\n                 * -------------------------------------------------------------------------- */\n                scope.valueUpdated = function (name, value, dependencies, inheritStatus) {\n\n                    _.forEach(scope.accessData.permissions, function (permission) {\n                        if (permission[0].name == name) {\n\n                            if (permission[0].allow == 2) { //Allow\n\n                                _.map(permission, function (item) {\n                                    if (!_.isEmpty(item.dependencies)) {\n                                        item.disabled = false;\n                                    }\n                                });\n\n                            } else if (permission[0].allow == 3) { // Deny\n\n                                _.map(permission, function (item) {\n                                    if (!_.isEmpty(item.dependencies)) {\n                                        item.disabled = true;\n                                        item.allow = 3;\n                                    }\n                                });\n\n                            } else if (permission[0].allow == 1) { // Inherited\n\n                                if (permission[0].currentStatus) {\n\n                                    _.map(permission, function (item) {\n                                        if (!_.isEmpty(item.dependencies)) {\n                                            item.disabled = false;\n                                            item.allow = 1;\n                                        }\n                                    });\n\n                                } else {\n\n                                    _.map(permission, function (item) {\n                                        if (!_.isEmpty(item.dependencies)) {\n                                            item.disabled = true;\n                                            item.allow = 1;\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n\n        /**\n  * Add new Role Permission Controller \n  *\n  * inject object $scope\n  * inject object __DataStore\n  * inject object __Form\n  * inject object $stateParams\n  *\n  * @return  void\n  *---------------------------------------------------------------- */\n\n        .controller('AddRoleController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'addSupportData',\n            'appServices',\n            'RolePermissionDataService',\n            function ($scope, __DataStore, __Form, $stateParams, addSupportData, appServices, RolePermissionDataService) {\n\n                var scope = this;\n\n                scope = __Form.setup(scope, 'add_role', 'roleData', {\n                    secured: true,\n                    unsecuredFields: []\n                });\n\n                scope.userRoles = addSupportData.userRoles;\n                scope.permissions = addSupportData.permissionData;\n                scope.roleData.allow_permissions = [];\n                scope.roleData.deny_permissions = [];\n                scope.checkedPermission = {};\n\n\n                /*\n                 Get Permission basis on the role id\n                -------------------------------------------------------------------------- */\n                scope.getPermissions = function (roleId) {\n\n                    RolePermissionDataService\n                        .getAllPermissionsById(roleId)\n                        .then(function (responseData) {\n\n                            scope.permissions = responseData.permissionData;\n                            scope.roleData.selected_permissions = responseData.allowedData;\n\n                            scope.roleData.allow_permissions = responseData.allow_permissions;\n                            scope.roleData.deny_permissions = responseData.deny_permissions;\n                            scope.checkedPermission = {};\n\n                            _.map(scope.roleData.allow_permissions, function (permission) {\n                                scope.checkedPermission[permission] = \"2\";\n                            })\n                            _.map(scope.roleData.deny_permissions, function (permission) {\n                                scope.checkedPermission[permission] = \"3\";\n                            })\n                        })\n                };\n\n                //for updating permissions\n                scope.checkPermission = function (childId, status) {\n\n                    if (!_.isString(status)) {\n                        status = status.toString();\n                    }\n\n                    scope.checkedPermission[childId] = status;\n\n                    if (status == \"2\") {\n\n                        if (!_.includes(scope.roleData.allow_permissions, childId)) {\n                            scope.roleData.allow_permissions.push(childId);\n                        }\n                        if (_.includes(scope.roleData.deny_permissions, childId)) {\n                            scope.roleData.deny_permissions = _.without(scope.roleData.deny_permissions, childId);\n                        }\n\n                    } else if (status == \"3\") {\n\n                        if (!_.includes(scope.roleData.deny_permissions, childId)) {\n                            scope.roleData.deny_permissions.push(childId);\n                        }\n                        if (_.includes(scope.roleData.allow_permissions, childId)) {\n                            scope.roleData.allow_permissions = _.without(scope.roleData.allow_permissions, childId);\n                        }\n                    }\n\n                    _.map(scope.permissions, function (permission) {\n\n                        var pluckedIDs = _.pluck(permission.children, 'id'),\n                            keyPermissions = [];\n                        if (_.includes(pluckedIDs, childId) && permission.children[0].id != childId) {\n\n                            // _.map(permission.children, function(key) {\n                            // \tif (permission.children[0].id != key.id && !_.isUndefined(scope.checkedPermission[key.id])) {\n                            // \t\tkeyPermissions.push(scope.checkedPermission[key.id]);\n                            // \t}\n\n                            //     // if (key.id == childId && permission.children[0].id != childId) {\n                            //     //     _.map(key.dependencies, function(dependency) {\n                            //     //         scope.checkedPermission[dependency] = \"2\";\n                            //     //     });\n                            //     // }\n                            // });\n\n                            // scope.checkedPermission[permission.children[0].id] = \"3\";\n\n                            // if (_.includes(keyPermissions, \"2\")) {\n                            // \tscope.checkedPermission[permission.children[0].id] = \"2\";\n                            // }\n\n                        } else if (_.includes(pluckedIDs, childId) && permission.children[0].id == childId) {\n\n                            _.map(permission.children, function (key) {\n\n                                if (key.id != permission.children[0].id) {\n                                    _.map(key.dependencies, function (dependency) {\n\n                                        if (_.includes(key.dependencies, childId) && status == \"3\") {\n\n                                            $('input[name=\"' + key.id + '\"]').attr('disabled', true);\n\n                                        } else {\n                                            $('input[name=\"' + key.id + '\"]').attr('disabled', false);\n\n                                        }\n                                    });\n                                }\n                            })\n                        }\n\n                        if (_.has(permission, 'children_permission_group')) {\n                            _.map(permission.children_permission_group, function (groupchild) {\n\n                                var pluckedGroupChildIDs = _.pluck(groupchild.children, 'id'),\n                                    keyPermissionsGroup = [];\n\n                                if (_.includes(pluckedGroupChildIDs, childId) && groupchild.children[0].id != childId) {\n                                    //                            _.map(groupchild.children, function(groupchildkey) {\n\n                                    //                            \tif (groupchild.children[0].id != groupchildkey.id && !_.isUndefined(scope.checkedPermission[groupchildkey.id])) {\n                                    //                      \t\tkeyPermissionsGroup.push(scope.checkedPermission[groupchildkey.id]);\n                                    //                      \t}\n\n                                    //                                // if (groupchildkey.id == childId && groupchild.children[0].id != childId) {\n                                    //                                //     _.map(groupchildkey.dependencies, function(dependency) {\n                                    //                                //         scope.checkedPermission[dependency] = \"2\";\n                                    //                                //     })\n                                    //                                // }\n                                    //                            });\n\n                                    //                            scope.checkedPermission[groupchild.children[0].id] = \"3\";\n\n                                    // if (_.includes(keyPermissionsGroup, \"2\")) {\n                                    // \tscope.checkedPermission[groupchild.children[0].id] = \"2\";\n                                    // }\n\n                                } else if (_.includes(pluckedGroupChildIDs, childId) && groupchild.children[0].id == childId) {\n\n                                    _.map(groupchild.children, function (key2) {\n\n                                        if (key2.id != groupchild.children[0].id) {\n                                            _.map(key2.dependencies, function (dependency) {\n\n                                                if (_.includes(key2.dependencies, childId) && status == \"3\") {\n\n                                                    $('input[name=\"' + key2.id + '\"]').attr('disabled', true);\n\n                                                } else {\n                                                    $('input[name=\"' + key2.id + '\"]').attr('disabled', false);\n\n                                                }\n                                            })\n                                        }\n                                    });\n                                }\n\n                            });\n                        }\n                    })\n                }\n\n                /*\n                 Prepare Permissions\n                -------------------------------------------------------------------------- */\n                // scope.preparePermissions = function() {\n                //     scope.roleData.allow_permissions = [];\n                //     scope.roleData.deny_permissions = [];\n\n                //     if (!_.isEmpty(scope.roleData.selected_permissions)) {\n                //         _.forEach(scope.roleData.selected_permissions, function(item) {\n                //             var number = item.split(\"_\").pop();\n\n                //             if (number == 2) {\n                //                 scope.roleData.allow_permissions.push(_.trimRight(item, '_'+number));\n                //             } else if (number == 3) {\n                //                 scope.roleData.deny_permissions.push(_.trimRight(item, '_'+number));\n                //             }\n                //         });\n                //     }  \n                // }\n\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n                scope.submit = function () {\n                    // scope.preparePermissions();\n                    __Form.process('manage.user.role_permission.write.role.create', scope)\n                        .success(function (responseData) {\n                            appServices.processResponse(responseData, null, function () {\n                                // close dialog\n                                $scope.closeThisDialog({ 'role_Added': true });\n                            });\n                        });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        ;\n\n})(window, window.angular);","/*!\n*  Component  : Dashboard\n*  File       : ActivityDataServices.js  \n*  Engine     : ActivityDataServices \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.ActivityDataServices', [])\n        .service('ActivityDataServices', [\n            '$q',\n            '__DataStore',\n            'appServices',\n            ActivityDataServices\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function ActivityDataServices($q, __DataStore, appServices) {\n\n    };\n\n\n})(window, window.angular);\n","/*!\n*  Component  : Activity\n*  File       : ActivityEngine.js  \n*  Engine     : ActivityEngine \n----------------------------------------------------------------------------- */\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.ActivityEngine', [])\n\n        /**\n          * Calendar Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('ActivityLogListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'appServices',\n            'ActivityDataServices',\n            function ($scope, __DataStore, __Form, $stateParams, appServices, ActivityDataServices) {\n                var dtColumnsData = [\n                    {\n                        \"name\": \"created_at\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": \"created_by_user\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": \"entity_type\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": \"ip\",\n                        \"orderable\": false,\n                    },\n                    {\n                        \"name\": 'activity'\n                    },\n                    {\n                        \"name\": 'description'\n                    }\n                ],\n                    scope = this;\n\n                //form setup\n                scope = __Form.setup(scope, 'activity_form_filters', 'activityLogsData', {\n                    secured: false,\n                    unsecuredFields: []\n                });\n\n                /**\n                * Declare separate variables do not use non-repeatedly\n                *\n                * @return  void\n                *---------------------------------------------------------- */\n                scope.getDate = function (duration, dateFrom, dateTo) {\n                    scope.startDate = dateFrom;\n                    scope.endDate = dateTo;\n                    scope.duration = duration;\n                };\n\n                /**\n                * Start Date greater than end date ,then convert start date to end date\n                *\n                * @return  void\n                *---------------------------------------------------------- */\n                scope.changeDate = function (startDate, endDate) {\n\n                    if (scope.startDate > scope.endDate) {\n\n                        scope.endDate = scope.startDate;\n                    }\n                };\n\n                /**\n                * define all Variables data\n                *\n                * @return  void\n                *---------------------------------------------------------- */\n                var dateFrom, dateTo,\n\n                    startCurrentMonth = moment().startOf('month').format('YYYY-MM-D'),\n                    endCurrentMonth = moment().endOf('month').format('YYYY-MM-D'),\n\n                    startLastMonth = moment().subtract(1, 'months').startOf('month').format('YYYY-MM-D'),\n                    endLastMonth = moment().subtract(1, 'months').endOf('month').format('YYYY-MM-D'),\n\n                    startCurrentWeek = moment().startOf('week').format('YYYY-MM-D'),\n                    endCurrentWeek = moment().endOf('week').format('YYYY-MM-D'),\n\n                    startLastWeek = moment().subtract(1, 'week').startOf('week').format('YYYY-MM-D'),\n                    endLastWeek = moment().subtract(1, 'week').endOf('week').format('YYYY-MM-D'),\n\n                    startToday = moment().startOf('day').format('YYYY-MM-D'),\n                    endToday = moment().endOf('day').format('YYYY-MM-D'),\n\n                    startYesterday = moment().subtract(1, 'day').format('YYYY-MM-D'),\n                    endYesterday = moment().subtract(1, 'day').format('YYYY-MM-D'),\n\n                    startLastYear = moment().subtract(1, 'years').startOf('years').format('YYYY-MM-D'),\n                    endLastYear = moment().subtract(1, 'years').endOf('years').format('YYYY-MM-D'),\n\n                    startCurrentYear = moment().startOf('years').format('YYYY-MM-D'),\n                    endCurrentYear = moment().endOf('years').format('YYYY-MM-D'),\n\n                    startLastThirtyDays = moment().subtract(30, 'days').format('YYYY-MM-D'),\n                    endLastThirtyDays = moment().format('YYYY-MM-D');\n\n                /**\n                * Get the all Duration value and use moment library to fetch date\n                *\n                * @return  void\n                *---------------------------------------------------------- */\n                scope.activityDataTable = function (duration, startDate, endDate) {\n\n                    switch (parseInt(duration)) {\n                        case 1:\n                            dateFrom = startCurrentMonth;\n                            dateTo = endCurrentMonth;\n                            scope.getDate(duration, dateFrom, dateTo);\n\n                            break;\n\n                        case 2:\n                            dateFrom = startLastMonth;\n                            dateTo = endLastMonth;\n                            scope.getDate(duration, dateFrom, dateTo);\n\n                            break;\n\n                        case 3:\n                            dateFrom = startCurrentWeek;\n                            dateTo = endCurrentWeek;\n                            scope.getDate(duration, dateFrom, dateTo);\n\n                            break;\n\n                        case 4:\n                            dateFrom = startLastWeek;\n                            dateTo = endLastWeek;\n                            scope.getDate(duration, dateFrom, dateTo);\n\n                            break;\n\n                        case 5:\n                            dateFrom = startToday;\n                            dateTo = endToday;\n                            scope.getDate(duration, dateFrom, dateTo);\n\n                            break;\n\n                        case 6:\n                            dateFrom = startYesterday;\n                            dateTo = endYesterday;\n                            scope.getDate(duration, dateFrom, dateTo);\n\n                            break;\n\n                        case 7:\n                            dateFrom = startLastYear;\n                            dateTo = endLastYear;\n                            scope.getDate(duration, dateFrom, dateTo);\n\n                            break;\n                        case 8:\n                            dateFrom = startCurrentYear;\n                            dateTo = endCurrentYear;\n                            scope.getDate(duration, dateFrom, dateTo);\n\n                            break;\n                        case 9:\n                            dateFrom = startLastThirtyDays;\n                            dateTo = endLastThirtyDays;\n                            scope.getDate(duration, dateFrom, dateTo);\n\n                            break;\n                        case 10:\n                            var manipulateDate = \"Add Custom date\";\n                            break;\n                    };\n\n                };\n\n                /**\n                * Request to server\n                *\n                * @return  void\n                *---------------------------------------------------------- */\n                scope.dateChange = function () {\n\n                    if (scope.activityLogDataTable) {\n                        scope.activityLogDataTable.destroy();\n                    }\n\n                    scope.activityLogDataTable = __DataStore.dataTable('#lwActivityLogList', {\n                        url: {\n                            'apiURL': 'manage.activity_log.read.list',\n                            'startDate': scope.startDate,\n                            'endDate': scope.endDate\n                        },\n                        dtOptions: {\n                            \"searching\": true,\n                            \"order\": [[0, 'desc']],\n                            \"pageLength\": 25\n                        },\n                        columnsData: dtColumnsData,\n                        scope: $scope\n                    }, null, function (responseData) {\n                        scope.durations = responseData._options.durations;\n                    });\n                };\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function () {\n                    __DataStore.reloadDT(scope.activityLogDataTable);\n                };\n\n                // when add new record \n                $scope.$on('activity_added_or_updated', function (data) {\n\n                    if (data) {\n                        // scope.reloadDT();\n                        scope.dateChange('Today', moment().format('YYYY-MM-D'), moment().format('YYYY-MM-D'));\n                    }\n\n                });\n\n                /**\n                * Fire Event for caching start date is greater than end date.\n                *\n                * @return  void\n                *---------------------------------------------------------- */\n                $scope.$watch('activityLogListCtrl.startDate', function (currentValue, oldValue) {\n\n                    var $element = angular.element('#endDate');\n\n                    // Check if currentValue exist\n                    if (_.isEmpty(currentValue)) {\n                        $element.bootstrapMaterialDatePicker('setMinDate', '');\n                    } else {\n                        $element.bootstrapMaterialDatePicker('setMinDate', currentValue);\n                    }\n\n                });\n\n\n                /**\n                * Calling activityDataTable() function to get the current value.\n                *\n                * @return  void\n                *---------------------------------------------------------- */\n                scope.activityDataTable('1', moment().format('YYYY-MM-D'), moment().format('YYYY-MM-D'));\n\n                scope.dateChange();\n            }\n        ])\n        ;\n\n})(window, window.angular);","/*!\n*  Component  : Category\n*  File       : CategoryDataServices.js  \n*  Engine     : CategoryServices \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.CategoryDataServices', [])\n        .service('CategoryDataService', [\n            '$q',\n            '__DataStore',\n            'appServices',\n            CategoryDataService\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function CategoryDataService($q, __DataStore, appServices) {\n        /*\n        Get Edit Support Data\n        -------------------------------------------------------------- */\n        this.getEditSupportData = function (categoryId) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.category.read.update_data',\n                'categoryId': categoryId\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n    };\n\n})(window, window.angular);\n","/*!\n*  Component  : Category\n*  File       : Category.js  \n*  Engine     : Category \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.CategoryEngine', [])\n\n        /**\n          * Category List Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('CategoryListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'appServices',\n            'CategoryDataService',\n            function ($scope, __DataStore, __Form, $stateParams, appServices, CategoryDataService) {\n\n                var dtColumnsData = [\n                    {\n                        \"name\": \"name\",\n                        \"orderable\": true\n                    },\n                    {\n                        \"name\": \"status\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": \"created_at\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": null,\n                        \"template\": \"#categoryActionColumnTemplate\"\n                    }\n                ],\n                    scope = this;\n\n                /**\n                * Request to server\n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.categoryDataTable = __DataStore.dataTable('#lwCategoryList', {\n                    url: 'manage.category.read.list',\n                    dtOptions: {\n                        \"searching\": true,\n                        \"order\": [[2, \"desc\"]]\n                    },\n                    columnsData: dtColumnsData,\n                    scope: $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function () {\n                    __DataStore.reloadDT(scope.categoryDataTable);\n                };\n\n                scope = __Form.setup(scope, 'category_add_form', 'categoryData');\n\n                /**\n                  * Submit form\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n                scope.submit = function () {\n\n                    __Form.process('manage.category.write.create', scope)\n                        .success(function (responseData) {\n                            appServices.processResponse(responseData, null, function (reaction) {\n                                if (reaction == 1) {\n                                    scope.categoryData.name = '';\n                                    scope.reloadDT();\n                                }\n                            });\n\n                        });\n                };\n\n                /*\n                Open Category Edit Dialog\n                ------------------------------------------------------------ */\n                scope.openEditDialog = function (categoryId) {\n                    appServices.showDialog({},\n                        {\n                            templateUrl: \"category.edit-dialog\",\n                            controller: 'CategoryEditController as CategoryEditCtrl',\n                            resolve: {\n                                CategoryUpdateData: function () {\n                                    return CategoryDataService\n                                        .getEditSupportData(categoryId);\n                                }\n                            }\n                        },\n                        function (promiseObj) {\n                            if (_.has(promiseObj.value, 'category_updated')\n                                && promiseObj.value.category_updated) {\n                                scope.reloadDT();\n                            }\n                        });\n                }\n\n                /**\n                * category delete \n                *\n                * inject issueIdUid\n                *\n                * @return    void\n                *---------------------------------------------------------------- */\n\n                scope.delete = function (categoryId, title) {\n\n                    var $categoryDeleteConfirm = $('#categoryDeleteConfirm');\n\n                    __globals.showConfirmation({\n                        html: __globals.getReplacedString($categoryDeleteConfirm,\n                            '__name__',\n                            _.unescape(title)\n                        ),\n                        confirmButtonText: $categoryDeleteConfirm.attr('data-delete-button-text')\n                    },\n                        function () {\n\n                            __DataStore.post({\n                                'apiURL': 'manage.category.write.delete',\n                                'categoryId': categoryId\n                            })\n                                .success(function (responseData) {\n\n                                    var message = responseData.data.message;\n\n                                    appServices.processResponse(responseData, {\n\n                                        error: function (data) {\n                                            __globals.showConfirmation({\n                                                title: $categoryDeleteConfirm.attr('data-error-text'),\n                                                text: message,\n                                                type: 'error'\n                                            });\n\n                                        }\n\n                                    },\n                                        function (data) {\n\n                                            __globals.showConfirmation({\n                                                title: $categoryDeleteConfirm.attr('data-success-text'),\n                                                text: message,\n                                                type: 'success'\n                                            });\n                                            scope.reloadDT();   // reload datatable\n                                        });\n                                });\n                        });\n                };\n            }\n        ])\n\n        /**\n        * Category Edit Controller\n        *\n        * inject object $scope\n        * inject object appServices\n        * inject object __Form\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('CategoryEditController', [\n            '$scope',\n            'appServices',\n            '__Form',\n            'CategoryUpdateData',\n            function ($scope, appServices, __Form, CategoryUpdateData) {\n\n                var scope = this;\n                scope = __Form.setup(scope, 'category_edit_form', 'categoryData');\n                var category = CategoryUpdateData.updateData,\n                    categoryId = category.id;\n\n                scope = __Form.updateModel(scope, category);\n\n                /**\n                * Submit form\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n                    __Form.process({\n                        'apiURL': 'manage.category.write.update',\n                        'categoryId': categoryId\n                    }, scope).success(function (responseData) {\n\n                        appServices.processResponse(responseData, null, function () {\n                            $scope.closeThisDialog({ 'category_updated': true });\n                        });\n                    });\n\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        ;\n\n})(window, window.angular);","/*!\n*  Component  : Customer\n*  File       : CustomerDataServices.js  \n*  Engine     : CustomerServices \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.CustomerDataServices', [])\n        .service('CustomerDataService', [\n            '$q',\n            '__DataStore',\n            'appServices',\n            CustomerDataService\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function CustomerDataService($q, __DataStore, appServices) {\n\n\n        /*\n        Get Add Support Data\n        -------------------------------------------------------------- */\n        this.getAddSupportData = function () {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch('manage.customer.read.support_data')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    });\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Edit Support Data\n        -------------------------------------------------------------- */\n        this.getEditSupportData = function (customerIdOrUid) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.customer.read.update.data',\n                'customerIdOrUid': customerIdOrUid\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n\n    };\n\n})(window, window.angular);","/*!\n*  Component  : Customer\n*  File       : Customer.js  \n*  Engine     : Customer \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.CustomerEngine', [])\n\n        /**\n          * Customer Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('CustomerController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            function ($scope, __DataStore, __Form, $stateParams) {\n\n                var scope = this;\n\n            }\n        ])\n\n\n        /**\n        * Customer List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object CustomerDataService\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('CustomerListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            'CustomerDataService',\n            function ($scope, __DataStore, __Form, $state, appServices, CustomerDataService) {\n                var dtColumnsData = [\n                    {\n                        \"name\": \"name\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": \"short_description\",\n                    },\n                    {\n                        \"name\": null,\n                        \"template\": \"#customerActionColumnTemplate\"\n                    }\n                ],\n                    scope = this;\n\n                /**\n                * Get general user test as a datatable source object  \n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.customerDataTable = __DataStore.dataTable('#lwcustomerList', {\n                    url: 'manage.customer.read.list',\n                    dtOptions: {\n                        \"searching\": true\n                    },\n                    columnsData: dtColumnsData,\n                    scope: $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function () {\n                    __DataStore.reloadDT(scope.customerDataTable);\n                };\n\n                /**\n                 * customer delete \n                 *\n                 * inject customerIdUid\n                 *\n                 * @return    void\n                 *---------------------------------------------------------------- */\n\n                scope.delete = function (customerIdOrUid, title) {\n\n                    var $customerDeleteConfirm = $('#customerDeleteConfirm');\n\n                    __globals.showConfirmation({\n                        html: __globals.getReplacedString($customerDeleteConfirm,\n                            '__name__',\n                            _.unescape(title)\n                        ),\n                        confirmButtonText: $customerDeleteConfirm.attr('data-delete-button-text')\n                    },\n                        function () {\n\n                            __DataStore.post({\n                                'apiURL': 'manage.customer.write.delete',\n                                'customerIdOrUid': customerIdOrUid\n                            })\n                                .success(function (responseData) {\n\n                                    var message = responseData.data.message;\n\n                                    appServices.processResponse(responseData, {\n\n                                        error: function (data) {\n                                            __globals.showConfirmation({\n                                                title: $customerDeleteConfirm.attr('data-error-text'),\n                                                text: message,\n                                                type: 'error'\n                                            });\n\n                                        }\n\n                                    },\n                                        function (data) {\n\n                                            __globals.showConfirmation({\n                                                title: $customerDeleteConfirm.attr('data-success-text'),\n                                                text: message,\n                                                type: 'success'\n                                            });\n                                            scope.reloadDT();   // reload datatable\n                                        });\n                                });\n                        });\n                };\n\n                /*\n                add dialog\n                ------------------------------------------------------------ */\n                scope.openAddDialog = function () {\n\n                    appServices.showDialog(scope, {\n                        templateUrl: __globals.getTemplateURL(\"customer.add-dialog\"),\n                        controller: 'CustomerAddController as customerAddCtrl',\n                        resolve: {\n                            customerAddData: function () {\n                                return CustomerDataService\n                                    .getAddSupportData();\n                            }\n                        }\n                    }, function (promiseObj) {\n                        if (_.has(promiseObj.value, 'customer_added_or_updated')\n                            && promiseObj.value.customer_added_or_updated) {\n                            scope.reloadDT();\n                        }\n                    });\n\n                };\n\n                /*\n                edit dialog\n                ------------------------------------------------------------ */\n                scope.openEditDialog = function (customerIdOrUid) {\n\n                    appServices.showDialog({\n                        'customerIdOrUid': customerIdOrUid\n                    }, {\n                        templateUrl: __globals.getTemplateURL(\"customer.edit-dialog\"),\n                        controller: 'CustomerEditController as customerEditCtrl',\n                        resolve: {\n                            customerEditData: function () {\n                                return CustomerDataService\n                                    .getEditSupportData(customerIdOrUid);\n                            }\n                        }\n                    }, function (promiseObj) {\n\n                        if (_.has(promiseObj.value, 'customer_added_or_updated')\n                            && promiseObj.value.customer_added_or_updated) {\n                            scope.reloadDT();\n                        }\n                    });\n                };\n            }\n        ])\n        // Customer List Controller ends here\n\n\n        /**\n        * Customer Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('CustomerAddController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'customerAddData',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, customerAddData) {\n\n                var scope = this;\n\n                scope.showLoader = true;\n                scope = __Form.setup(scope, 'customer_form', 'customerData');\n\n                scope.countries = customerAddData.countries;\n                scope.countrySelectConfig = __globals.getSelectizeOptions();\n\n                /**\n                  * Submit form\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process('manage.customer.write.create', scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null, function () {\n                                $scope.closeThisDialog({ 'customer_added_or_updated': true });\n                            });\n\n                        });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        // CustomerAddController ends here\n\n\n        /**\n        * Customer Edit Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object customerEditData\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('CustomerEditController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'customerEditData',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, customerEditData) {\n\n                var scope = this;\n                scope.showLoader = true;\n\n                scope = __Form.setup(scope, 'customer_form', 'customerData');\n\n                var requestData = customerEditData.customer;\n                scope = __Form.updateModel(scope, requestData);\n                scope.showLoader = false;\n\n                var customerIdOrUid = $scope.ngDialogData.customerIdOrUid;\n                scope.countries = customerEditData.countries;\n                scope.countrySelectConfig = __globals.getSelectizeOptions();\n\n\n                /**\n                * Submit form\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process({\n                        'apiURL': 'manage.customer.write.update',\n                        'customerIdOrUid': customerIdOrUid\n                    }, scope).success(function (responseData) {\n\n                        appServices.processResponse(responseData, null, function () {\n                            $scope.closeThisDialog({ 'customer_added_or_updated': true });\n                        });\n                    });\n\n                };\n\n                /**\n                * Close dialog\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n\n            }\n\n        ])\n        // Customer Edit Controller ends here\n\n        ;\n\n})(window, window.angular);","/*!\n*  Component  : Suppliers\n*  File       : SuppliersDataServices.js  \n*  Engine     : SuppliersServices \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.SuppliersDataServices', [])\n        .service('SuppliersDataService', [\n            '$q',\n            '__DataStore',\n            'appServices',\n            SuppliersDataService\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function SuppliersDataService($q, __DataStore, appServices) {\n\n\n        /*\n        Get Edit Support Data\n        -------------------------------------------------------------- */\n        this.getEditSupportData = function (suppliersIdOrUid) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.suppliers.read.update.data',\n                'suppliersIdOrUid': suppliersIdOrUid\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n\n    };\n\n})(window, window.angular);","/*!\n*  Component  : Suppliers\n*  File       : Suppliers.js  \n*  Engine     : Suppliers \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.SuppliersEngine', [])\n\n        /**\n          * Suppliers Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('SuppliersController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            function ($scope, __DataStore, __Form, $stateParams) {\n\n                var scope = this;\n\n            }\n        ])\n\n\n        /**\n        * Suppliers List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object SuppliersDataService\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('SuppliersListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'SuppliersDataService',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, SuppliersDataService) {\n                var dtColumnsData = [\n                    {\n                        \"name\": \"name\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": \"short_description\",\n                    },\n                    {\n                        \"name\": null,\n                        \"template\": \"#suppliersActionColumnTemplate\"\n                    }\n                ],\n                    scope = this;\n\n                /**\n                * Get general user test as a datatable source object  \n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.suppliersDataTable = __DataStore.dataTable('#lwsuppliersList', {\n                    url: 'manage.suppliers.read.list',\n                    dtOptions: {\n                        \"searching\": true\n                    },\n                    columnsData: dtColumnsData,\n                    scope: $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function () {\n                    __DataStore.reloadDT(scope.suppliersDataTable);\n                };\n\n                /**\n                 * suppliers delete \n                 *\n                 * inject suppliersIdUid\n                 *\n                 * @return    void\n                 *---------------------------------------------------------------- */\n\n                scope.delete = function (suppliersIdOrUid, title) {\n\n                    var $suppliersDeleteConfirm = $('#suppliersDeleteConfirm');\n\n                    __globals.showConfirmation({\n                        html: __globals.getReplacedString($suppliersDeleteConfirm,\n                            '__name__',\n                            _.unescape(title)\n                        ),\n                        confirmButtonText: $suppliersDeleteConfirm.attr('data-delete-button-text')\n                    },\n                        function () {\n                            __DataStore.post({\n                                'apiURL': 'manage.suppliers.write.delete',\n                                'suppliersIdOrUid': suppliersIdOrUid,\n                            })\n                                .success(function (responseData) {\n\n                                    var message = responseData.data.message;\n\n                                    appServices.processResponse(responseData, {\n                                        error: function (data) {\n                                            __globals.showConfirmation({\n                                                title: $suppliersDeleteConfirm.attr('data-error-text'),\n                                                text: message,\n                                                type: 'error'\n                                            });\n                                        }\n                                    },\n                                        function (data) {\n                                            __globals.showConfirmation({\n                                                title: $suppliersDeleteConfirm.attr('data-success-text'),\n                                                text: message,\n                                                type: 'success'\n                                            });\n                                            scope.reloadDT();   // reload datatable\n                                        });\n                                });\n                        });\n                };\n\n\n                /*\n                add dialog\n                ------------------------------------------------------------ */\n                scope.openAddDialog = function () {\n\n                    appServices.showDialog(scope, {\n                        templateUrl: __globals.getTemplateURL(\"suppliers.add-dialog\"),\n                        controller: 'SuppliersAddController as suppliersAddCtrl'\n                    }, function (promiseObj) {\n                        if (_.has(promiseObj.value, 'suppliers_added_or_updated')\n                            && promiseObj.value.suppliers_added_or_updated) {\n                            scope.reloadDT();\n                        }\n                    });\n                };\n\n                /*\n                edit dialog\n                ------------------------------------------------------------ */\n                scope.openEditDialog = function (suppliersIdOrUid) {\n\n                    appServices.showDialog({\n                        'suppliersIdOrUid': suppliersIdOrUid\n                    }, {\n                        templateUrl: __globals.getTemplateURL(\"suppliers.edit-dialog\"),\n                        controller: 'SuppliersEditController as suppliersEditCtrl',\n                        resolve: {\n                            suppliersEditData: function () {\n                                return SuppliersDataService\n                                    .getEditSupportData(suppliersIdOrUid);\n                            }\n                        }\n                    }, function (promiseObj) {\n\n                        if (_.has(promiseObj.value, 'suppliers_added_or_updated')\n                            && promiseObj.value.suppliers_added_or_updated) {\n                            scope.reloadDT();\n                        }\n                    });\n                };\n\n\n            }\n        ])\n        // Suppliers List Controller ends here\n\n\n        /**\n        * Suppliers Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('SuppliersAddController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope) {\n\n                var scope = this;\n\n                scope.showLoader = true;\n                scope = __Form.setup(scope, 'suppliers_form', 'suppliersData');\n\n\n                /**\n                  * Submit form\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process('manage.suppliers.write.create', scope)\n                        .success(function (responseData) {\n                            var requestData = responseData.data;\n                            appServices.processResponse(responseData, null, function () {\n                                $scope.closeThisDialog({\n                                    'suppliers_added_or_updated': true,\n                                    'requestData': requestData\n                                });\n                            });\n\n                        });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        // SuppliersAddController ends here\n\n\n        /**\n        * Suppliers Edit Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object suppliersEditData\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('SuppliersEditController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'suppliersEditData',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, suppliersEditData) {\n\n                var scope = this;\n                scope.showLoader = true;\n\n                scope = __Form.setup(scope, 'suppliers_form', 'suppliersData');\n\n                var requestData = suppliersEditData;\n                scope = __Form.updateModel(scope, requestData);\n                scope.showLoader = false;\n\n                var suppliersIdOrUid = $scope.ngDialogData.suppliersIdOrUid;\n\n\n                /**\n                * Submit form\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process({\n                        'apiURL': 'manage.suppliers.write.update',\n                        'suppliersIdOrUid': suppliersIdOrUid\n                    }, scope).success(function (responseData) {\n\n                        appServices.processResponse(responseData, null, function () {\n                            $scope.closeThisDialog({ 'suppliers_added_or_updated': true });\n                        });\n                    });\n\n                };\n\n                /**\n                * Close dialog\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n\n            }\n\n        ])\n        // Suppliers Edit Controller ends here\n\n        ;\n\n})(window, window.angular);","/*!\n*  Component  : Product\n*  File       : ProductDataServices.js  \n*  Engine     : ProductServices \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.ProductDataServices', [])\n        .service('ProductDataService', [\n            '$q',\n            '__DataStore',\n            'appServices',\n            ProductDataService\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function ProductDataService($q, __DataStore, appServices) {\n\n\n        /*\n        Get Add Support Data\n        -------------------------------------------------------------- */\n        this.getAddSupportData = function () {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch('manage.product.read.support_data')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    });\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Edit Support Data\n        -------------------------------------------------------------- */\n        this.getEditSupportData = function (productIdOrUid) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.product.read.update.data',\n                'productIdOrUid': productIdOrUid\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Edit Support Data\n        -------------------------------------------------------------- */\n        this.getDetails = function (productIdOrUid) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.product.read.get_details',\n                'productIdOrUid': productIdOrUid\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n    };\n\n})(window, window.angular);","/*!\n*  Component  : Product\n*  File       : Product.js  \n*  Engine     : Product \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.ProductEngine', [])\n\n        /**\n          * Product Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('ProductController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            function ($scope, __DataStore, __Form, $stateParams) {\n\n                var scope = this;\n\n            }\n        ])\n\n\n\n        /**\n        * Product List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object ProductDataService\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ProductListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'ProductDataService',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, ProductDataService) {\n\n                var dtColumnsData = [\n                    {\n                        \"name\": \"name\",\n                        \"orderable\": true,\n                        \"template\": \"#productNameColumnTemplate\"\n                    },\n                    {\n                        \"name\": \"short_description\",\n                    },\n                    {\n                        \"name\": \"category\"\n                    },\n                    {\n                        \"name\": \"status\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": null,\n                        \"template\": \"#productActionColumnTemplate\"\n                    }\n                ],\n                    scope = this;\n\n                /**\n                * Get general user test as a datatable source object  \n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.productDataTable = __DataStore.dataTable('#lwproductList', {\n                    url: 'manage.product.read.list',\n                    dtOptions: {\n                        \"searching\": true\n                    },\n                    columnsData: dtColumnsData,\n                    scope: $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function () {\n                    __DataStore.reloadDT(scope.productDataTable);\n                };\n\n                // when add new record \n                $scope.$on('product_added_or_updated', function (data) {\n\n                    if (data) {\n                        scope.reloadDT();\n                    }\n\n                });\n\n                /*\n                details dialog\n                ------------------------------------------------------------ */\n                scope.openDetailsDialog = function (productUid) {\n\n                    appServices.showDialog(scope, {\n                        templateUrl: __globals.getTemplateURL(\"product.details-dialog\"),\n                        controller: 'ProductDetailsCotroller as ProductDetailsCtrl',\n                        resolve: {\n                            GetDetails: [\"ProductDataService\", function (ProductDataService) {\n                                return ProductDataService.getDetails(productUid);\n                            }]\n                        }\n                    }, function (promiseObj) {\n\n\n                    });\n\n                };\n\n                /**\n                 * product delete \n                 *\n                 * inject productIdUid\n                 *\n                 * @return    void\n                 *---------------------------------------------------------------- */\n\n                scope.delete = function (productIdOrUid, title) {\n\n                    var $productDeleteConfirm = $('#productDeleteConfirm');\n\n                    __globals.showConfirmation({\n                        html: __globals.getReplacedString($productDeleteConfirm,\n                            '__name__',\n                            _.unescape(title)\n                        ),\n                        confirmButtonText: $productDeleteConfirm.attr('data-delete-button-text')\n                    },\n                        function () {\n\n                            __DataStore.post({\n                                'apiURL': 'manage.product.write.delete',\n                                'productIdOrUid': productIdOrUid,\n                            })\n                                .success(function (responseData) {\n\n                                    var message = responseData.data.message;\n\n                                    appServices.processResponse(responseData, {\n\n                                        error: function (data) {\n                                            __globals.showConfirmation({\n                                                title: $productDeleteConfirm.attr('data-error-text'),\n                                                text: message,\n                                                type: 'error'\n                                            });\n\n                                        }\n\n                                    },\n                                        function (data) {\n\n                                            __globals.showConfirmation({\n                                                title: $productDeleteConfirm.attr('data-success-text'),\n                                                text: message,\n                                                type: 'success'\n                                            });\n                                            scope.reloadDT();   // reload datatable\n                                        });\n                                });\n                        });\n                };\n            }\n        ])\n        // Product List Controller ends here\n\n\n        /**\n            * Product Add Controller\n            *\n            * inject object $scope\n            * inject object __DataStore\n            * inject object __Form\n            * inject object $state\n            * inject object appServices\n            * inject object $rootScope\n    \t\n            * inject object productAddData\n            * @return  void\n            *---------------------------------------------------------------- */\n        .controller('ProductAddController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'productAddData',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, productAddData) {\n\n                var scope = this;\n\n                scope = __Form.setup(scope, 'product_form', 'productData');\n                scope.categorySelectConfig = __globals.getSelectizeOptions();\n                scope.supplierSelectConfig = __globals.getSelectizeOptions();\n                scope.labelSelectConfig = __globals.getSelectizeOptions({\n                    valueField: 'id',\n                    labelField: 'name',\n                    searchField: ['name'],\n                    plugins: ['restore_on_backspace'],\n                    create: function (input) {\n                        return {\n                            id: input,\n                            name: input,\n                        };\n                    }\n                });\n\n                scope.barcodesData = [];\n\n                scope.barcodesSelectConfig = __globals.getSelectizeOptions({\n                    valueField: 'key',\n                    labelField: 'value',\n                    searchField: ['value'],\n                    maxItems: 100,\n                    plugins: ['remove_button'],\n                    delimiter: ',',\n                    persist: false,\n                    create: function (input) {\n                        if (scope.checkUniqueBarCode(input)) {\n                            this.blur();\n                            this.focus();\n                            return {\n                                key: null,\n                                value: null,\n                            };\n                        } else {\n                            return {\n                                key: input,\n                                value: input,\n                            };\n                        }\n                    }\n                });\n\n                scope.presetSelectize = __globals.getSelectizeOptions();\n\n                scope.categories = productAddData.categories;\n                scope.suppliers = productAddData.suppliers;\n                scope.currency = productAddData.currency;\n                scope.currencySymbol = productAddData.currency_symbol;\n                scope.taxPresets = productAddData.taxPresets;\n\n                scope.labelData = productAddData.labelData;\n                scope.productData.optionLabels = [];\n                scope.productData.optionLabels = [\n                    {\n                        title: '',\n                        product_id: '',\n                        price: null,\n                        barcodes: [],\n                        values: [{\n                            label_name: '',\n                            value_name: '',\n                        }]\n                    }\n                ];\n\n                var barcodeExists = false;\n\n                /**\n                * Check barcode uniqueness\n                *---------------------------------------------------------------- */\n                scope.checkUniqueBarCode = function (barcode) {\n\n                    barcodeExists = false;\n                    _.map(scope.productData.optionLabels, function (option) {\n                        if (_.includes(option.barcodes, barcode)) {\n                            barcodeExists = true;\n                        }\n                    });\n\n                    return barcodeExists;\n\n                }\n\n                /**\n                * Add More Value\n                *---------------------------------------------------------------- */\n                scope.addMoreCombination = function (labelName) {\n                    scope.labelData.push({\n                        id: labelName,\n                        name: labelName\n                    });\n\n                    scope.productData.optionLabels.push({\n                        title: '',\n                        product_id: '',\n                        price: null,\n                        barcodes: [],\n                        values: [{\n                            label_name: '',\n                            value_name: '',\n                        }]\n                    });\n                }\n\n                /**\n                * Remove Value\n                *---------------------------------------------------------------- */\n                scope.removeCombination = function (combinationKey) {\n                    _.remove(scope.productData.optionLabels, function (item, index) {\n                        return index == combinationKey;\n                    });\n                }\n\n                /**\n                * Add Value\n                *---------------------------------------------------------------- */\n                scope.addMoreValue = function (labelKey) {\n                    scope.productData.optionLabels[labelKey]['values'].push({\n                        label_name: '',\n                        value_name: '',\n                    });\n                }\n\n                /**\n                * Remove Value\n                *---------------------------------------------------------------- */\n                scope.removeValue = function (labelKey, valueKey) {\n                    _.remove(scope.productData.optionLabels[labelKey]['values'], function (item, index) {\n                        return index == valueKey;\n                    });\n                }\n\n                /**\n                  * Submit form\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n                scope.submit = function () {\n\n                    __Form.process('manage.product.write.create', scope)\n                        .success(function (responseData) {\n                            appServices.processResponse(responseData, null, function (reaction) {\n                                if (reaction == 1) {\n                                    $state.go('product');\n                                }\n                            });\n\n                        });\n                };\n\n                /**\n                * Submit form\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.addNewCategory = function (categoryName) {\n                    if (!_.isUndefined(categoryName)) {\n                        var categoryData = {\n                            'name': categoryName\n                        };\n                        __DataStore.post('manage.category.write.create_from_product', categoryData)\n                            .success(function (responseData) {\n                                appServices.processResponse(responseData, null, function (reactionCode) {\n                                    if (reactionCode == 1) {\n                                        scope.category_name = '';\n                                        scope.categories.push(responseData.data.addedCategory);\n                                    }\n                                });\n                            });\n                    }\n                };\n            }\n        ])\n        // Product Add Controller ends here\n\n        /**\n        * Product Edit Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object 'productEditData'\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ProductEditController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'productEditData',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, productEditData) {\n\n                var scope = this,\n                    productIdOrUid = $state.params.productIdOrUid;\n                scope.showLoader = true;\n\n                scope = __Form.setup(scope, 'product_form', 'productData');\n\n                var requestData = productEditData;\n\n                scope.barcodesOp = requestData.barcodesOp;\n                scope.categorySelectConfig = __globals.getSelectizeOptions();\n                scope.supplierSelectConfig = __globals.getSelectizeOptions();\n                scope.labelSelectConfig = __globals.getSelectizeOptions({\n                    valueField: 'id',\n                    labelField: 'name',\n                    searchField: ['name'],\n                    plugins: ['restore_on_backspace'],\n                    create: function (input) {\n                        return {\n                            id: input,\n                            name: input,\n                        };\n                    }\n                });\n\n                scope.barcodesSelectConfig = __globals.getSelectizeOptions({\n                    valueField: 'key',\n                    labelField: 'value',\n                    searchField: ['value'],\n                    maxItems: 100,\n                    plugins: ['remove_button'],\n                    delimiter: ',',\n                    persist: false,\n                    create: function (input) {\n                        if (scope.checkUniqueBarCode(input)) {\n                            this.blur();\n                            this.focus();\n                            return {\n                                key: null,\n                                value: null,\n                            };\n                        } else {\n                            return {\n                                key: input,\n                                value: input,\n                            };\n                        }\n                    },\n                    onDelete: function (values) {\n\n                        var $instance = this;\n                        var status = this;\n                        status = scope.checkBarcodeDelete(values, $instance)\n                            .then(function (success) {\n                                return true;\n                            })\n                            .catch(function (error) {\n                                return false;\n                            });\n\n                        return false;\n                        /*var $barcodeDeleteConfirmation = $('#barcodeDeleteConfirmation'),\n                                            code = _.get(values, 0);\n\n                        if (_.includes(requestData.barcodesArray, code)) {\n\n                            __globals.showConfirmation({\n                                html : __globals.getReplacedString($barcodeDeleteConfirmation,\n                                                        '__name__',\n                                                        code\n                                                    ),\n                                confirmButtonText : $barcodeDeleteConfirmation.attr('data-delete-button-text')\n                            },\n                            function() {\n        \n                                __DataStore.post('manage.barcode.write.delete', {\n                                    'barcode'  : code\n                                }).success(function(responseData) {\n        \n                                    appServices.processResponse(responseData, null,function(data) {\n                                        // scope.removeValue(labelIndex, valueIndex);\n                                    });   \n        \n                                }); \n\n                            });\n                        }*/\n                    }\n                });\n\n\n                scope.checkBarcodeDelete = function (values, instance) {\n\n                    return new Promise(function (resolve, reject) {\n\n                        var $barcodeDeleteConfirmation = $('#barcodeDeleteConfirmation'),\n                            code = _.get(values, 0);\n\n                        if (_.includes(requestData.barcodesArray, code)) {\n\n                            __globals.showConfirmation({\n                                html: __globals.getReplacedString($barcodeDeleteConfirmation,\n                                    '__name__',\n                                    code\n                                ),\n                                confirmButtonText: $barcodeDeleteConfirmation.attr('data-delete-button-text')\n                            },\n                                function () {\n\n                                    __DataStore.post('manage.barcode.write.delete', {\n                                        'barcode': code\n                                    }).success(function (responseData) {\n\n                                        appServices.processResponse(responseData, null, function (data) {\n                                            instance.removeOption(code);\n                                            instance.refreshOptions();\n                                            instance.clearCache();\n                                            resolve('success');\n                                        });\n\n                                    }).error(function (responseData) {\n\n                                        reject('error');\n\n                                    });\n                                });\n                        } else {\n                            instance.removeOption(code);\n                            instance.refreshOptions();\n                            instance.clearCache();\n                        }\n\n                    });\n                }\n\n\n                scope.presetSelectize = __globals.getSelectizeOptions();\n\n                scope.currency = requestData.currency;\n                scope.currencySymbol = requestData.currency_symbol;\n                scope.categories = requestData.categories;\n                scope.suppliers = requestData.suppliers;\n                scope.labelData = requestData.labelData;\n                scope.taxPresets = requestData.taxPresets;\n\n                scope = __Form.updateModel(scope, requestData.updateData);\n\n                if (_.isEmpty(scope.productData.optionLabels)) {\n                    scope.productData.optionLabels = [\n                        {\n                            title: '',\n                            product_id: '',\n                            price: null,\n                            barcodes: [],\n                            values: [{\n                                label_name: '',\n                                value_name: '',\n                            }]\n                        }\n                    ];\n                }\n\n                var barcodeExists = false;\n\n                /**\n                * Check barcode uniqueness\n                *---------------------------------------------------------------- */\n                scope.checkUniqueBarCode = function (barcode) {\n\n                    barcodeExists = false;\n                    _.map(scope.productData.optionLabels, function (option) {\n                        if (_.includes(option.barcodes, barcode)) {\n                            barcodeExists = true;\n                        }\n                    });\n\n                    return barcodeExists;\n\n                }\n\n                /**\n                * Add More Value\n                *---------------------------------------------------------------- */\n                scope.addMoreCombination = function (labelName) {\n                    scope.labelData.push({\n                        id: labelName,\n                        name: labelName\n                    });\n\n                    scope.productData.optionLabels.push({\n                        title: '',\n                        product_id: '',\n                        price: null,\n                        barcodes: [],\n                        values: [{\n                            label_name: '',\n                            value_name: '',\n                        }]\n                    });\n                }\n\n                /**\n                * Remove Value\n                *---------------------------------------------------------------- */\n                scope.removeCombination = function (combinationKey) {\n                    _.remove(scope.productData.optionLabels, function (item, index) {\n                        return index == combinationKey;\n                    });\n                }\n\n                /**\n                * Add Value\n                *---------------------------------------------------------------- */\n                scope.addMoreValue = function (labelKey) {\n                    scope.productData.optionLabels[labelKey]['values'].push({\n                        label_name: '',\n                        value_name: '',\n                    });\n                }\n\n                /**\n                * Remove Value\n                *---------------------------------------------------------------- */\n                scope.removeValue = function (labelKey, valueKey) {\n                    _.remove(scope.productData.optionLabels[labelKey]['values'], function (item, index) {\n                        return index == valueKey;\n                    });\n                }\n\n                /**\n                * Delete Value\n                *---------------------------------------------------------------- */\n                scope.deleteValue = function (valueId, labelIndex, valueIndex, comboId) {\n                    __DataStore.post({\n                        'apiURL': 'manage.product.value.write.delete',\n                        'productId': productIdOrUid,\n                        'comboId': comboId,\n                        'valueId': valueId\n                    })\n                        .success(function (responseData) {\n                            appServices.processResponse(responseData, null, function (data) {\n                                scope.removeValue(labelIndex, valueIndex);\n                            });\n                        });\n                }\n\n                /**\n                * Delete combination\n                *---------------------------------------------------------------- */\n                scope.deleteCombination = function (combinationId, labelIndex) {\n                    __DataStore.post({\n                        'apiURL': 'manage.product.combination.write.delete',\n                        'productId': productIdOrUid,\n                        'combinationId': combinationId\n                    })\n                        .success(function (responseData) {\n                            appServices.processResponse(responseData, null, function (data) {\n                                scope.removeCombination(labelIndex);\n                            });\n                        });\n                }\n\n                /**\n                * Submit form\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process({\n                        'apiURL': 'manage.product.write.update',\n                        'productIdOrUid': productIdOrUid\n                    }, scope).success(function (responseData) {\n                        appServices.processResponse(responseData, null, function (reaction) {\n                            if (reaction == 1) {\n                                $state.go('product');\n                            }\n                            // scope.getProductDetails();\n                        });\n                    });\n                };\n            }\n        ])\n        // Product Edit Controller ends here \n\n\n        /**\n        * Product Edit Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object 'productEditData'\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ProductDetailsCotroller', [\n            '$scope',\n            'GetDetails',\n            function ($scope, GetDetails) {\n\n                var scope = this;\n                scope.details = GetDetails.details;\n\n                /**\n                * Close dialog\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n\n            }])\n        // Product Details Controller ends here \n        ;\n\n})(window, window.angular);","/*!\n*  Component  : Location\n*  File       : LocationDataServices.js  \n*  Engine     : LocationServices \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.LocationDataServices', [])\n        .service('LocationDataService', [\n            '$q',\n            '__DataStore',\n            'appServices',\n            LocationDataService\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function LocationDataService($q, __DataStore, appServices) {\n\n        /*\n        Get Add Support Data\n        -------------------------------------------------------------- */\n        this.getAddSupportData = function () {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch('manage.location.read.support_data')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    });\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Edit Support Data\n        -------------------------------------------------------------- */\n        this.getEditSupportData = function (locationIdOrUid) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.location.read.update.data',\n                'locationIdOrUid': locationIdOrUid\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Assign Location DAta\n        -------------------------------------------------------------- */\n        this.getAssignLocationData = function (userAuthorityId) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.location.read.assign_location',\n                'userAuthorityId': userAuthorityId\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Assign Location DAta\n        -------------------------------------------------------------- */\n        this.getAssignUserData = function (locationId) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.location.read.assign_user',\n                'locationId': locationId\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n    };\n\n})(window, window.angular);","/*!\n*  Component  : Location\n*  File       : Location.js  \n*  Engine     : Location \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.LocationEngine', [])\n\n        /**\n          * Location Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('LocationController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            function ($scope, __DataStore, __Form, $stateParams) {\n\n                var scope = this;\n\n            }\n        ])\n\n\n        /**\n        * Location List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object LocationDataService\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('LocationListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'LocationDataService',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, LocationDataService) {\n                var dtColumnsData = [\n                    {\n                        \"name\": \"name\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": \"location_id\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": \"status\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": \"short_description\",\n                    },\n                    {\n                        \"name\": null,\n                        \"template\": \"#locationActionColumnTemplate\"\n                    }\n                ],\n                    scope = this;\n\n                /**\n                * Get general user test as a datatable source object  \n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.locationDataTable = __DataStore.dataTable('#lwlocationList', {\n                    url: 'manage.location.read.list',\n                    dtOptions: {\n                        \"searching\": true\n                    },\n                    columnsData: dtColumnsData,\n                    scope: $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function () {\n                    __DataStore.reloadDT(scope.locationDataTable);\n                };\n\n                /**\n                 * location delete \n                 *\n                 * inject locationIdUid\n                 *\n                 * @return    void\n                 *---------------------------------------------------------------- */\n\n                scope.delete = function (locationIdOrUid, name) {\n\n                    var $locationDeleteConfirm = $('#locationDeleteConfirm');\n\n                    __globals.showConfirmation({\n                        html: __globals.getReplacedString($locationDeleteConfirm,\n                            '__name__',\n                            _.unescape(name)\n                        ),\n                        confirmButtonText: $locationDeleteConfirm.attr('data-delete-button-text')\n                    },\n                        function () {\n\n                            __DataStore.post({\n                                'apiURL': 'manage.location.write.delete',\n                                'locationIdOrUid': locationIdOrUid,\n                            })\n                                .success(function (responseData) {\n\n                                    var message = responseData.data.message;\n\n                                    appServices.processResponse(responseData, {\n\n                                        error: function (data) {\n                                            __globals.showConfirmation({\n                                                title: $locationDeleteConfirm.attr('data-error-text'),\n                                                text: message,\n                                                type: 'error'\n                                            });\n\n                                        }\n\n                                    },\n                                        function (data) {\n\n                                            __globals.showConfirmation({\n                                                title: $locationDeleteConfirm.attr('data-success-text'),\n                                                text: message,\n                                                type: 'success'\n                                            });\n                                            scope.reloadDT();   // reload datatable\n                                        });\n                                });\n                        });\n                };\n\n                /*\n                add dialog\n                ------------------------------------------------------------ */\n                scope.openAddDialog = function () {\n\n                    appServices.showDialog(scope, {\n                        templateUrl: __globals.getTemplateURL(\"location.add-dialog\"),\n                        controller: 'LocationAddController as locationAddCtrl',\n                        resolve: {\n                            locationAddData: function () {\n                                return LocationDataService\n                                    .getAddSupportData();\n                            }\n                        }\n                    }, function (promiseObj) {\n\n                        if (_.has(promiseObj.value, 'location_added_or_updated')\n                            && promiseObj.value.location_added_or_updated) {\n                            scope.reloadDT();\n                        }\n                    });\n                };\n\n                /*\n                edit dialog\n                ------------------------------------------------------------ */\n                scope.openEditDialog = function (locationIdOrUid) {\n\n                    appServices.showDialog({\n                        'locationIdOrUid': locationIdOrUid\n                    }, {\n                        templateUrl: __globals.getTemplateURL(\"location.edit-dialog\"),\n                        controller: 'LocationEditController as locationEditCtrl',\n                        resolve: {\n                            locationEditData: function () {\n                                return LocationDataService\n                                    .getEditSupportData(locationIdOrUid);\n                            }\n                        }\n                    }, function (promiseObj) {\n\n                        if (_.has(promiseObj.value, 'location_added_or_updated')\n                            && promiseObj.value.location_added_or_updated) {\n                            scope.reloadDT();\n                        }\n                    });\n                };\n\n                /*\n                assign user dialog\n                ------------------------------------------------------------ */\n                scope.assignUser = function (locationIdOrUid, name) {\n                    appServices.showDialog({\n                        'name': _.unescape(name),\n                        'locationId': locationIdOrUid\n                    }, {\n                        templateUrl: __globals.getTemplateURL(\"location.assign-user-dialog\"),\n                        controller: 'AssignUserDialogController as AssignUserDialogCtrl',\n                        resolve: {\n                            assignUserData: function () {\n                                return LocationDataService\n                                    .getAssignUserData(locationIdOrUid);\n                            }\n                        }\n                    }, function (promiseObj) {\n\n                        if (_.has(promiseObj.value, 'location_added_or_updated')\n                            && promiseObj.value.location_added_or_updated) {\n                            scope.reloadDT();\n                        }\n                    });\n                };\n            }\n        ])\n        // Location List Controller ends here\n\n\n        /**\n        * Location Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('LocationAddController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'locationAddData',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, locationAddData) {\n\n                var scope = this;\n\n                scope.showLoader = true;\n                scope = __Form.setup(scope, 'location_form', 'locationData');\n                scope.parentLocations = locationAddData.parentLocationData;\n                scope.locationSelectConfig = __globals.getSelectizeOptions();\n\n\n                /**\n                  * Submit form\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process('manage.location.write.create', scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null, function () {\n                                $scope.closeThisDialog({ 'location_added_or_updated': true });\n                            });\n\n                        });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        // LocationAddController ends here\n\n\n        /**\n        * Location Edit Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object locationEditData\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('LocationEditController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'locationEditData',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, locationEditData) {\n\n                var scope = this;\n                scope.showLoader = true;\n\n                scope = __Form.setup(scope, 'location_form', 'locationData');\n                scope.locationSelectConfig = __globals.getSelectizeOptions();\n                var requestData = locationEditData;\n                scope = __Form.updateModel(scope, requestData.locationData);\n                scope.parentLocations = requestData.parentLocationData;\n                scope.showLoader = false;\n                var locationIdOrUid = $scope.ngDialogData.locationIdOrUid;\n\n\n                /**\n                * Submit form\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process({\n                        'apiURL': 'manage.location.write.update',\n                        'locationIdOrUid': locationIdOrUid\n                    }, scope).success(function (responseData) {\n\n                        appServices.processResponse(responseData, null, function () {\n                            $scope.closeThisDialog({ 'location_added_or_updated': true });\n                        });\n                    });\n\n                };\n\n                /**\n                * Close dialog\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n\n            }\n\n        ])\n        // Location Edit Controller ends here\n\n        /**\n          * Location Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('AssignLocationController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'assignLocationData',\n            'appServices',\n            function ($scope, __DataStore, __Form, $stateParams, assignLocationData, appServices) {\n\n                var scope = this,\n                    ngDialogData = $scope.ngDialogData;\n\n                scope.userName = ngDialogData.name\n                scope.userAuthorityId = ngDialogData.userAuthorityId;\n                scope = __Form.setup(scope, 'assign_location_form', 'assignData');\n                scope.locationData = assignLocationData.locationData;\n\n                if (!_.isEmpty(assignLocationData.locationIds)) {\n                    scope = __Form.updateModel(scope, assignLocationData.locationIds);\n                }\n\n                scope.locationSelectConfig = __globals.getSelectizeOptions({\n                    valueField: 'id',\n                    labelField: 'name',\n                    searchField: ['name'],\n                    plugins: ['remove_button'],\n                    maxItems: 1000,\n                    delimiter: ','\n                });\n\n                /**\n                * Submit form\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n                scope.submit = function () {\n                    __Form.process({\n                        'apiURL': 'manage.location.write.location_assign_process',\n                        'userAuthorityId': scope.userAuthorityId\n                    }, scope).success(function (responseData) {\n                        appServices.processResponse(responseData, null, function () {\n                            $scope.closeThisDialog();\n                        });\n                    });\n\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n\n        /**\n          * Assign User Dialog Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('AssignUserDialogController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'assignUserData',\n            'appServices',\n            function ($scope, __DataStore, __Form, $stateParams, assignUserData, appServices) {\n\n                var scope = this,\n                    ngDialogData = $scope.ngDialogData;\n                scope.userData = assignUserData.userData;\n                scope.locationId = ngDialogData.locationId;\n                scope.locationName = ngDialogData.name;\n                scope = __Form.setup(scope, 'assign_user_form', 'assignData');\n                if (!_.isEmpty(assignUserData.userAuthorityIds)) {\n                    scope = __Form.updateModel(scope, assignUserData.userAuthorityIds);\n                }\n\n                scope.userSelectConfig = __globals.getSelectizeOptions({\n                    valueField: 'id',\n                    labelField: 'name',\n                    searchField: ['name'],\n                    plugins: ['remove_button'],\n                    maxItems: 1000,\n                    delimiter: ','\n                });\n\n                /**\n                * Submit form\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n                scope.submit = function () {\n                    __Form.process({\n                        'apiURL': 'manage.location.write.user_assign_process',\n                        'locationId': scope.locationId\n                    }, scope).success(function (responseData) {\n                        appServices.processResponse(responseData, null, function () {\n                            $scope.closeThisDialog();\n                        });\n                    });\n\n                };\n\n                /**\n                * Close dialog\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        ;\n\n})(window, window.angular);","/*!\n*  Component  : Inventory\n*  File       : InventoryDataServices.js  \n*  Engine     : InventoryServices \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.InventoryDataServices', [])\n        .service('InventoryDataService', [\n            '$q',\n            '__DataStore',\n            'appServices',\n            InventoryDataService\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function InventoryDataService($q, __DataStore, appServices) {\n\n        /*\n        Get Inventory list\n        -------------------------------------------------------------- */\n        this.getInvetoryList = function (url) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch(url, { fresh: true }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Inventory Update Data\n        -------------------------------------------------------------- */\n        this.getInventoryUpdateData = function (productId, combinationId, locationId, supplierId) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.inventory.read.update_data',\n                'productId': productId,\n                'combinationId': combinationId,\n                'locationId': (!_.isUndefined(locationId)) ? locationId : null,\n                'supplierId': (!_.isUndefined(supplierId)) ? supplierId : null,\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get product combination locations wise\n        -------------------------------------------------------------- */\n        this.getCombinationsLocationwise = function (combinationId, productId) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.billing.read.combinations_locationwise',\n                'combinationId': combinationId,\n                'productId': productId\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Product Combination Data\n        -------------------------------------------------------------- */\n        this.getProductCombinationData = function (productId) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.inventory.read.product_combination',\n                'productId': productId\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Inventory Transaction Data\n        -------------------------------------------------------------- */\n        this.getInventoryTrasactionData = function (productId, combinationId, tranType, locationId) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.inventory.read.transaction_data',\n                'productId': productId,\n                'combinationId': combinationId,\n                'tranType': tranType,\n                'locationId': locationId\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n    };\n\n})(window, window.angular);\n","/*!\n*  Component  : Inventory\n*  File       : Inventory.js  \n*  Engine     : Inventory \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.InventoryEngine', [])\n\n        /**\n          * Inventory List Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('InventoryListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'appServices',\n            'InventoryDataService',\n            '__Utils',\n            function ($scope, __DataStore, __Form, $stateParams, appServices, InventoryDataService, __Utils) {\n\n                var scope = this;\n                scope.sortBy = 'desc';\n                scope.pageContentLoaded = false;\n                scope.search_term = '';\n\n                scope.supplierSelectConfig = __globals.getSelectizeOptions();\n                scope.categorySelectConfig = __globals.getSelectizeOptions();\n                scope.inventorySelectConfig = __globals.getSelectizeOptions();\n\n                /**\n                * Get Invetories\n                *---------------------------------------------------------- */\n                scope.getInventories = function (url) {\n\n                    if (_.isEmpty(url)) {\n                        var supplierId = (!_.isUndefined(scope.supplier)) ? scope.supplier : null,\n                            categoryId = (!_.isUndefined(scope.category)) ? scope.category : null,\n                            inventoryId = (!_.isUndefined(scope.inventory)) ? scope.inventory : null;\n\n                        url = __Utils.apiURL('manage.inventory.read.list');\n                        url = url + \"?supplier_id=\" + supplierId + \"&category_id=\" + categoryId + \"&inventory_id=\" + inventoryId + \"&search_term=\" + scope.search_term;\n                    }\n\n                    InventoryDataService\n                        .getInvetoryList(url)\n                        .then(function (responseData) {\n                            var requestData = responseData;\n                            scope.invetoryData = requestData.invetoryData;\n                            scope.paginationLinks = requestData.paginationLinks;\n                            scope.sortOrder = requestData.sortOrder;\n                            scope.sortOrderUrl = requestData.sortOrderUrl;\n                            scope.suppliers = requestData.suppliers;\n                            scope.categories = requestData.categories;\n                            scope.inventories = requestData.inventories;\n\n\n                            if (scope.paginationLinks) {\n                                var $paginationLinksElement = $(\".lw-pagination-container\").html(scope.paginationLinks);\n                            }\n                            scope.pageContentLoaded = true;\n                        });\n                };\n                scope.getInventories(null);\n\n                /*\n                Clear Filter\n                ------------------------------------------------------------ */\n                scope.clearFilter = function () {\n                    scope.supplier = '';\n                    scope.category = '';\n                    scope.inventory = '';\n                    scope.search_term = '';\n                    scope.getInventories(null);\n                }\n\n                /*\n                Sort By\n                ------------------------------------------------------------ */\n                scope.sortBy = function (columnName, orderBy) {\n                    var url = scope.sortOrderUrl + (_.includes(scope.sortOrderUrl, '?') ? '&' : '?') + \"sort_by=\" + columnName + \"&sort_order=\" + orderBy;\n                    scope.getInventories(url);\n                }\n\n                /*\n                Search Inventory\n                ------------------------------------------------------------ */\n                scope.searchInvetory = function (searchTerm) {\n                    var searchUrl = scope.sortOrderUrl + (_.includes(scope.sortOrderUrl, '?') ? '&' : '?') + \"search_term=\" + searchTerm;\n                    scope.getInventories(searchUrl);\n                }\n\n                $(\".lw-pagination-container\").on('click', 'a', function (event) {\n                    event.preventDefault();\n                    var $this = $(this),\n                        url = $this.attr('href');\n                    scope.getInventories(url);\n                });\n\n                scope.isArray = function (item) {\n                    return _.isObject(item);\n                }\n\n                /*\n                Update Inventory\n                ------------------------------------------------------------ */\n                scope.updateInventory = function (productId, productName, combinationId, locationId, type, supplierId) {\n                    appServices.showDialog(\n                        {\n                            productName: productName,\n                            productId: productId,\n                            type: type,\n                            combinationId: combinationId,\n                            supplierId: supplierId,\n                            showProductList: (_.isEmpty(productId)) ? true : false\n                        },\n                        {\n                            templateUrl: \"inventory.update-inventory-dialog\",\n                            controller: 'UpdateInventoryController as UpdateInventoryCtrl',\n                            resolve: {\n                                InventoryUpdateData: function () {\n                                    return InventoryDataService\n                                        .getInventoryUpdateData(productId, combinationId, locationId, supplierId);\n                                }\n                            }\n                        },\n                        function (promiseObj) {\n                            if (_.has(promiseObj.value, 'inventory_updated')\n                                && promiseObj.value.inventory_updated) {\n                                scope.getInventories(null);\n                            }\n                        });\n                }\n\n                /*\n                Show inventory transaction\n                ------------------------------------------------------------ */\n                scope.getInventoryTransaction = function (productId, productName, combinationId, tranType, locationId) {\n                    appServices.showDialog(\n                        {\n                            productName: productName,\n                            tranType: tranType\n                        },\n                        {\n                            templateUrl: \"inventory.transaction-dialog\",\n                            controller: 'InventoryTransactionController as InventoryTransactionCtrl',\n                            resolve: {\n                                InventoryTransactionData: function () {\n                                    return InventoryDataService\n                                        .getInventoryTrasactionData(productId, combinationId, tranType, locationId);\n                                }\n                            }\n                        },\n                        function (promiseObj) {\n                        });\n                }\n            }\n        ])\n\n        /**\n         * Update Inventory Controller \n         *\n         * inject object $scope\n         * inject object __DataStore\n         * inject object __Form\n         * inject object $stateParams\n         *\n         * @return  void\n         *---------------------------------------------------------------- */\n\n        .controller('UpdateInventoryController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'appServices',\n            'InventoryUpdateData',\n            'InventoryDataService',\n            function ($scope, __DataStore, __Form, $stateParams, appServices, InventoryUpdateData, InventoryDataService) {\n\n                var scope = this;\n                scope = __Form.setup(scope, 'inventry_form', 'inventoryData');\n                scope.combinationSelectConfig = __globals.getSelectizeOptions();\n                scope.locationSelectConfig = __globals.getSelectizeOptions();\n                scope.supplierSelectConfig = __globals.getSelectizeOptions();\n                scope.ngDialogData = $scope.ngDialogData;\n                scope.product_name = scope.ngDialogData.productName;\n                scope.productId = scope.ngDialogData.productId;\n                scope.inventoryData.sub_type = scope.ngDialogData.type;\n                scope.showProductList = scope.ngDialogData.showProductList;\n                scope.inventoryData.combination = scope.ngDialogData.combinationId;\n                scope.inventoryData.supplier = scope.ngDialogData.supplierId;\n\n                scope.supplierRequired = false;\n                scope.disableSupplier = false;\n                scope.productData = InventoryUpdateData;\n                scope.availableQuantity = scope.productData.availableQuantity;\n                scope.availableStockText = 'Current Stock';\n                scope.combinationExist = scope.productData.combinationExist;\n                scope.isLocationExist = scope.productData.locationExist;\n                scope.inventoryData.location = scope.productData.locationId;\n                scope.products = scope.productData.products;\n                scope.combinations = scope.productData.combinations;\n                scope.subTypes = scope.productData.subTypes;\n                scope.locations = scope.productData.locations;\n                scope.suppliers = scope.productData.suppliers;\n                scope.showInactiveMessage = scope.productData.showInactiveMessage;\n                scope.currency = scope.productData.currency;\n                scope.currencySymbol = scope.productData.currencySymbol;\n                scope.calculationSign = '';\n                scope.combinationOption = '';\n                if (!_.isUndefined(scope.inventoryData.combination)) {\n                    _.forEach(scope.combinations, function (item) {\n                        if (item.id == scope.inventoryData.combination) {\n                            scope.combinationOption = item.combinationOption;\n                        }\n                    });\n                }\n\n                /**\n                * Check if product options are updated\n                *---------------------------------------------------------------- */\n                scope.updateOption = function () {\n                    __DataStore.fetch({\n                        'apiURL': 'manage.inventory.write.calculate_options_quantity',\n                        'productId': (scope.showProductList)\n                            ? (!_.isUndefined(scope.inventoryData.product))\n                                ? scope.inventoryData.product : null\n                            : scope.productId,\n                        'combinationId': (!_.isUndefined(scope.inventoryData.combination))\n                            ? scope.inventoryData.combination : null,\n                        'locationId': (!_.isUndefined(scope.inventoryData.location))\n                            ? scope.inventoryData.location : null,\n                        'supplierId': (!_.isUndefined(scope.inventoryData.supplier))\n                            ? scope.inventoryData.supplier : null,\n                        'type': (!_.isUndefined(scope.inventoryData.sub_type))\n                            ? scope.inventoryData.sub_type : null,\n                    }).success(function (responseData) {\n                        appServices.processResponse(responseData, null, function () {\n                            var requestData = responseData.data;\n                            scope.formattedTotalAmount = requestData.formattedTotalAmount;\n                            scope.availableQuantity = requestData.availableQuantity;\n                            if (!_.isUndefined(scope.inventoryData.combination)) {\n                                _.forEach(scope.combinations, function (item) {\n                                    if (item.id == scope.inventoryData.combination) {\n                                        scope.combinationOption = item.combinationOption;\n                                    }\n                                });\n                            }\n                        });\n                    });\n                }\n\n                scope.changeCalculationSign = function (type) {\n\n                    if (type == 1) {\n                        scope.calculationSign = '+';\n                        scope.disableSupplier = false;\n                        scope.availableStockText = 'Current Stock';\n                        scope.supplierRequired = true;\n                    } else if (type == 2) {\n                        scope.calculationSign = '-';\n                        scope.inventoryData.supplier = null;\n                        scope.disableSupplier = true;\n                        scope.availableStockText = 'Current Stock';\n                        scope.supplierRequired = false;\n                    } else if (type == 3) {\n                        scope.disableSupplier = false;\n                        scope.availableStockText = 'Returnable Stock';\n                        scope.calculationSign = '-';\n                        scope.supplierRequired = true;\n                    } else if (type == 5) {\n                        scope.calculationSign = '+';\n                        scope.availableStockText = 'Current Stock';\n                        scope.disableSupplier = true;\n                        scope.inventoryData.supplier = null;\n                        scope.supplierRequired = false;\n                    } else if (type == 7) {\n                        scope.calculationSign = '-';\n                        scope.inventoryData.supplier = null;\n                        scope.disableSupplier = true;\n                        scope.availableStockText = 'Returnable Stock';\n                        scope.supplierRequired = false;\n                    } else {\n                        scope.calculationSign = '-';\n                        scope.inventoryData.supplier = null;\n                        scope.disableSupplier = true;\n                        scope.availableStockText = 'Current Stock';\n                        scope.supplierRequired = false;\n                    }\n                    scope.updateOption();\n                }\n\n                scope.isTypeExist = false;\n                if (!_.isEmpty(scope.ngDialogData.type)) {\n                    scope.isTypeExist = true;\n                    scope.changeCalculationSign(scope.ngDialogData.type);\n                }\n\n                /**\n                * Get Product Combinations\n                *---------------------------------------------------------------- */\n                scope.getProductCombinations = function (productId) {\n                    if (!_.isUndefined(productId)) {\n                        InventoryDataService\n                            .getProductCombinationData(productId)\n                            .then(function (requestData) {\n                                scope.combinations = requestData.combinations;\n                            });\n                    }\n                }\n\n                /**\n                * Submit form\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.submit = function (e) {\n\n                    if (scope.inventry_form.$valid) {\n                        var fewSeconds = 1;\n                        var btn = $(e.currentTarget);\n                        btn.prop('disabled', true);\n                        setTimeout(function () {\n                            btn.prop('disabled', false);\n                        }, fewSeconds * 1000);\n                    }\n\n                    __Form.process({\n                        'apiURL': 'manage.inventory.write.update',\n                        'productId': (scope.showProductList)\n                            ? (!_.isUndefined(scope.inventoryData.product))\n                                ? scope.inventoryData.product : null\n                            : scope.productId,\n                    }, scope).success(function (responseData) {\n\n                        appServices.processResponse(responseData, null, function () {\n                            $scope.closeThisDialog({\n                                'inventory_updated': true,\n                                'stockDetails': responseData.data.stockDetails\n                            });\n                        });\n                    });\n\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n\n        /**\n          * Inventory Transaction Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('InventoryTransactionController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'InventoryTransactionData',\n            function ($scope, __DataStore, __Form, $stateParams, InventoryTransactionData) {\n\n                var scope = this;\n                scope.ngDialogData = $scope.ngDialogData;\n                scope.isSingleOptionSelected = false;\n                scope.optionValues = scope.ngDialogData.optionValues;\n                scope.productName = scope.ngDialogData.productName;\n                scope.tranType = scope.ngDialogData.tranType;\n                scope.transactionData = InventoryTransactionData.transactionData;\n                scope.combinations = InventoryTransactionData.combinations;\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        ;\n\n})(window, window.angular);","/*!\n*  Component  : Report\n*  File       : ReportDataServices.js  \n*  Engine     : ReportServices \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.ReportDataServices', [])\n        .service('ReportDataService', [\n            '$q',\n            '__DataStore',\n            'appServices',\n            ReportDataService\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function ReportDataService($q, __DataStore, appServices) {\n\n\n        /*\n        Get Report support data\n        -------------------------------------------------------------- */\n        this.getSupportData = function () {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch('manage.report.read.support_data')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    });\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n    };\n\n})(window, window.angular);\n","/*!\n*  Component  : Report\n*  File       : Report.js  \n*  Engine     : Report \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.ReportEngine', [])\n\n\n        /**\n         * Report List Controller\n         *\n         * inject object $scope\n         * inject object __DataStore\n         * inject object __Form\n         * inject object $state\n         * inject object appServices\n         * inject object $rootScope\n         * inject object ReportDataService\n         *\n         * @return  void\n         *---------------------------------------------------------------- */\n\n        .controller('ReportListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            'GetSupportData',\n            function ($scope, __DataStore, __Form, GetSupportData) {\n                var scope = this,\n                    supportData = GetSupportData;\n                scope.durations = supportData.durations;\n                scope.stock_subtype = supportData.stock_trn_subtypes;\n                scope.locations = supportData.locations;\n\n                scope.locationsSelectConfig = __globals.getSelectizeOptions({\n                    valueField: '_id',\n                    labelField: 'title',\n                    searchField: ['title'],\n                    maxItems: 100,\n                    plugins: ['remove_button']\n                });\n\n                scope = __Form.setup(scope, 'manage_report_list', 'reportData');\n\n                scope.reportData.stock_subtype = \"1\"; // new\n                scope.duration = \"8\"; // current year\n\n                // set date\n                scope.monthFirstDay = moment().startOf('month')\n                    .format('YYYY-MM-DD');\n\n                scope.monthLastDay = moment().endOf('month')\n                    .format('YYYY-MM-DD');\n\n\n                scope.lastMonthFirstDay = moment().subtract(1, 'months')\n                    .startOf('month')\n                    .format('YYYY-MM-DD');\n\n                scope.lastMonthLastDay = moment().subtract(1, 'months')\n                    .endOf('month')\n                    .format('YYYY-MM-DD');\n\n                scope.currentWeekFirstDay = moment().startOf('week')\n                    .format('YYYY-MM-DD');\n\n                scope.currentWeekLastDay = moment().endOf('week')\n                    .format('YYYY-MM-DD');\n\n\n                scope.lastWeekFirstDay = moment().weekday(-7)\n                    .format('YYYY-MM-DD');\n\n                scope.lastWeekLastDay = moment().weekday(-1)\n                    .format('YYYY-MM-DD');\n\n                scope.today = moment().format('YYYY-MM-DD');\n\n                scope.yesterday = moment().subtract(1, 'day')\n                    .format('YYYY-MM-DD');\n\n                scope.lastYearFirstDay = moment().subtract(1, 'year').startOf('year').format('YYYY-MM-DD');\n\n                scope.lastYearLastDay = moment().subtract(1, 'year').endOf('year').format('YYYY-MM-DD');\n\n                scope.currentYearFirstDay = moment().startOf('year').format('YYYY-MM-DD');\n\n                scope.currentYearLastDay = moment().endOf('year').format('YYYY-MM-DD');\n\n                scope.last30Days = moment().subtract(30, 'day').format('YYYY-MM-DD');\n\n\n                // date and time\n                var today = moment().format('YYYY-MM-DD');\n\n                scope.reportData.start = today;\n                scope.reportData.end = today;\n\n                scope.startDateConfig = {\n                    time: false\n                };\n\n                scope.endDateConfig = {\n                    minDate: moment().format('YYYY-MM-DD'),\n                    time: false\n                };\n\n                $scope.$watch('reportListCtrl.reportData.start', function (currentValue, oldValue) {\n\n                    var $element = angular.element('#end');\n\n                    // Check if currentValue exist\n                    if (_.isEmpty(currentValue)) {\n                        $element.bootstrapMaterialDatePicker('setMinDate', '');\n                    } else {\n                        $element.bootstrapMaterialDatePicker('setMinDate', currentValue);\n                    }\n\n                });\n\n                /**\n                 * Call when start date updated\n                 *\n                 * @param startDate\n                 *\n                 * @return void\n                 *---------------------------------------------------------------- */\n\n                scope.startDateUpdated = function (startDate) {\n\n                    scope.reportData.start = startDate;\n                };\n\n                /**\n                 * Call when start date updated\n                 *\n                 * @param endDate\n                 *\n                 * @return void\n                 *---------------------------------------------------------------- */\n                scope.endDateUpdated = function (endDate) {\n\n                    if (scope.reportData.start > scope.reportData.end) {\n                        scope.reportData.end = endDate;\n                    }\n\n                    scope.reportData.end = endDate;\n                };\n\n\n                /**\n                 * get date and time according to duration \n                 *\n                 * @param duration\n                 *\n                 *---------------------------------------------------------------- */\n                scope.durationChange = function (duration) {\n\n                    if (duration == 1) { // current month\n\n                        scope.reportData.start = scope.monthFirstDay;\n                        scope.reportData.end = scope.monthLastDay;\n\n                    } else if (duration == 2) { // last month\n\n                        scope.reportData.start = scope.lastMonthFirstDay;\n                        scope.reportData.end = scope.lastMonthLastDay;\n\n                    } else if (duration == 3) { // current week\n\n                        scope.reportData.start = scope.currentWeekFirstDay;\n                        scope.reportData.end = scope.currentWeekLastDay;\n\n                    } else if (duration == 4) { // last week\n\n                        scope.reportData.start = scope.lastWeekFirstDay;\n                        scope.reportData.end = scope.lastWeekLastDay;\n\n                    } else if (duration == 5) { // today\n\n                        scope.reportData.start = scope.today;\n                        scope.reportData.end = scope.today;\n\n                    } else if (duration == 6) { // yesterday\n\n                        scope.reportData.start = scope.yesterday;\n                        scope.reportData.end = scope.yesterday;\n\n                    } else if (duration == 7) { // last year\n\n                        scope.reportData.start = scope.lastYearFirstDay;\n                        scope.reportData.end = scope.lastYearLastDay;\n\n                    } else if (duration == 8) { // current year\n\n                        scope.reportData.start = scope.currentYearFirstDay;\n                        scope.reportData.end = scope.currentYearLastDay;\n\n                    } else if (duration == 9) { // last 30 days\n\n                        scope.reportData.start = scope.last30Days;\n                        scope.reportData.end = scope.today;\n\n                    }\n                }\n\n                scope.durationChange(scope.duration);\n\n\n\n                var dtColumnsData = [{\n                    \"name\": \"product_id\",\n                    \"orderable\": true\n                },\n                {\n                    \"name\": \"title\",\n                    \"orderable\": true\n                },\n                {\n                    \"name\": \"location_name\",\n                    \"orderable\": true\n                },\n                {\n                    \"name\": \"formated_created_at\",\n                    \"orderable\": true,\n                },\n                {\n                    \"name\": \"quantity\",\n                    \"orderable\": true\n                },\n                {\n                    \"name\": \"formated_price\",\n                    \"orderable\": true\n                },\n                {\n                    \"name\": \"formated_total\",\n                },\n                {\n                    \"name\": \"formatted_tax\",\n                    'template': \"#taxAmountTemplate\"\n                },\n                {\n                    \"name\": \"formated_amount\",\n                }\n                ];\n\n                /**\n                 * Get general user test as a datatable source object  \n                 *\n                 * @return  void\n                 *---------------------------------------------------------- */\n\n                scope.getReports = function () {\n                    if (scope.reportDataTable) {\n                        scope.reportDataTable.destroy();\n                    }\n\n                    var $lwReportInput = $('#lwReportInput'),\n                        filename = __ngSupport.getText($lwReportInput.data('filename'), {\n                            '__filename__': scope.stock_subtype[scope.reportData.stock_subtype]\n                        }),\n                        topMessage = __ngSupport.getText($lwReportInput.data('top-message'), {\n                            '__start__': scope.reportData.start,\n                            '__end__': scope.reportData.end\n                        });\n                    //check if locations undefined or empty\n                    if (_.isEmpty(scope.reportData.locations) || _.isUndefined(scope.reportData.locations)) {\n                        scope.reportData.locations = null;\n                    }\n\n                    scope.reportDataTable = __DataStore.dataTable('#lwreportList', {\n                        url: {\n                            'apiURL': 'manage.report.read.list',\n                            'start': scope.reportData.start,\n                            'end': scope.reportData.end,\n                            'subtype': scope.reportData.stock_subtype,\n                            'locations': scope.reportData.locations\n                        },\n                        dtOptions: {\n                            \"searching\": true,\n                            \"lengthMenu\": [\n                                [10, 25, 50, -1],\n                                [10, 25, 50, \"All\"]\n                            ],\n                            \"pageLength\": 25,\n                            'columnDefs': [{\n                                class: 'text-right',\n                                targets: [4, 5, 6, 8]\n                            },\n                            {\n                                \"targets\": [6, 7],\n                                \"visible\": (scope.reportData.stock_subtype == 2)\n                            }\n                            ],\n                            dom: 'Bfrtip',\n                            buttons: [\n                                'pageLength',\n                                'copy',\n                                {\n                                    extend: 'excel',\n                                    footer: true,\n                                    exportOptions: {\n                                        columns: (scope.reportData.stock_subtype == 2) ? [0, 1, 2, 3, 4, 5, 6, 7, 8] : [0, 1, 2, 3, 4, 5, 8]\n                                    },\n                                    messageTop: topMessage,\n                                    title: filename,\n                                    customize: function (xlsx) {\n                                        var sheet = xlsx.xl.worksheets['sheet1.xml'];\n                                        $('row:last c', sheet).attr('s', '52');\n                                    }\n                                },\n                                {\n                                    extend: 'pdf',\n                                    footer: true,\n                                    exportOptions: {\n                                        columns: (scope.reportData.stock_subtype == 2) ? [0, 1, 2, 3, 4, 5, 6, 7, 8] : [0, 1, 2, 3, 4, 5, 8]\n                                    },\n                                    messageTop: topMessage,\n                                    title: filename,\n                                    customize: function (print) {\n                                        $(print.styles.tableBodyEven).css('text-align', 'right;'),\n                                            $(print.styles.tableBodyOdd).css('text-align', 'right;'),\n                                            console.log(print.styles);\n                                    }\n                                },\n                                {\n                                    extend: 'print',\n                                    footer: true,\n                                    exportOptions: {\n                                        columns: (scope.reportData.stock_subtype == 2) ? [0, 1, 2, 3, 4, 5, 6, 7, 8] : [0, 1, 2, 3, 4, 5, 8]\n                                    },\n                                    messageTop: topMessage,\n                                    title: filename,\n                                    autoPrint: true,\n                                    customize: function (win) {\n\n                                        $(win.document.body)\n                                            .css('font-size', '10pt')\n                                            .prepend(\n                                                '<img src=\"' + __globals.configItem(\"logo_image_url\") + '\" style=\"position:absolute; top:0; left:0;\" /><br><br><br>'\n                                            );\n\n                                        $(win.document.body).find('table')\n                                            .addClass('compact')\n                                            .css('font-size', 'inherit');\n\n                                        $(win.document.body)\n                                            .find('table.dataTable > tbody > tr > td:first-child')\n                                            .addClass('lw-remove-plus-icon');\n\n                                        $(win.document.body)\n                                            .find('table.dataTable > tbody > tr > th:first-child')\n                                            .addClass('lw-remove-plus-icon');\n\n\n                                    }\n                                }\n                            ],\n                            \"footerCallback\": function (row, data, start, end, display) {\n\n                                var api = this.api(),\n                                    data;\n\n                                var totalAmount = [],\n                                    totalPrice = [],\n                                    currencyWiseTotal = {},\n                                    currencySymbols = {};\n\n                                _.forEach(data, function (item, index) {\n                                    if (!currencyWiseTotal[item.currency_code]) {\n                                        currencyWiseTotal[item.currency_code] = [];\n                                        currencySymbols[item.currency_code] = item.currency_symbol;\n                                    }\n                                    currencyWiseTotal[item.currency_code].push(item.total_amount);\n                                    totalAmount.push(item.total_amount);\n                                    totalPrice.push(item.total_price);\n                                });\n\n                                var totalString = ' Total: <br>';\n                                _.forEach(currencyWiseTotal, function (item, index) {\n                                    totalString += ' ' + __globals.priceFormat(_.sum(item), currencySymbols[index], index) + '<br>';\n                                });\n                                // $( api.column( 5 ).footer() ).html('Total');\n                                $(api.column(8).footer()).html(\n                                    totalString\n                                );\n                            }\n                        },\n                        columnsData: dtColumnsData,\n                        scope: $scope\n                    });\n                }\n\n                scope.getReports();\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function () {\n                    __DataStore.reloadDT(scope.reportDataTable);\n                };\n\n                // when add new record \n                $scope.$on('report_added_or_updated', function (data) {\n\n                    if (data) {\n                        scope.reloadDT();\n                    }\n\n                });\n\n\n\n            }\n        ])\n        // Report List Controller ends here\n\n\n\n\n\n        ;\n\n})(window, window.angular);\n","/*!\n*  Component  : Billing\n*  File       : BillingDataServices.js  \n*  Engine     : BillingServices \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.BillingDataServices', [])\n        .service('BillingDataService', [\n            '$q',\n            '__DataStore',\n            'appServices',\n            BillingDataService\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function BillingDataService($q, __DataStore, appServices) {\n\n        /*\n        Get Report support data\n        -------------------------------------------------------------- */\n        this.getAddSupportData = function () {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch('manage.billing.read.add_support_data')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    });\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Report support data\n        -------------------------------------------------------------- */\n        this.getEditSupportData = function (billUid) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.billing.read.edit_support_data',\n                'billUid': billUid\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Report support data\n        -------------------------------------------------------------- */\n        this.getDetailsSupportData = function (billUid) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.billing.read.details_support_data',\n                'billUid': billUid\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Report support data\n        -------------------------------------------------------------- */\n        this.getProductCombinations = function (searchTerm) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.billing.read.search_combination_for_bill',\n                'searchTerm': searchTerm\n            }, { fresh: true }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n    };\n\n})(window, window.angular);\n","/*!\n*  Component  : Billing\n*  File       : Billing.js  \n*  Engine     : Billing \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.BillingEngine', [])\n\n        /**\n          * Billing Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('BillingController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            function ($scope, __DataStore, __Form, $stateParams) {\n\n                var scope = this;\n\n            }\n        ])\n\n\n        /**\n        * Billing List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object BillingDataService\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('BillingListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'BillingDataService',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, BillingDataService) {\n                var dtColumnsData = [\n                    {\n                        \"name\": \"bill_number\",\n                        \"orderable\": true,\n                        \"template\": \"#billingTitleColumnTemplate\"\n                    },\n                    {\n                        \"name\": \"txn_id\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": \"customer_name\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": \"total_amount\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": \"formatted_status\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": \"bill_date\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": null,\n                        \"template\": \"#billingActionColumnTemplate\"\n                    }\n                ],\n                    scope = this;\n\n                /**\n                * Get general user test as a datatable source object  \n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.billingDataTable = __DataStore.dataTable('#lwbillingList', {\n                    url: 'manage.billing.read.list',\n                    dtOptions: {\n                        \"searching\": true,\n                        \"columnDefs\": [\n                            { className: \"text-right\", \"targets\": [3] }\n                        ]\n                    },\n                    columnsData: dtColumnsData,\n                    scope: $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function () {\n                    __DataStore.reloadDT(scope.billingDataTable);\n                };\n\n                // when add new record \n                $scope.$on('billing_added_or_updated', function (data) {\n\n                    if (data) {\n                        scope.reloadDT();\n                    }\n\n                });\n\n                /**\n                * bill delete \n                *\n                * inject issueIdUid\n                *\n                * @return    void\n                *---------------------------------------------------------------- */\n\n                scope.delete = function (billId, title) {\n\n                    var $billDeleteConfirm = $('#billDeleteConfirm');\n\n                    __globals.showConfirmation({\n                        html: __globals.getReplacedString($billDeleteConfirm,\n                            '__billno__',\n                            _.unescape(title)\n                        ),\n                        confirmButtonText: $billDeleteConfirm.attr('data-delete-button-text')\n                    },\n                        function () {\n\n                            __DataStore.post({\n                                'apiURL': 'manage.billing.write.delete',\n                                'billId': billId\n                            })\n                                .success(function (responseData) {\n\n                                    var message = responseData.data.message;\n\n                                    appServices.processResponse(responseData, {\n\n                                        error: function (data) {\n                                            __globals.showConfirmation({\n                                                title: $billDeleteConfirm.attr('data-error-text'),\n                                                text: message,\n                                                type: 'error'\n                                            });\n\n                                        }\n\n                                    },\n                                        function (data) {\n\n                                            __globals.showConfirmation({\n                                                title: $billDeleteConfirm.attr('data-success-text'),\n                                                text: message,\n                                                type: 'success'\n                                            });\n                                            scope.reloadDT();   // reload datatable\n                                        });\n                                });\n                        });\n                };\n\n            }\n        ])\n        // Billing List Controller ends here\n\n        /**\n          * Billing Add Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('BillingAddController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'GetAddSupportData',\n            'BillingDataService',\n            '$compile',\n            '__Utils',\n            'appServices',\n            'InventoryDataService',\n            '$state',\n            function ($scope, __DataStore, __Form, $stateParams, GetAddSupportData, BillingDataService, $compile, __Utils, appServices, InventoryDataService, $state) {\n\n                var scope = this,\n                    requestData = GetAddSupportData;\n\n                scope.productData = [];\n                scope.currencyCode = requestData.currencyCode;\n                scope.currencySymbol = requestData.currencySymbol;\n                scope = __Form.setup(scope, 'billing_form', 'billingData');\n\n                scope.billingData.tax_amount = 0;\n                scope.billingData.formatted_tax_amount = __globals.priceFormat(0, scope.currencySymbol, '');\n                scope.billingData.discount_amount = 0;\n                scope.billingData.formatted_discount_amount = __globals.priceFormat(0, scope.currencySymbol, '');\n                scope.billingData.tax_type = '1';\n                scope.billingData.discount_type = '1';\n\n                scope.dateConfig = {\n                    minDate: moment().format('YYYY-MM-DD'),\n                    time: false\n                };\n                var today = moment().format('YYYY-MM-DD');\n                scope.billingData.bill_date = today;\n                scope.billingData.due_date = today;\n\n                scope.customerSelectConfig = __globals.getSelectizeOptions();\n                scope.combinationSelectConfig = __globals.getSelectizeOptions({\n                    valueField: 'id',\n                    labelField: 'name',\n                    searchField: ['name', 'comboSKU', 'barcode', 'combinationTitle', \"location_name\"],\n                    options: [],\n                    create: false,\n                    onChange: function (value) {\n                        this.clearOptions();\n                    },\n                    onFocus: function (value) {\n                        this.clearOptions();\n                    },\n                    loadThrottle: 500,\n                    render: {\n                        option: function (item, escape) {\n                            return $compile(__Utils.template('#lwSelectizeOp', {\n                                item: item\n                            }))(scope);\n                        }\n                    },\n                    load: function (searchTerm, callback, event) {\n\n                        var $this = this;\n                        var onFocusInput = ($(this)[0]['$input'][0]),\n                            inputIndex = $(onFocusInput).data('key');\n\n                        if (!searchTerm.length) return callback();\n\n                        BillingDataService\n                            .getProductCombinations(searchTerm)\n                            .then(function (responseData) {\n                                scope.productData = responseData.productData;\n\n                                _.forEach(scope.productData, function (item) {\n                                    if (item.barcode == searchTerm) {\n                                        scope.showProductDetails(item.id, inputIndex);\n                                        $this.blur();\n                                        $this.clearOptions();\n                                        $this.focus();\n                                    }\n                                });\n\n                                if (_.isEmpty(scope.productData)) {\n                                    $this.blur();\n                                    $this.clearOptions();\n                                    $this.focus();\n                                }\n\n                                callback(responseData.productData);\n                            });\n                    }\n                });\n\n                scope.userData = requestData.userData;\n                scope.customerData = requestData.customerData;\n                scope.billingData.customerDetails = null;\n                scope.subTotal = 0;\n                scope.formattedSubTotal = __globals.priceFormat(0, scope.currencySymbol, scope.currencyCode);\n                scope.billingData.totalAmount = 0;\n                scope.formattedTotalAmount = __globals.priceFormat(0, scope.currencySymbol, scope.currencyCode);\n                scope.formattedTaxTotalAmount = __globals.priceFormat(0, scope.currencySymbol, scope.currencyCode);\n                scope.formattedUnitPriceTotal = __globals.priceFormat(0, scope.currencySymbol, scope.currencyCode);\n                scope.billingData.is_add_tax = false;\n                scope.billingData.is_add_discount = false;\n\n                scope.billingData.productCombinations = [];\n                /*\n                * Remove Row\n                */\n                scope.removeItem = function (index) {\n                    _.remove(scope.billingData.productCombinations, function (item, key) {\n                        return key == index;\n                    });\n                }\n\n                /*\n                * Add New Row\n                */\n                scope.addNewRow = function () {\n                    scope.billingData.productCombinations.push({\n                        'combination': [],\n                        'taxes': [],\n                        'unit_price': 0,\n                        'formattedUnitPrice': __globals.priceFormat(0, scope.currencySymbol, ''),\n                        'quantity': 0,\n                        'price': 0,\n                        'formattedPrice': __globals.priceFormat(0, scope.currencySymbol, ''),\n                        'showDetails': false,\n                        'location_id': null,\n                        'location_name': '',\n                        'tax_details': [],\n                        'tax_presets__id': null\n                    });\n                    var comboIndex = scope.billingData.productCombinations.length - 1;\n\n                    // _.defer(function() {\n                    //     var input = _.get($('.lw-selectize-parent tr.lw-combination-row-'+comboIndex+' .selectize-input'), 0);\n                    //     $(_.get($(input), 0)).triggerHandler('click', true);\n                    // });\n                }\n\n                /*\n                * If Enter Key press on Quantity input\n                */\n                scope.isEnterKeyPress = function (event, index) {\n                    var keyCode = event.which || event.keyCode;\n                    if (keyCode === 13) { // Enter Key\n                        scope.addNewRow();\n                        var inputIndex = index + 1;\n                    }\n                }\n\n                scope.combinationExists = function (combinationId, locationId) {\n\n                    var exists = false;\n                    var combinationId = combinationId;\n\n                    if (!_.isEmpty(scope.billingData.productCombinations)) {\n                        _.forEach(scope.billingData.productCombinations, function (value, key) {\n                            if ((value.combination.id == combinationId) && (locationId == value.location_id)) {\n                                exists = true;\n                                scope.billingData.productCombinations[key]['quantity']++;\n                                scope.calculateTotalPrice();\n                            }\n                        });\n                    }\n\n                    return exists;\n                }\n\n                scope.choosedLocation = [];\n                /*\n                * Show Product Details\n                */\n                scope.showProductDetails = function (combinationId) {\n\n                    var productCombinationData = [];\n                    _.forEach(scope.productData, function (item) {\n                        if (item.id == combinationId) {\n                            productCombinationData = item;\n                        }\n                    });\n\n                    if (!_.isEmpty(productCombinationData)) {\n\n                        if (!_.isUndefined(productCombinationData.isQuantityExist) && !productCombinationData.isQuantityExist) {\n\n                            /* when quantity exists */\n                            scope.showAlertMessage(productCombinationData);\n\n                        } else if (productCombinationData.chooseInventryByLocation) {\n                            /* when product is available at different locations */\n                            scope.chooseInventryByLocation(combinationId, productCombinationData);\n                        } else {\n                            /* when product is available only at one location */\n                            scope.updateProductDetails(productCombinationData);\n                        }\n                    }\n                }\n\n                /* insert product combinations */\n                scope.updateProductDetails = function (productCombinationData, locationInfo) {\n\n                    var locationId = null;\n\n                    if (!_.isUndefined(locationInfo)) {\n\n                        locationId = locationInfo.location_id;\n\n                        if (!scope.combinationExists(productCombinationData.id, locationId)) {\n\n                            scope.addNewRow();\n                            var index = (scope.billingData.productCombinations.length - 1);\n                            scope.billingData.productCombinations[index]['showDetails'] = false;\n                            scope.billingData.productCombinations[index]['combination'] = productCombinationData;\n                            scope.billingData.productCombinations[index]['taxes'] = productCombinationData.taxes;\n                            scope.billingData.productCombinations[index]['unit_price'] = productCombinationData.salePrice;\n                            scope.billingData.productCombinations[index]['tax_presets__id'] = productCombinationData.tax_presets__id;\n                            scope.billingData.productCombinations[index]['formattedUnitPrice'] = productCombinationData.formattedSalePrice;\n                            scope.billingData.productCombinations[index]['showDetails'] = true;\n                            scope.billingData.productCombinations[index]['quantity'] = 1;\n                            scope.billingData.productCombinations[index]['location_name'] = productCombinationData.location_name;\n                            scope.billingData.productCombinations[index]['location_id'] = locationInfo.location_id;\n                            scope.billingData.productCombinations[index]['location_name'] = locationInfo.location;\n                            scope.billingData.productCombinations[index]['combination']['quantity'] = parseInt(locationInfo.quantity);\n                            scope.billingData.productCombinations[index]['combination']['lockQuantity'] = parseInt(locationInfo.lockQuantity);\n                            scope.billingData.productCombinations[index]['combination']['availableQty'] = parseInt(locationInfo.availableQty);\n                        }\n\n                    } else {\n\n                        locationId = productCombinationData.location_id;\n\n                        if (!scope.combinationExists(productCombinationData.id, locationId)) {\n\n                            scope.addNewRow();\n                            var index = (scope.billingData.productCombinations.length - 1);\n                            scope.billingData.productCombinations[index]['showDetails'] = false;\n                            scope.billingData.productCombinations[index]['combination'] = productCombinationData;\n                            scope.billingData.productCombinations[index]['taxes'] = productCombinationData.taxes;\n                            scope.billingData.productCombinations[index]['unit_price'] = productCombinationData.salePrice;\n                            scope.billingData.productCombinations[index]['tax_presets__id'] = productCombinationData.tax_presets__id;\n                            scope.billingData.productCombinations[index]['formattedUnitPrice'] = productCombinationData.formattedSalePrice;\n                            scope.billingData.productCombinations[index]['showDetails'] = true;\n                            scope.billingData.productCombinations[index]['quantity'] = 1;\n                            scope.billingData.productCombinations[index]['location_name'] = productCombinationData.location_name;\n                            scope.billingData.productCombinations[index]['location_id'] = productCombinationData.location_id;\n                        }\n                    }\n\n                    scope.calculateTotalPrice();\n\n                }\n\n                /*\n                * Show Alert Message\n                */\n                scope.showAlertMessage = function (combinationData, index) {\n\n                    var $billingMessagesInfo = $('#billingMessagesInfo');\n\n                    __globals.showConfirmation({\n                        text: combinationData.message,\n                        showConfirmButton: combinationData.showUpdateInventoryButton,\n                        confirmButtonText: $billingMessagesInfo.attr('data-confirm-button-text')\n                    },\n                        function () {\n                            scope.updateInventory(combinationData.productId, combinationData.name, combinationData.id, null, '1', null, index);\n                        });\n                }\n\n                /*\n                * Calcuate tax\n                */\n                scope.getCalculatedTax = function (productPrice, taxOptions, index) {\n                    var appliedTax = 0;\n                    var appliedTaxTotal = 0;\n                    var tax = [];\n                    scope.billingData.productCombinations[index].tax_details = [];\n                    if (!_.isEmpty(taxOptions)) {\n                        _.map(taxOptions, function (tax) {\n\n                            appliedTax = 0;\n                            if (tax.type == 1) {\n\n                                appliedTax = parseFloat(tax.tax_amount);\n                                appliedTaxTotal += appliedTax;\n                                scope.billingData.productCombinations[index]['formattedTax'] = scope.currencySymbol + appliedTax;\n                            } else if (tax.type == 2) {\n\n                                appliedTax = (productPrice * (parseFloat(tax.tax_amount) / 100));\n                                appliedTax = parseFloat(appliedTax.toFixed(2));\n                                scope.billingData.productCombinations[index]['formattedTax'] = parseFloat(tax.tax_amount) + \"%\";\n                                appliedTaxTotal += appliedTax;\n                            }\n\n                            tax.tax_amount_on_product = appliedTax.toFixed(2);\n                            scope.billingData.productCombinations[index].tax_details.push(tax);\n                        });\n                    }\n\n                    scope.billingData.productCombinations[index]['calculatedTax'] = appliedTaxTotal;\n                    scope.billingData.productCombinations[index]['formattedTaxAmount'] = scope.currencySymbol + appliedTaxTotal;\n                    return appliedTaxTotal;\n                }\n\n                /*\n                * Calcuate Total Price\n                */\n                scope.calculateTotalPrice = function () {\n                    var productPrices = [];\n                    var productTaxes = [];\n                    var unitPriceTotal = [];\n                    var totalproductPrice = 0;\n\n                    _.forEach(scope.billingData.productCombinations, function (item, index) {\n                        if (!_.isUndefined(item.combination.salePrice)) {\n                            var productPrice = item.combination.salePrice * item.quantity;\n                            var taxOptions = scope.billingData.productCombinations[index]['taxes'];\n                            var calcTax = 0;\n\n                            if (!_.isEmpty(taxOptions)) {\n                                calcTax = scope.getCalculatedTax(productPrice, taxOptions, index);\n                            }\n\n                            totalproductPrice = productPrice + calcTax;\n                            scope.billingData.productCombinations[index]['price'] = productPrice;\n\n                            scope.billingData.productCombinations[index]['formattedPrice'] = __globals.priceFormat(productPrice.toFixed(2), scope.currencySymbol, '');\n                            productPrices.push(productPrice);\n                            productTaxes.push(scope.billingData.productCombinations[index]['calculatedTax']);\n                            unitPriceTotal.push(productPrice);\n                        }\n                    });\n\n                    // Calculate Subtotal\n                    scope.subTotal = _.sum(productPrices);\n                    scope.formattedSubTotal = __globals.priceFormat(scope.subTotal, scope.currencySymbol, scope.currencyCode);\n                    scope.taxTotalAmount = _.sum(productTaxes);\n                    scope.formattedTaxTotalAmount = __globals.priceFormat(scope.taxTotalAmount.toFixed(2), scope.currencySymbol, '');\n                    scope.unitPriceTotal = _.sum(unitPriceTotal);\n                    scope.formattedUnitPriceTotal = __globals.priceFormat(scope.unitPriceTotal.toFixed(2), scope.currencySymbol, '');\n\n                    // Calculate Tax\n                    var taxAmount = 0;\n                    if (scope.billingData.is_add_tax) {\n                        if (scope.subTotal != 0 && !_.isUndefined(scope.billingData.tax)) {\n                            if (scope.billingData.tax_type == 1) {\n                                taxAmount = scope.subTotal * scope.billingData.tax / 100;\n                            } else if (scope.billingData.tax_type == 2) {\n                                taxAmount = scope.billingData.tax;\n                            }\n                        }\n                    }\n                    scope.billingData.tax_amount = taxAmount;\n                    scope.billingData.formatted_tax_amount = __globals.priceFormat(taxAmount, scope.currencySymbol, '');\n\n                    // Calculate Discount\n                    var discountAmount = 0;\n                    if (scope.billingData.is_add_discount) {\n                        if (scope.subTotal != 0 && !_.isUndefined(scope.billingData.discount)) {\n                            if (scope.billingData.discount_type == 1) {\n                                discountAmount = scope.subTotal * scope.billingData.discount / 100;\n                            } else if (scope.billingData.discount_type == 2) {\n                                discountAmount = scope.billingData.discount;\n                            }\n                        }\n                    }\n                    scope.billingData.discount_amount = discountAmount;\n                    scope.billingData.formatted_discount_amount = __globals.priceFormat(discountAmount, scope.currencySymbol, '');\n\n                    scope.billingData.totalAmount = ((scope.subTotal + scope.taxTotalAmount + taxAmount) - discountAmount);\n                    scope.formattedSubTotal = __globals.priceFormat(scope.subTotal, scope.currencySymbol, '');\n                    scope.formattedTotalAmount = __globals.priceFormat(scope.billingData.totalAmount.toFixed(2), scope.currencySymbol, '');\n                }\n\n                /*\n                * Select Customer\n                */\n                scope.selectCustomer = function (customerId) {\n                    if (!_.isEmpty(scope.customerData)) {\n                        _.forEach(scope.customerData, function (item) {\n                            if (item.id == customerId) {\n                                scope.billingData.customerDetails = item;\n                            }\n                        });\n                    }\n                };\n\n                //set the product inactive \n                scope.setProductInactive = function (productsIds) {\n\n                    _.map(scope.billingData.productCombinations, function (item, index) {\n                        if (_.includes(productsIds, parseInt(item.combination.productId))) {\n                            scope.billingData.productCombinations[index].combination.product_status = 2;\n                        }\n                    });\n                }\n\n                /*\n                Store Billing\n                ------------------------------------------------------------ */\n                scope.submit = function (type) {\n                    scope.billingData.type = type;\n                    __Form.process('manage.billing.write.store_bill', scope)\n                        .success(function (responseData) {\n                            if (!_.isEmpty(responseData.data.inactiveProducts)) {\n                                scope.setProductInactive(responseData.data.inactiveProducts);\n                            }\n                            appServices.processResponse(responseData, null, function (reaction) {\n                                if (reaction == 1) {\n                                    $state.go('billing');\n                                }\n                            });\n\n                        });\n                }\n\n                /*\n                Update Inventory\n                ------------------------------------------------------------ */\n                scope.updateInventory = function (productId, productName, combinationId, locationId, type, supplierId, index) {\n\n                    appServices.showDialog(\n                        {\n                            productName: productName,\n                            productId: productId,\n                            type: type,\n                            combinationId: combinationId,\n                            supplierId: supplierId,\n                            showProductList: (_.isEmpty(productId)) ? true : false\n                        },\n                        {\n                            templateUrl: \"inventory.update-inventory-dialog\",\n                            controller: 'UpdateInventoryController as UpdateInventoryCtrl',\n                            resolve: {\n                                InventoryUpdateData: function () {\n                                    return InventoryDataService\n                                        .getInventoryUpdateData(productId, combinationId, locationId, supplierId);\n                                }\n                            }\n                        },\n                        function (promiseObj) {\n                            if (_.has(promiseObj.value, 'inventory_updated')\n                                && promiseObj.value.inventory_updated) {\n                                var stockUpdateDetails = promiseObj.value.stockDetails;\n                                _.forEach(scope.productData, function (item, key) {\n                                    if (item.id == combinationId) {\n                                        scope.productData[key]['isQuantityExist'] = true;\n                                        scope.productData[key]['quantity'] = stockUpdateDetails.quantity;\n                                        scope.productData[key]['location_id'] = stockUpdateDetails.location_id;\n                                        scope.productData[key]['availableQty'] = stockUpdateDetails.quantity;\n                                        scope.productData[key]['location_name'] = stockUpdateDetails.location_name;\n                                        _.defer(function () {\n                                            scope.showProductDetails(combinationId);\n                                        });\n                                    }\n                                });\n                            }\n                        });\n                }\n\n\n\n                /*\n                choose Inventry By Location\n                ------------------------------------------------------------ */\n                scope.chooseInventryByLocation = function (combinationId, productCombinationData) {\n\n                    appServices.showDialog({\n                        'combinationId': combinationId,\n                        'productId': productCombinationData.productId\n                    },\n                        {\n                            templateUrl: \"billing.combination-location-dialog\",\n                            controller: 'CombinationLocationController as CombinationLocationCtrl',\n                            resolve: {\n                                CombinationsLocationsData: ['InventoryDataService', function (InventoryDataService) {\n                                    return InventoryDataService\n                                        .getCombinationsLocationwise(combinationId, productCombinationData.productId);\n                                }]\n                            }\n                        },\n                        function (promiseObj) {\n\n                            if (_.has(promiseObj.value, 'location_selected') && promiseObj.value.location_selected) {\n                                var locationInfo = promiseObj.value.location;\n                                scope.updateProductDetails(productCombinationData, locationInfo);\n                            }\n                        });\n\n                }\n            }\n        ])\n\n        /**\n          * Combination Location Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('CombinationLocationController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'CombinationsLocationsData',\n            function ($scope, __DataStore, __Form, $stateParams, CombinationsLocationsData) {\n\n                var scope = this;\n                scope.productData = CombinationsLocationsData.productData;\n\n                var ngDialogData = $scope.ngDialogData;\n                scope.showLocationBtn = false;\n\n                /**\n                  * change location\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.changeLocation = function (selected_location) {\n\n                    if (!_.isEmpty(scope.productData.stockByLocations)) {\n\n                        _.map(scope.productData.stockByLocations, function (stock_location) {\n                            if (stock_location.location_id == parseInt(selected_location)) {\n                                scope.selected_location = stock_location.location_id;\n                                scope.showLocationBtn = false;\n                                if (stock_location.quantity > 0) {\n                                    scope.showLocationBtn = true;\n                                }\n                            }\n                        });\n                    }\n                };\n\n                // select first option\n                scope.changeLocation(scope.productData.stockByLocations[0].location_id);\n\n\n                /**\n                  * change location\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.chooseLocation = function (selected_location) {\n\n                    if (!_.isUndefined(selected_location)) {\n                        _.map(scope.productData.stockByLocations, function (loc) {\n                            if (loc.location_id == selected_location) {\n                                $scope.closeThisDialog({\n                                    'location_selected': true,\n                                    'location': loc,\n                                    'combinationId': ngDialogData.combinationId,\n                                    'productId': ngDialogData.productId\n                                });\n                            }\n                        });\n                    }\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog({ 'location_selected': false });\n                };\n            }\n        ])\n\n        /**\n          * Billing Edit Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('BillingEditController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'GetEditSupportData',\n            'BillingDataService',\n            '$compile',\n            '__Utils',\n            'appServices',\n            'InventoryDataService',\n            '$state',\n            function ($scope, __DataStore, __Form, $stateParams, GetEditSupportData, BillingDataService, $compile, __Utils, appServices, InventoryDataService, $state) {\n\n                var scope = this,\n                    requestData = GetEditSupportData;\n\n                scope.productData = [];\n                scope.currencyCode = requestData.currencyCode;\n                scope.currencySymbol = requestData.currencySymbol;\n                scope = __Form.setup(scope, 'billing_form', 'billingData');\n\n                scope.billingData.tax_amount = 0;\n                scope.billingData.formatted_tax_amount = __globals.priceFormat(0, scope.currencySymbol, '');\n                scope.billingData.discount_amount = 0;\n                scope.billingData.formatted_discount_amount = __globals.priceFormat(0, scope.currencySymbol, '');\n                scope.billingData.tax_type = '1';\n                scope.billingData.discount_type = '1';\n                scope.dateConfig = {\n                    minDate: moment().format('YYYY-MM-DD'),\n                    time: false\n                };\n                var today = moment().format('YYYY-MM-DD');\n                scope.billingData.bill_date = today;\n                scope.billingData.due_date = today;\n\n                scope.customerSelectConfig = __globals.getSelectizeOptions();\n                scope.combinationSelectConfig = __globals.getSelectizeOptions({\n                    valueField: 'id',\n                    labelField: 'name',\n                    searchField: ['name', 'comboSKU', 'barcode', 'combinationTitle', \"location_name\"],\n                    options: [],\n                    create: false,\n                    loadThrottle: 500,\n                    onChange: function (value) {\n                        this.clearOptions();\n                    },\n                    onFocus: function (value) {\n                        this.clearOptions();\n                    },\n                    render: {\n                        option: function (item, escape) {\n\n                            return $compile(__Utils.template('#lwSelectizeOp', {\n                                item: item\n                            }))(scope);\n                        }\n                    },\n                    load: function (searchTerm, callback, event) {\n\n                        var $this = this;\n                        var onFocusInput = ($(this)[0]['$input'][0]),\n                            inputIndex = $(onFocusInput).data('key');\n\n                        if (!searchTerm.length) return callback();\n\n                        BillingDataService\n                            .getProductCombinations(searchTerm)\n                            .then(function (responseData) {\n                                scope.productData = responseData.productData;\n                                _.forEach(scope.productData, function (item) {\n                                    if (item.barcode == searchTerm) {\n                                        scope.showProductDetails(item.id, inputIndex);\n                                        $this.blur();\n                                        $this.clearOptions();\n                                        $this.focus();\n                                    }\n                                });\n\n                                if (_.isEmpty(scope.productData)) {\n                                    $this.blur();\n                                    $this.clearOptions();\n                                    $this.focus();\n                                }\n                                callback(responseData.productData);\n                            });\n                    }\n                });\n\n                scope.userData = requestData.userData;\n                scope.customerData = requestData.customerData;\n                scope.billingData.customerDetails = null;\n                scope.subTotal = 0;\n                scope.formattedSubTotal = __globals.priceFormat(0, scope.currencySymbol, scope.currencyCode);\n                scope.billingData.totalAmount = 0;\n                scope.formattedTotalAmount = __globals.priceFormat(0, scope.currencySymbol, scope.currencyCode);\n                scope.billingData.is_add_tax = false;\n                scope.billingData.is_add_discount = false;\n\n                scope = __Form.updateModel(scope, requestData.updateData);\n\n                // delete stock transactions \n                scope.deleteStockTransactions = function (transactionId) {\n\n                    var $billTransactionDelete = $('#billTransactionDelete');\n\n                    __globals.showConfirmation({\n                        html: $billTransactionDelete.attr('data-message'),\n                        confirmButtonText: $billTransactionDelete.attr('data-delete-button-text')\n                    },\n                        function () {\n\n                            __DataStore.post({\n                                'apiURL': 'manage.billing.write.delete_transaction',\n                                'billId': $state.params.billUid,\n                                'transactionId': transactionId\n\n                            })\n                                .success(function (responseData) {\n\n                                    var message = responseData.data.message;\n\n                                    appServices.processResponse(responseData, {\n\n                                        error: function (data) {\n\n                                            __globals.showConfirmation({\n                                                title: $billTransactionDelete.attr('data-error-text'),\n                                                text: message,\n                                                type: 'error'\n                                            });\n\n                                        }\n\n                                    },\n                                        function (data) {\n\n                                            __globals.showConfirmation({\n                                                title: $billTransactionDelete.attr('data-success-text'),\n                                                text: message,\n                                                type: 'success'\n                                            });\n\n                                        });\n                                });\n                        });\n                }\n\n                /*\n                * Remove Row\n                */\n                scope.removeItem = function (index, transactionId) {\n\n                    if (transactionId) {\n\n                        var $billTransactionDelete = $('#billTransactionDelete');\n\n                        __globals.showConfirmation({\n                            html: $billTransactionDelete.attr('data-message'),\n                            confirmButtonText: $billTransactionDelete.attr('data-delete-button-text')\n                        },\n                            function () {\n\n                                __DataStore.post({\n                                    'apiURL': 'manage.billing.write.delete_transaction',\n                                    'billId': $state.params.billUid,\n                                    'transactionId': transactionId\n\n                                })\n                                    .success(function (responseData) {\n\n                                        var message = responseData.data.message;\n\n                                        appServices.processResponse(responseData, {\n\n                                            error: function (data) {\n\n                                                __globals.showConfirmation({\n                                                    title: $billTransactionDelete.attr('data-error-text'),\n                                                    text: message,\n                                                    type: 'error'\n                                                });\n\n                                            }\n\n                                        },\n                                            function (data) {\n\n                                                __globals.showConfirmation({\n                                                    title: $billTransactionDelete.attr('data-success-text'),\n                                                    text: message,\n                                                    type: 'success'\n                                                });\n\n                                                _.remove(scope.billingData.productCombinations, function (item, key) {\n                                                    return key == index;\n                                                });\n\n                                            });\n                                    });\n                            });\n\n                    } else {\n                        _.remove(scope.billingData.productCombinations, function (item, key) {\n                            return key == index;\n                        });\n                    }\n\n                }\n\n                /*\n                * Add New Row\n                */\n                scope.addNewRow = function () {\n                    scope.billingData.combination = null;\n\n                    scope.billingData.productCombinations.push({\n                        'combination': [],\n                        'taxes': [],\n                        'unit_price': 0,\n                        'formattedUnitPrice': __globals.priceFormat(0, scope.currencySymbol, ''),\n                        'quantity': 0,\n                        'price': 0,\n                        'formattedPrice': __globals.priceFormat(0, scope.currencySymbol, ''),\n                        'showDetails': false,\n                        'isForUpdate': false,\n                        'tax_presets__id': null\n                    });\n                    var comboIndex = scope.billingData.productCombinations.length - 1;\n\n                    // _.defer(function() {\n                    //     var input = _.get($('.lw-selectize-parent tr.lw-combination-row-'+comboIndex+' .selectize-input'), 0);\n                    //     $(_.get($(input), 0)).triggerHandler('click', true);\n                    // });\n                }\n\n                /*\n                * If Enter Key press on Quantity input\n                */\n                scope.isEnterKeyPress = function (event, index) {\n                    var keyCode = event.which || event.keyCode;\n                    if (keyCode === 13) { // Enter Key\n                        scope.addNewRow();\n                        var inputIndex = index + 1;\n                    }\n                }\n\n                scope.combinationExists = function (combinationId, locationId) {\n                    var exists = false;\n                    var combinationId = combinationId;\n\n                    if (!_.isEmpty(scope.billingData.productCombinations)) {\n                        _.forEach(scope.billingData.productCombinations, function (value, key) {\n                            if ((value.combination.id == combinationId) && (locationId == value.location_id)) {\n                                exists = true;\n                                scope.billingData.productCombinations[key]['quantity']++;\n                                scope.calculateTotalPrice();\n                            }\n                        });\n                    }\n\n                    return exists;\n                }\n\n                /*\n                * Show Product Details\n                */\n                scope.showProductDetails = function (combinationId) {\n\n                    var productCombinationData = [];\n                    _.forEach(scope.productData, function (item) {\n                        if (item.id == combinationId) {\n                            productCombinationData = item;\n                        }\n                    });\n\n                    if (!_.isEmpty(productCombinationData)) {\n                        if (!_.isUndefined(productCombinationData.isQuantityExist) && !productCombinationData.isQuantityExist) {\n\n                            /* when quantity exists */\n                            scope.showAlertMessage(productCombinationData);\n\n                        } if (productCombinationData.chooseInventryByLocation && productCombinationData.isQuantityExist) {\n                            /* when product is available at different locations */\n                            scope.chooseInventryByLocation(combinationId, productCombinationData);\n                        } else if (productCombinationData.isQuantityExist) {\n                            /* when product is available only at one location */\n                            scope.updateProductDetails(productCombinationData);\n                        }\n                    }\n                }\n\n                /* insert product combinations */\n                scope.updateProductDetails = function (productCombinationData, locationInfo) {\n\n                    var locationId = null;\n\n                    if (!_.isUndefined(locationInfo)) {\n\n                        locationId = locationInfo.location_id;\n\n                        if (!scope.combinationExists(productCombinationData.id, locationId)) {\n\n                            scope.addNewRow();\n                            var index = (scope.billingData.productCombinations.length - 1);\n                            scope.billingData.productCombinations[index]['showDetails'] = false;\n                            scope.billingData.productCombinations[index]['combination'] = productCombinationData;\n                            scope.billingData.productCombinations[index]['taxes'] = productCombinationData.taxes;\n                            scope.billingData.productCombinations[index]['unit_price'] = productCombinationData.salePrice;\n                            scope.billingData.productCombinations[index]['tax_presets__id'] = productCombinationData.tax_presets__id;\n                            scope.billingData.productCombinations[index]['formattedUnitPrice'] = productCombinationData.formattedSalePrice;\n                            scope.billingData.productCombinations[index]['showDetails'] = true;\n                            scope.billingData.productCombinations[index]['quantity'] = 1;\n                            scope.billingData.productCombinations[index]['location_name'] = productCombinationData.location_name;\n                            scope.billingData.productCombinations[index]['location_id'] = locationInfo.location_id;\n                            scope.billingData.productCombinations[index]['location_name'] = locationInfo.location;\n                            scope.billingData.productCombinations[index]['combination']['quantity'] = parseInt(locationInfo.quantity);\n                            scope.billingData.productCombinations[index]['combination']['lockQuantity'] = parseInt(locationInfo.lockQuantity);\n                            scope.billingData.productCombinations[index]['combination']['availableQty'] = parseInt(locationInfo.availableQty);\n                        }\n\n                    } else {\n\n                        locationId = productCombinationData.location_id;\n\n                        if (!scope.combinationExists(productCombinationData.id, locationId)) {\n\n                            scope.addNewRow();\n                            var index = (scope.billingData.productCombinations.length - 1);\n                            scope.billingData.productCombinations[index]['showDetails'] = false;\n                            scope.billingData.productCombinations[index]['combination'] = productCombinationData;\n                            scope.billingData.productCombinations[index]['taxes'] = productCombinationData.taxes;\n                            scope.billingData.productCombinations[index]['unit_price'] = productCombinationData.salePrice;\n                            scope.billingData.productCombinations[index]['tax_presets__id'] = productCombinationData.tax_presets__id;\n                            scope.billingData.productCombinations[index]['formattedUnitPrice'] = productCombinationData.formattedSalePrice;\n                            scope.billingData.productCombinations[index]['showDetails'] = true;\n                            scope.billingData.productCombinations[index]['quantity'] = 1;\n                            scope.billingData.productCombinations[index]['location_name'] = productCombinationData.location_name;\n                            scope.billingData.productCombinations[index]['location_id'] = productCombinationData.location_id;\n                        }\n                    }\n\n                    scope.calculateTotalPrice();\n\n                }\n\n                /*\n                * Show Alert Message\n                */\n                scope.showAlertMessage = function (combinationData) {\n\n                    var $billingMessagesInfo = $('#billingMessagesInfo');\n\n                    __globals.showConfirmation({\n                        text: combinationData.message,\n                        showConfirmButton: combinationData.showUpdateInventoryButton,\n                        confirmButtonText: $billingMessagesInfo.attr('data-confirm-button-text')\n                    },\n                        function () {\n                            scope.updateInventory(combinationData.productId, combinationData.name, combinationData.id, null, '1', null);\n                        });\n                }\n\n                /*\n                * Calcuate tax\n                */\n                scope.getCalculatedTax = function (productPrice, taxOptions, index) {\n                    var appliedTax = 0;\n                    var appliedTaxTotal = 0;\n                    var tax = [];\n                    scope.billingData.productCombinations[index].tax_details = [];\n                    if (!_.isEmpty(taxOptions)) {\n                        _.map(taxOptions, function (tax) {\n\n                            appliedTax = 0;\n                            if (tax.type == 1) {\n\n                                appliedTax = parseFloat(tax.tax_amount);\n                                appliedTaxTotal += appliedTax;\n                                scope.billingData.productCombinations[index]['formattedTax'] = scope.currencySymbol + appliedTax;\n                            } else if (tax.type == 2) {\n\n                                appliedTax = (productPrice * (parseFloat(tax.tax_amount) / 100));\n                                appliedTax = parseFloat(appliedTax);\n                                scope.billingData.productCombinations[index]['formattedTax'] = parseFloat(tax.tax_amount).toFixed(2) + \"%\";\n                                appliedTaxTotal += appliedTax;\n                            }\n\n                            tax.tax_amount_on_product = appliedTax.toFixed(2);\n                            scope.billingData.productCombinations[index].tax_details.push(tax);\n                        });\n                    }\n\n                    scope.billingData.productCombinations[index]['calculatedTax'] = appliedTaxTotal;\n                    scope.billingData.productCombinations[index]['formattedTaxAmount'] = scope.currencySymbol + appliedTaxTotal;\n                    return appliedTaxTotal;\n                }\n\n                /*\n                * Calcuate Total Price\n                */\n                scope.calculateTotalPrice = function () {\n                    var productPrices = [];\n                    var productTaxes = [];\n                    var unitPriceTotal = [];\n                    var totalproductPrice = 0;\n                    _.forEach(scope.billingData.productCombinations, function (item, index) {\n                        if (!_.isUndefined(item.combination.salePrice)) {\n                            var productPrice = item.combination.salePrice * item.quantity;\n                            var taxOptions = scope.billingData.productCombinations[index]['taxes'];\n                            var calcTax = 0;\n                            if (!_.isEmpty(taxOptions)) {\n                                calcTax = scope.getCalculatedTax(productPrice, taxOptions, index);\n                            }\n\n                            totalproductPrice = productPrice + calcTax;\n\n                            scope.billingData.productCombinations[index]['price'] = productPrice;\n                            scope.billingData.productCombinations[index]['formattedPrice'] = __globals.priceFormat(productPrice.toFixed(2), scope.currencySymbol, '');\n                            productPrices.push(productPrice);\n                            productTaxes.push(scope.billingData.productCombinations[index]['calculatedTax']);\n                            unitPriceTotal.push(productPrice);\n                        }\n                    });\n\n                    // Calculate Subtotal\n                    scope.subTotal = _.sum(productPrices);\n                    scope.formattedSubTotal = __globals.priceFormat(scope.subTotal, scope.currencySymbol, scope.currencyCode);\n                    scope.taxTotalAmount = _.sum(productTaxes);\n                    scope.formattedTaxTotalAmount = __globals.priceFormat(scope.taxTotalAmount.toFixed(2), scope.currencySymbol, '');\n                    scope.unitPriceTotal = _.sum(unitPriceTotal);\n                    scope.formattedUnitPriceTotal = __globals.priceFormat(scope.unitPriceTotal.toFixed(2), scope.currencySymbol, '');\n\n                    // Calculate Tax\n                    var taxAmount = 0;\n                    if (scope.billingData.is_add_tax) {\n                        if (scope.subTotal != 0 && !_.isUndefined(scope.billingData.tax)) {\n                            if (scope.billingData.tax_type == 1) {\n                                taxAmount = scope.subTotal * scope.billingData.tax / 100;\n                            } else if (scope.billingData.tax_type == 2) {\n                                taxAmount = scope.billingData.tax;\n                            }\n                        }\n                    }\n                    scope.billingData.tax_amount = taxAmount;\n                    scope.billingData.formatted_tax_amount = __globals.priceFormat(taxAmount, scope.currencySymbol, '');\n\n                    // Calculate Discount\n                    var discountAmount = 0;\n                    if (scope.billingData.is_add_discount) {\n                        if (scope.subTotal != 0 && !_.isUndefined(scope.billingData.discount)) {\n                            if (scope.billingData.discount_type == 1) {\n                                discountAmount = scope.subTotal * scope.billingData.discount / 100;\n                            } else if (scope.billingData.discount_type == 2) {\n                                discountAmount = scope.billingData.discount;\n                            }\n                        }\n                    }\n\n                    scope.billingData.discount_amount = discountAmount;\n                    scope.billingData.formatted_discount_amount = __globals.priceFormat(discountAmount, scope.currencySymbol, '');\n\n                    scope.billingData.totalAmount = ((scope.subTotal + scope.taxTotalAmount + taxAmount) - discountAmount);\n                    scope.formattedSubTotal = __globals.priceFormat(scope.subTotal, scope.currencySymbol, '');\n                    scope.formattedTotalAmount = __globals.priceFormat(scope.billingData.totalAmount.toFixed(2), scope.currencySymbol, '');\n                }\n\n                scope.calculateTotalPrice();\n\n                /*\n                * Select Customer\n                */\n                scope.selectCustomer = function (customerId) {\n                    if (!_.isEmpty(scope.customerData)) {\n                        _.forEach(scope.customerData, function (item) {\n                            if (item.id == customerId) {\n                                scope.billingData.customerDetails = item;\n                            }\n                        });\n                    }\n                };\n                scope.selectCustomer(requestData.updateData.customer);\n\n                //set the product inactive \n                scope.setProductInactive = function (productsIds) {\n\n                    _.map(scope.billingData.productCombinations, function (item, index) {\n                        if (_.includes(productsIds, parseInt(item.combination.productId))) {\n                            scope.billingData.productCombinations[index].combination.product_status = 2;\n                        }\n                    });\n                }\n\n                /*\n                Store Billing\n                ------------------------------------------------------------ */\n                scope.update = function (type) {\n\n                    scope.billingData.type = type;\n\n                    __Form.process({\n                        'apiURL': 'manage.billing.write.update_bill',\n                        'billId': $stateParams.billUid\n                    }, scope)\n                        .success(function (responseData) {\n\n                            if (!_.isEmpty(responseData.data.inactiveProducts)) {\n                                scope.setProductInactive(responseData.data.inactiveProducts);\n                            }\n\n                            appServices.processResponse(responseData, null, function (reaction) {\n\n                                if (reaction == 1) {\n                                    $state.go('billing');\n                                }\n                            });\n\n                        });\n                }\n\n                /*\n                Update Inventory\n                ------------------------------------------------------------ */\n                scope.updateInventory = function (productId, productName, combinationId, locationId, type, supplierId) {\n\n                    appServices.showDialog(\n                        {\n                            productName: productName,\n                            productId: productId,\n                            type: type,\n                            combinationId: combinationId,\n                            supplierId: supplierId,\n                            showProductList: (_.isEmpty(productId)) ? true : false\n                        },\n                        {\n                            templateUrl: \"inventory.update-inventory-dialog\",\n                            controller: 'UpdateInventoryController as UpdateInventoryCtrl',\n                            resolve: {\n                                InventoryUpdateData: function () {\n                                    return InventoryDataService\n                                        .getInventoryUpdateData(productId, combinationId, locationId, supplierId);\n                                }\n                            }\n                        },\n                        function (promiseObj) {\n\n                            if (_.has(promiseObj.value, 'inventory_updated')\n                                && promiseObj.value.inventory_updated) {\n                                var stockUpdateDetails = promiseObj.value.stockDetails;\n                                _.forEach(scope.productData, function (item, key) {\n                                    if (item.id == combinationId) {\n                                        scope.productData[key]['isQuantityExist'] = true;\n                                        scope.productData[key]['quantity'] = stockUpdateDetails.quantity;\n                                        scope.productData[key]['location_id'] = stockUpdateDetails.location_id;\n                                        scope.productData[key]['availableQty'] = stockUpdateDetails.quantity;\n                                        scope.productData[key]['location_name'] = stockUpdateDetails.location_name;\n                                        _.defer(function () {\n                                            scope.showProductDetails(combinationId);\n                                        });\n                                    }\n                                });\n                            }\n                        });\n                }\n\n                /*\n                choose Inventry By Location\n                ------------------------------------------------------------ */\n                scope.chooseInventryByLocation = function (combinationId, productCombinationData) {\n\n                    appServices.showDialog({\n                        'combinationId': combinationId,\n                        'productId': productCombinationData.productId\n                    },\n                        {\n                            templateUrl: \"billing.combination-location-dialog\",\n                            controller: 'CombinationLocationController as CombinationLocationCtrl',\n                            resolve: {\n                                CombinationsLocationsData: ['InventoryDataService', function (InventoryDataService) {\n                                    return InventoryDataService\n                                        .getCombinationsLocationwise(combinationId, productCombinationData.productId);\n                                }]\n                            }\n                        },\n                        function (promiseObj) {\n\n                            if (_.has(promiseObj.value, 'location_selected') && promiseObj.value.location_selected) {\n                                var locationInfo = promiseObj.value.location;\n                                scope.updateProductDetails(productCombinationData, locationInfo);\n                            }\n                        });\n\n                }\n            }\n        ])\n\n        /**\n          * Billing Details Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('BillingDetailsController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'GetEditSupportData',\n            'BillingDataService',\n            '$compile',\n            '__Utils',\n            'appServices',\n            'InventoryDataService',\n            '$state',\n            function ($scope, __DataStore, __Form, $stateParams, GetEditSupportData, BillingDataService, $compile, __Utils, appServices, InventoryDataService, $state) {\n\n                var scope = this,\n                    requestData = GetEditSupportData;\n\n                scope.productData = [];\n                scope.currencyCode = requestData.currencyCode;\n                scope.currencySymbol = requestData.currencySymbol;\n                scope = __Form.setup(scope, 'billing_form', 'billingData');\n\n                scope.billingData.tax_amount = 0;\n                scope.billingData.formatted_tax_amount = __globals.priceFormat(0, scope.currencySymbol, '');\n                scope.billingData.discount_amount = 0;\n                scope.billingData.formatted_discount_amount = __globals.priceFormat(0, scope.currencySymbol, '');\n                scope.billingData.tax_type = '1';\n                scope.billingData.discount_type = '1';\n                scope.userData = requestData.userData;\n                scope.customerData = requestData.customerData;\n                scope.billingData.customerDetails = null;\n                scope.subTotal = 0;\n                scope.formattedSubTotal = __globals.priceFormat(0, scope.currencySymbol, scope.currencyCode);\n                scope.billingData.totalAmount = 0;\n                scope.formattedTotalAmount = __globals.priceFormat(0, scope.currencySymbol, scope.currencyCode);\n                scope.billingData.is_add_tax = false;\n                scope.billingData.is_add_discount = false;\n\n                scope = __Form.updateModel(scope, requestData.updateData);\n\n                scope.downloadPdfUrl = __Utils.apiURL({\n                    'apiURL': 'manage.billing.read.download_pdf',\n                    'billId': $stateParams.billUid\n                });\n\n                scope.printUrl = __Utils.apiURL({\n                    'apiURL': 'manage.billing.read.print_bill',\n                    'billId': $stateParams.billUid\n                });\n\n                /*\n                * Calcuate tax\n                */\n                scope.getCalculatedTax = function (productPrice, taxOptions, index) {\n                    var appliedTax = 0;\n                    var appliedTaxTotal = 0;\n                    var tax = [];\n                    scope.billingData.productCombinations[index].tax_details = [];\n                    if (!_.isEmpty(taxOptions)) {\n                        _.map(taxOptions, function (tax) {\n                            appliedTax = 0;\n                            if (tax.type == 1) {\n\n                                appliedTax = parseFloat(tax.tax_amount);\n                                appliedTaxTotal += appliedTax;\n                                scope.billingData.productCombinations[index]['formattedTax'] = scope.currencySymbol + appliedTax;\n                            } else if (tax.type == 2) {\n\n                                appliedTax = (productPrice * (parseFloat(tax.tax_amount) / 100));\n                                appliedTax = parseFloat(appliedTax.toFixed(2));\n                                scope.billingData.productCombinations[index]['formattedTax'] = parseFloat(tax.tax_amount) + \"%\";\n                                appliedTaxTotal += appliedTax;\n                            }\n\n                            tax.tax_amount_on_product = appliedTax.toFixed(2);\n                            scope.billingData.productCombinations[index].tax_details.push(tax);\n                        });\n                    }\n\n                    scope.billingData.productCombinations[index]['calculatedTax'] = appliedTaxTotal;\n                    scope.billingData.productCombinations[index]['formattedTaxAmount'] = scope.currencySymbol + appliedTaxTotal;\n                    return appliedTaxTotal;\n                }\n\n                /*\n                * Calcuate Total Price\n                */\n                scope.calculateTotalPrice = function () {\n                    var productPrices = [];\n                    var productTaxes = [];\n                    var unitPriceTotal = [];\n                    var totalproductPrice = 0;\n                    _.forEach(scope.billingData.productCombinations, function (item, index) {\n                        if (!_.isUndefined(item.combination.salePrice)) {\n                            var productPrice = item.combination.salePrice * item.quantity;\n                            var taxOptions = scope.billingData.productCombinations[index]['taxes'];\n                            var calcTax = 0;\n                            if (!_.isEmpty(taxOptions)) {\n                                calcTax = scope.getCalculatedTax(productPrice, taxOptions, index);\n                            }\n\n                            totalproductPrice = productPrice + calcTax;\n\n                            scope.billingData.productCombinations[index]['price'] = productPrice;\n                            scope.billingData.productCombinations[index]['formattedPrice'] = __globals.priceFormat(productPrice.toFixed(2), scope.currencySymbol, '');\n                            productPrices.push(productPrice);\n                            productTaxes.push(scope.billingData.productCombinations[index]['calculatedTax']);\n                            unitPriceTotal.push(productPrice);\n                        }\n                    });\n\n                    // Calculate Subtotal\n                    scope.subTotal = _.sum(productPrices);\n                    scope.formattedSubTotal = __globals.priceFormat(scope.subTotal, scope.currencySymbol, scope.currencyCode);\n                    scope.taxTotalAmount = _.sum(productTaxes);\n                    scope.formattedTaxTotalAmount = __globals.priceFormat(scope.taxTotalAmount.toFixed(2), scope.currencySymbol, '');\n                    scope.unitPriceTotal = _.sum(unitPriceTotal);\n                    scope.formattedUnitPriceTotal = __globals.priceFormat(scope.unitPriceTotal.toFixed(2), scope.currencySymbol, '');\n\n                    // Calculate Tax\n                    var taxAmount = 0;\n                    if (scope.subTotal != 0 && !_.isUndefined(scope.billingData.tax)) {\n                        if (scope.billingData.tax_type == 1) {\n                            taxAmount = scope.subTotal * scope.billingData.tax / 100;\n                        } else if (scope.billingData.tax_type == 2) {\n                            taxAmount = scope.billingData.tax;\n                        }\n                    }\n                    scope.billingData.tax_amount = taxAmount;\n                    scope.billingData.formatted_tax_amount = __globals.priceFormat(taxAmount, scope.currencySymbol, '');\n\n                    // Calculate Discount\n                    var discountAmount = 0;\n                    if (scope.subTotal != 0 && !_.isUndefined(scope.billingData.discount)) {\n                        if (scope.billingData.discount_type == 1) {\n                            discountAmount = scope.subTotal * scope.billingData.discount / 100;\n                        } else if (scope.billingData.discount_type == 2) {\n                            discountAmount = scope.billingData.discount;\n                        }\n                    }\n\n                    scope.billingData.discount_amount = discountAmount;\n                    scope.billingData.formatted_discount_amount = __globals.priceFormat(discountAmount, scope.currencySymbol, '');\n\n                    scope.billingData.totalAmount = ((scope.subTotal + scope.taxTotalAmount + taxAmount) - discountAmount);\n                    scope.formattedSubTotal = __globals.priceFormat(scope.subTotal, scope.currencySymbol, '');\n                    scope.formattedTotalAmount = __globals.priceFormat(scope.billingData.totalAmount.toFixed(2), scope.currencySymbol, '');\n                }\n\n                scope.calculateTotalPrice();\n\n                /*\n                * Select Customer\n                */\n                scope.selectCustomer = function (customerId) {\n                    if (!_.isEmpty(scope.customerData)) {\n                        _.forEach(scope.customerData, function (item) {\n                            if (item.id == customerId) {\n                                scope.billingData.customerDetails = item;\n                            }\n                        });\n                    }\n                };\n                scope.selectCustomer(requestData.updateData.customer);\n            }\n        ])\n        ;\n\n})(window, window.angular);","/*!\n*  Component  : TaxPreset\n*  File       : TaxPresetDataServices.js  \n*  Engine     : TaxPresetServices \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.TaxPresetDataServices', [])\n        .service('TaxPresetDataService', [\n            '$q',\n            '__DataStore',\n            'appServices',\n            TaxPresetDataService\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function TaxPresetDataService($q, __DataStore, appServices) {\n\n\n        /*\n        Get Add Support Data\n        -------------------------------------------------------------- */\n        this.getAddSupportData = function () {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch('manage.tax_preset.read.support_data')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    });\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n        /*\n        Get Edit Support Data\n        -------------------------------------------------------------- */\n        this.getEditSupportData = function (taxPresetIdOrUid) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.tax_preset.read.update.data',\n                'taxPresetIdOrUid': taxPresetIdOrUid\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n\n    };\n\n})(window, window.angular);","/*!\n*  Component  : TaxPreset\n*  File       : TaxPreset.js  \n*  Engine     : TaxPreset \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.TaxPresetEngine', [])\n\n        /**\n          * Tax Preset Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('TaxPresetController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            function ($scope, __DataStore, __Form, $stateParams) {\n\n                var scope = this;\n\n            }\n        ])\n\n\n\n        /**\n        * Taxpreset List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object TaxPresetDataService\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('TaxpresetListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'TaxPresetDataService',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, TaxPresetDataService) {\n                var dtColumnsData = [\n                    {\n                        \"name\": \"title\",\n                        \"orderable\": true,\n                        'template': \"#titleColumnTemplate\"\n                    },\n                    {\n                        \"name\": \"short_description\",\n                    },\n                    {\n                        \"name\": \"formatted_status\",\n                        \"orderable\": false,\n                    },\n                    {\n                        \"name\": null,\n                        \"template\": \"#taxpresetActionColumnTemplate\"\n                    }\n                ],\n                    scope = this;\n\n                /**\n                * Get general user test as a datatable source object  \n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.taxPresetDataTable = __DataStore.dataTable('#lwtaxpresetList', {\n                    url: 'manage.tax_preset.read.list',\n                    dtOptions: {\n                        \"searching\": true\n                    },\n                    columnsData: dtColumnsData,\n                    scope: $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function () {\n                    __DataStore.reloadDT(scope.taxPresetDataTable);\n                };\n\n                // when add new record \n                $scope.$on('taxpreset_added_or_updated', function (data) {\n\n                    if (data) {\n                        scope.reloadDT();\n                    }\n\n                });\n\n                /**\n                * preset  delete \n                *\n                * inject suppliersIdUid\n                *\n                * @return    void\n                *---------------------------------------------------------------- */\n\n                scope.delete = function (taxPresetIdOrUid, title) {\n\n                    var $taxpresetDeleteConfirm = $('#taxpresetDeleteConfirm');\n\n                    __globals.showConfirmation({\n                        html: __globals.getReplacedString($taxpresetDeleteConfirm,\n                            '__name__',\n                            _.unescape(title)\n                        ),\n                        confirmButtonText: $taxpresetDeleteConfirm.attr('data-delete-button-text')\n                    },\n                        function () {\n\n                            __DataStore.post({\n                                'apiURL': 'manage.tax_preset.write.delete',\n                                'taxPresetIdOrUid': taxPresetIdOrUid\n                            }).success(function (responseData) {\n\n                                var message = responseData.data.message;\n\n                                appServices.processResponse(responseData, {\n                                    error: function (data) {\n                                        __globals.showConfirmation({\n                                            title: $taxpresetDeleteConfirm.attr('data-error-text'),\n                                            text: message,\n                                            type: 'error'\n                                        });\n                                    }\n                                },\n                                    function (data) {\n                                        __globals.showConfirmation({\n                                            title: $taxpresetDeleteConfirm.attr('data-success-text'),\n                                            text: message,\n                                            type: 'success'\n                                        });\n                                        scope.reloadDT();   // reload datatable\n                                    });\n                            });\n                        });\n                };\n\n                /*\n                add dialog\n                ------------------------------------------------------------ */\n                scope.openAddDialog = function () {\n\n                    appServices.showDialog(scope, {\n                        templateUrl: __globals.getTemplateURL(\"tax-preset.add-dialog\"),\n                        controller: 'TaxpresetAddController as taxpresetAddCtrl',\n                        resolve: {\n                            taxPresetAddData: function () {\n                                return TaxPresetDataService\n                                    .getAddSupportData();\n                            }\n                        }\n                    }, function (promiseObj) {\n\n                        if (_.has(promiseObj.value, 'taxpreset_added_or_updated')\n                            && promiseObj.value.taxpreset_added_or_updated) {\n\n                            scope.reloadDT();\n                        }\n                    });\n                };\n\n                /*\n                edit dialog\n                ------------------------------------------------------------ */\n                scope.openEditDialog = function (taxPresetIdOrUid) {\n\n                    appServices.showDialog({\n                        'taxPresetIdOrUid': taxPresetIdOrUid\n                    }, {\n                        templateUrl: __globals.getTemplateURL(\"tax-preset.edit-dialog\"),\n                        controller: 'TaxpresetEditController as taxpresetEditCtrl',\n                        resolve: {\n                            taxPresetEditData: function () {\n                                return TaxPresetDataService\n                                    .getEditSupportData(taxPresetIdOrUid);\n                            }\n                        }\n                    }, function (promiseObj) {\n\n                        if (_.has(promiseObj.value, 'taxpreset_added_or_updated') && promiseObj.value.taxpreset_added_or_updated) {\n\n                            scope.reloadDT();\n                        }\n\n\n                    });\n                };\n\n\n            }\n        ])\n        // Taxpreset List Controller ends here\n\n\n        /**\n        * Taxpreset Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('TaxpresetAddController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope) {\n\n                var scope = this;\n\n                scope.showLoader = true;\n                scope = __Form.setup(scope, 'taxpreset_form', 'taxpresetData', {\n                    secured: true,\n                    unsecuredFields: []\n                });\n\n                scope.taxpresetData.status = true;\n\n                /**\n                  * Submit form\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process('manage.tax_preset.write.create', scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null, function () {\n                                $scope.closeThisDialog({ 'taxpreset_added_or_updated': true });\n                            });\n\n                        });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        // TaxpresetAddController ends here\n\n\n        /**\n        * Taxpreset Edit Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object taxPresetEditData\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('TaxpresetEditController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'taxPresetEditData',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, taxPresetEditData) {\n\n                var scope = this;\n                scope.showLoader = true;\n\n                scope = __Form.setup(scope, 'taxpreset_form', 'taxpresetData', {\n                    secured: true,\n                    unsecuredFields: []\n                });\n\n\n                var requestData = taxPresetEditData;\n                scope = __Form.updateModel(scope, requestData);\n                scope.showLoader = false;\n\n                var taxPresetIdOrUid = $scope.ngDialogData.taxPresetIdOrUid;\n\n\n                /**\n                * Submit form\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process({\n                        'apiURL': 'manage.tax_preset.write.update',\n                        'taxPresetIdOrUid': taxPresetIdOrUid\n                    }, scope).success(function (responseData) {\n\n                        appServices.processResponse(responseData, null, function () {\n                            $scope.closeThisDialog({ 'taxpreset_added_or_updated': true });\n                        });\n                    });\n\n                };\n\n                /**\n                * Close dialog\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n\n            }\n\n        ])\n        // Taxpreset Edit Controller ends here\n\n\n        ;\n\n})(window, window.angular);","/*!\n*  Component  : Tax\n*  File       : TaxDataServices.js  \n*  Engine     : TaxServices \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.TaxDataServices', [])\n        .service('TaxDataService', [\n            '$q',\n            '__DataStore',\n            'appServices',\n            TaxDataService\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function TaxDataService($q, __DataStore, appServices) {\n\n        /*\n        Get Add Support Data\n        -------------------------------------------------------------- */\n        this.getAddSupportData = function (taxPresetIdOrUid) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.tax.read.support_data',\n                'taxPresetIdOrUid': taxPresetIdOrUid\n            })\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    });\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n        /*\n        Get Edit Support Data\n        -------------------------------------------------------------- */\n        this.getEditSupportData = function (taxIdOrUid, taxPresetIdOrUid) {\n\n            //create a differed object\n            var defferedObject = $q.defer();\n\n            __DataStore.fetch({\n                'apiURL': 'manage.tax.read.update.data',\n                'taxIdOrUid': taxIdOrUid,\n                'taxPresetIdOrUid': taxPresetIdOrUid\n            }).success(function (responseData) {\n\n                appServices.processResponse(responseData, null, function (reactionCode) {\n\n                    //this method calls when the require        \n                    //work has completed successfully        \n                    //and results are returned to client        \n                    defferedObject.resolve(responseData.data);\n                });\n            });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n\n    };\n\n})(window, window.angular);","/*!\n*  Component  : Tax\n*  File       : Tax.js  \n*  Engine     : Tax \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.TaxEngine', [])\n\n        /**\n          * Tax Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('TaxController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            function ($scope, __DataStore, __Form, $stateParams) {\n\n                var scope = this;\n\n            }\n        ])\n\n\n\n        /**\n        * Tax List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object TaxDataService\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('TaxListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'TaxDataService',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, TaxDataService) {\n                var dtColumnsData = [\n                    {\n                        \"name\": \"title\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": \"formatted_type\",\n                        \"orderable\": false,\n                    },\n                    {\n                        \"name\": \"formatted_status\",\n                        \"orderable\": false,\n                    },\n                    {\n                        \"name\": \"tax_amount\",\n                        \"orderable\": true,\n                    },\n                    {\n                        \"name\": null,\n                        \"template\": \"#taxActionColumnTemplate\"\n                    }\n                ],\n                    scope = this;\n\n                /**\n                * Get general user test as a datatable source object  \n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.taxDataTable = __DataStore.dataTable('#lwTaxList', {\n                    url: {\n                        'apiURL': 'manage.tax.read.list',\n                        'taxPresetIdOrUid': $state.params.taxPresetIdOrUid\n                    },\n                    dtOptions: {\n                        \"searching\": true\n                    },\n                    columnsData: dtColumnsData,\n                    scope: $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function () {\n                    __DataStore.reloadDT(scope.taxDataTable);\n                };\n\n                // when add new record \n                $scope.$on('tax_added_or_updated', function (data) {\n\n                    if (data) {\n                        scope.reloadDT();\n                    }\n\n                });\n\n                /**\n                 * Tax delete \n                 *\n                 * inject TaxIdUid\n                 *\n                 * @return    void\n                 *---------------------------------------------------------------- */\n                scope.delete = function (taxIdOrUid, title) {\n\n                    var $taxpresetDeleteConfirm = $('#taxpresetDeleteConfirm');\n\n                    __globals.showConfirmation({\n                        html: __globals.getReplacedString($taxpresetDeleteConfirm,\n                            '__name__',\n                            _.unescape(title)\n                        ),\n                        confirmButtonText: $taxpresetDeleteConfirm.attr('data-delete-button-text')\n                    },\n                        function () {\n\n                            __DataStore.post({\n                                'apiURL': 'manage.tax.write.delete',\n                                'taxIdOrUid': taxIdOrUid,\n                                'taxPresetIdOrUid': $state.params.taxPresetIdOrUid\n                            }).success(function (responseData) {\n\n                                var message = responseData.data.message;\n\n                                appServices.processResponse(responseData, {\n                                    error: function (data) {\n                                        __globals.showConfirmation({\n                                            title: $taxpresetDeleteConfirm.attr('data-error-text'),\n                                            text: message,\n                                            type: 'error'\n                                        });\n                                    }\n                                },\n                                    function (data) {\n                                        __globals.showConfirmation({\n                                            title: $taxpresetDeleteConfirm.attr('data-success-text'),\n                                            text: message,\n                                            type: 'success'\n                                        });\n                                        scope.reloadDT();   // reload datatable\n                                    });\n                            });\n                        });\n                };\n\n\n                /*\n                add dialog\n                ------------------------------------------------------------ */\n                scope.openAddDialog = function () {\n\n                    appServices.showDialog(scope, {\n                        templateUrl: __globals.getTemplateURL(\"tax.add-dialog\"),\n                        controller: 'TaxAddController as taxAddCtrl',\n                        resolve: {\n                            TaxAddData: ['TaxDataService', function (TaxDataService) {\n                                return TaxDataService.getAddSupportData($state.params.taxPresetIdOrUid);\n                            }]\n                        }\n                    }, function (promiseObj) {\n\n                        if (_.has(promiseObj.value, 'tax_added_or_updated')\n                            && promiseObj.value.tax_added_or_updated) {\n\n                            scope.reloadDT();\n                        }\n\n                    });\n\n                };\n\n\n\n\n                /*\n                edit dialog\n                ------------------------------------------------------------ */\n                scope.openEditDialog = function (taxIdOrUid) {\n\n                    appServices.showDialog({\n                        'taxIdOrUid': taxIdOrUid\n                    }, {\n                        templateUrl: __globals.getTemplateURL(\"tax.edit-dialog\"),\n                        controller: 'TaxEditController as taxEditCtrl',\n                        resolve: {\n                            TaxEditData: ['TaxDataService', function (TaxDataService) {\n                                return TaxDataService\n                                    .getEditSupportData(taxIdOrUid, $state.params.taxPresetIdOrUid);\n                            }]\n                        }\n                    }, function (promiseObj) {\n\n                        if (_.has(promiseObj.value, 'tax_added_or_updated') && promiseObj.value.tax_added_or_updated) {\n\n                            scope.reloadDT();\n                        }\n\n\n                    });\n                };\n\n\n            }\n        ])\n        // Tax List Controller ends here\n\n\n        /**\n        * Tax Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('TaxAddController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'TaxAddData',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, TaxAddData) {\n\n                var scope = this;\n\n                scope.showLoader = true;\n                scope = __Form.setup(scope, 'tax_form', 'taxData', {\n                    secured: true,\n                    unsecuredFields: []\n                });\n\n                scope.taxTypes = __globals.generateKeyValueItems(TaxAddData.tax_types);\n                scope.taxTypeSelectize = __globals.getSelectizeOptions();\n                scope.taxData.status = true;\n                /**\n                  * Submit form\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process({\n                        'apiURL': 'manage.tax.write.create',\n                        'taxPresetIdOrUid': $state.params.taxPresetIdOrUid\n                    }, scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null, function () {\n                                $scope.closeThisDialog({ 'tax_added_or_updated': true });\n                            });\n\n                        });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        // TaxAddController ends here\n\n\n        /**\n        * Tax Edit Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object taxEditData\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('TaxEditController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'TaxEditData',\n            function ($scope, __DataStore, __Form, $state, appServices, $rootScope, TaxEditData) {\n\n                var scope = this;\n                scope.showLoader = true;\n\n                scope = __Form.setup(scope, 'tax_form', 'taxData', {\n                    secured: true,\n                    unsecuredFields: []\n                });\n\n                var requestData = TaxEditData;\n                scope = __Form.updateModel(scope, requestData.updateData);\n                scope.showLoader = false;\n\n                var taxIdOrUid = $scope.ngDialogData.taxIdOrUid;\n\n                scope.taxTypes = __globals.generateKeyValueItems(requestData.tax_types);\n                scope.taxTypeSelectize = __globals.getSelectizeOptions();\n\n                /**\n                * Submit form\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process({\n                        'apiURL': 'manage.tax.write.update',\n                        'taxIdOrUid': taxIdOrUid,\n                        'taxPresetIdOrUid': $state.params.taxPresetIdOrUid\n                    }, scope).success(function (responseData) {\n\n                        appServices.processResponse(responseData, null, function () {\n                            $scope.closeThisDialog({ 'tax_added_or_updated': true });\n                        });\n                    });\n\n                };\n\n                /**\n                * Close dialog\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n\n            }\n\n        ])\n        // Tax Edit Controller ends here\n\n\n        ;\n\n})(window, window.angular);"]}