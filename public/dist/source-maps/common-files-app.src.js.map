{"version":3,"sources":["CommonUserEngine.js","CommonUserDataService.js","UploaderDataService.js","UploaderEngine.js"],"names":[],"mappingsrdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpfile":"../User/common-files-app.src.js","sourcesContent":["/*!\n*  Component  : Common User\n*  File       : CommonUserEngine.js  \n*  Engine     : CommonUserEngine \n----------------------------------------------------------------------------- */\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('CommonApp.users', [])\n\n        /**\n          * UserProfileController - edit user profile\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserProfileController', [\n            '__Form',\n            'appServices',\n            'CommonUserDataService',\n            function (__Form, appServices, CommonUserDataService) {\n\n                var scope = this;\n\n                scope = __Form.setup(scope, 'user_profile__form', 'profileData');\n\n                scope.request_completed = false;\n\n                CommonUserDataService\n                    .getUserProfileDetails()\n                    .then(function (responseData) {\n                        __Form.updateModel(scope, responseData.data.profile);\n                        scope.existingProfilePictureURL = responseData.data.existingProfilePictureURL;\n                        scope.request_completed = true;\n                    });\n\n            }\n\n        ])\n\n        /**\n          * UserProfileEditController - edit user profile\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserProfileEditController', [\n            '$scope',\n            '__Form',\n            'appServices',\n            'lwFileUploader',\n            '__Utils',\n            '$state',\n            'CommonUserDataService',\n            '$rootScope',\n            function ($scope, __Form, appServices, lwFileUploader, __Utils, $state, CommonUserDataService, $rootScope) {\n\n                var scope = this;\n\n                scope = __Form.setup(scope, 'user_profile_edit_form', 'profileData');\n\n                scope.request_completed = false;\n                scope.countries = [];\n\n                CommonUserDataService\n                    .getUserProfileEditData()\n                    .then(function (responseData) {\n                        var requestData = responseData.data;\n\n                        __Form.updateModel(scope, requestData.profile);\n\n                        scope.existingProfilePictureURL = requestData.existingProfilePictureURL;\n                        scope.countries = requestData.countries;\n\n                        scope.request_completed = true;\n                    });\n\n                scope.countrySelectConfig = __globals.getSelectizeOptions();\n\n                scope.imagesSelectConfig = __globals.getSelectizeOptions({\n                    valueField: 'name',\n                    labelField: 'name',\n\n                    render: {\n                        item: function (item, escape) {\n                            return __Utils.template('#imageListItemTemplate', item);\n                        },\n                        option: function (item, escape) {\n                            return __Utils.template('#imageListOptionTemplate', item);\n                        }\n                    },\n                    searchField: ['name']\n                });\n\n                scope.typeSelectConfig = __globals.getSelectizeOptions({\n                    valueField: 'id',\n                    labelField: 'title',\n                    searchField: ['title']\n                });\n\n                /**\n                  * Retrieve files required for account logo\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.retrieveSpecificFiles = function () {\n\n                    lwFileUploader.getTempUploadedFiles(scope, {\n                        'url': __Utils.apiURL('media.upload.read_user_profile')\n                    }, function (uploadedFile) {\n                        scope.profileFiles = uploadedFile;\n\n                        scope.profileFilesCount = uploadedFile.length;\n                    });\n                };\n                scope.retrieveSpecificFiles();\n\n\n                $rootScope.$on('lw-loader-event-start', function (event, data) {\n\n                    $scope.loading = true;\n                    $(\"#lwFileupload\").attr(\"disabled\", true);\n                });\n\n                $rootScope.$on('lw-loader-event-stop', function (event, data) {\n\n                    $scope.loading = false;\n                    $(\"#lwFileupload\").attr(\"disabled\", false);\n                });\n\n                // uploader file instance\n                $scope.upload = function () {\n\n                    lwFileUploader.upload({\n\n                        'url': __Utils.apiURL('media.upload.write.user_profile')\n\n                    }, function (response) {\n                        scope.retrieveSpecificFiles();\n\n                    });\n                };\n\n                /**\n                  * Show uploaded media files\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                $scope.showUploadedMediaDialog = function () {\n\n                    lwFileUploader.openDialog(scope, {\n                        'url': __Utils.apiURL('media.upload.read_user_profile')\n                    },\n                        function (promiseObject) {\n                            scope.retrieveSpecificFiles();\n                        });\n\n                };\n\n\n                /**\n                  * Submit profile edit form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process('user.profile.update', scope)\n                        .success(function (responseData) {\n                            var requestData = responseData.data\n                            appServices.processResponse(responseData, null, function () {\n                                $rootScope.$broadcast('auth_info_updated', requestData);\n\n                                // if (__globals.isPublicApp()) {\n                                //     window.location = __Utils.apiURL('user.profile');\n                                // } else {\n                                //     $state.go('profile');\n                                // }\n                                $state.go('profile');\n                            });\n\n                        });\n\n                };\n\n            }\n\n        ])\n\n        /**\n          * UserChangePasswordController - change user password\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserChangePasswordController', [\n            '__Form',\n            'appServices',\n            '__Utils',\n            '$state',\n            function (__Form, appServices, __Utils, $state) {\n\n                var scope = this;\n\n                scope = __Form.setup(scope, 'user_password_update_form', 'userData', {\n                    secured: true\n                });\n\n                /**\n                  * Submit update password form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process('user.change_password.process', scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null, function () {\n                                scope.userData = {};\n\n                                if (document.location.href == responseData.data.passwordRoute) {\n                                    window.location = window.appConfig.appBaseURL;\n                                } else {\n                                    $state.go('dashboard');\n                                }\n\n                            });\n\n                        });\n\n                };\n\n            }\n        ])\n\n        /**\n          * UserChangeEmailController - handle chnage email form view js scope\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserChangeEmailController', [\n            '__Form',\n            'appServices',\n            'CommonUserDataService',\n            function (__Form, appServices, CommonUserDataService) {\n\n                var scope = this;\n\n                scope.requestSuccess = false;\n\n                scope = __Form.setup(scope, 'user_change_email_form', 'userData', {\n                    secured: true\n                });\n\n                /**\n                  * Fetch support data\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                CommonUserDataService\n                    .getChangeEmailSupportData()\n                    .then(function (responseData) {\n                        var requestData = responseData.data;\n                        scope.changeEmail = requestData.newEmail;\n                        scope.current_email = requestData.current_email;\n                    });\n\n                /**\n                  * Submit change email form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    __Form.process('user.change_email.process', scope)\n                        .success(function (responseData) {\n\n                            var requestData = responseData.data;\n\n                            appServices.processResponse(responseData, null,\n                                function () {\n\n                                    scope.activationRequired = requestData.activationRequired;\n\n                                    scope.requestSuccess = true;\n\n                                    $('.lw-form').slideUp();\n\n                                });\n\n                        });\n\n                };\n\n            }\n\n        ])\n\n        /**\n          * UserLoginDialogController - login a user in application\n          *\n          * @inject __Form\n          * @inject __Auth\n          * @inject appServices\n          * @inject __Utils\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserLoginDialogController', [\n            '__Form',\n            '__Auth',\n            'appServices',\n            '__Utils',\n            '$scope',\n            'CommonUserDataService',\n            function (__Form, __Auth, appServices, __Utils, $scope, CommonUserDataService) {\n\n                var scope = this,\n                    ngDialogData = $scope.ngDialogData;\n                scope = __Form.setup(scope, 'user_login_form', 'loginData', {\n                    secured: true\n                });\n\n\n                if (_.has(ngDialogData, 'from')) {\n                    scope.loginData.from = ngDialogData.from;\n                }\n\n                scope.show_captcha = false;\n                scope.request_completed = false;\n\n                /**\n                  * Get login attempts for this client ip\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                CommonUserDataService.getLoginAttempts()\n                    .then(function (responseData) {\n                        scope.show_captcha = responseData.data.show_captcha;\n                        scope.request_completed = true;\n                    });\n\n                /**\n                  * Fetch captch url\n                  *\n                  * @return string\n                  *---------------------------------------------------------------- */\n\n                scope.getCaptchaURL = function () {\n                    return __Utils.apiURL('security.captcha') + '?ver=' + Math.random();\n                };\n\n                /**\n                  * Refresh captch \n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.refreshCaptcha = function () {\n                    scope.captchaURL = scope.getCaptchaURL();\n                };\n\n                scope.captchaURL = scope.getCaptchaURL();\n\n                /**\n                * Submit login form action\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n\n                scope.submit = function () {\n\n                    scope.isInActive = false;\n                    scope.accountDeleted = false;\n\n                    __Form.process('user.login', scope).success(function (responseData) {\n\n                        var requestData = responseData.data;\n\n                        appServices.processResponse(responseData, {\n                            error: function () {\n\n                                scope.show_captcha = requestData.show_captcha;\n\n                                // reset password field\n                                scope[scope.ngFormModelName].password = \"\";\n\n                                // Check if show captcha exist then refresh captcha\n                                if (scope.show_captcha) {\n                                    scope[scope.ngFormModelName].confirmation_code = \"\";\n                                    scope.refreshCaptcha();\n                                }\n\n                            },\n                            otherError: function (reactionCode) {\n\n                                scope.isInActive = requestData.isInActive;\n                                scope.accountDeleted = requestData.accountDeleted;\n\n                                // If reaction code is Server Side Validation Error Then \n                                // Unset the form fields\n                                if (reactionCode == 3) {\n\n                                    // Check if show captcha exist then refresh captcha\n                                    if (scope.show_captcha) {\n                                        scope.refreshCaptcha();\n                                    }\n\n                                }\n\n                            }\n                        },\n                            function () {\n\n                                __Auth.checkIn(requestData.auth_info, function () {\n\n                                    if (requestData.availableRoutes) {\n                                        __globals.appImmutable('availableRoutes',\n                                            requestData.availableRoutes);\n                                    }\n\n                                });\n\n                                $scope.closeThisDialog({ 'login_success': true });\n\n                            });\n\n                    });\n\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog({ 'login_success': false });\n                };\n\n            }\n\n        ])\n\n\n})(window, window.angular);","/*!\n*  Component  : Manage Users\n*  File       : CommonUserDataService.js  \n*  Engine     : CommonUserDataService \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('CommonApp.CommonUserDataService', [])\n\n        /**\n          Manage User Data Service  \n        ---------------------------------------------------------------- */\n        .service('CommonUserDataService', [\n            '$q',\n            '__DataStore',\n            '__Form',\n            'appServices',\n            '__Utils',\n            CommonUserDataService\n        ])\n\n    function CommonUserDataService($q, __DataStore, __Form, appServices, __Utils) {\n\n        /*\n        Get User Details\n        -----------------------------------------------------------------*/\n        this.getUserProfileDetails = function () {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch('user.profile.details')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);\n\n                    });\n\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get User Profile Edit Data\n        -----------------------------------------------------------------*/\n        this.getUserProfileEditData = function () {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __Form.fetch('user.profile.edit_support_data')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);\n\n                    });\n\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Temp images Data\n        -----------------------------------------------------------------*/\n        this.getTempImagesData = function () {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __Form.fetch(__Utils.apiURL('media.uploaded.images') + '?fileRequestType=1', { fresh: true })\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);\n\n                    });\n\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Change email support data\n        -----------------------------------------------------------------*/\n        this.getChangeEmailSupportData = function () {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __Form.fetch('user.change_email.support_data')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);\n\n                    });\n\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get Login attempts \n        -----------------------------------------------------------------*/\n        this.getLoginAttempts = function () {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __Form.fetch('user.login.attempts')\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);\n\n                    });\n\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n    }\n    ;\n\n})(window, window.angular);","/*!\n*  Component  : Uploader\n*  File       : UploaderDataService.js  \n*  Engine     : UploaderDataService \n----------------------------------------------------------------------------- */\n\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.UploaderDataService', [])\n        .service('UploaderDataService', [\n            '$q',\n            '__Utils',\n            '__DataStore',\n            'appServices',\n            UploaderDataService\n        ])\n\n    /*!\n     This service use for to get the promise on data\n    ----------------------------------------------------------------------------- */\n\n    function UploaderDataService($q, __Utils, __DataStore, appServices) {\n\n        /*\n        Get the data of configuration\n        -----------------------------------------------------------------*/\n\n        this.readUploadedMedia = function (fileRequestType) {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch(__Utils.apiURL('media.uploaded.images') + '?fileRequestType=' + fileRequestType, { fresh: true })\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);\n\n                    });\n\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n        /*\n        Get the data of configuration\n        -----------------------------------------------------------------*/\n\n        this.readUploadedImages = function (fileRequestType) {\n\n            //create a differed object          \n            var defferedObject = $q.defer();\n\n            __DataStore.fetch('media.uploaded.images.detail', { fresh: true })\n                .success(function (responseData) {\n\n                    appServices.processResponse(responseData, null, function (reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);\n\n                    });\n\n                });\n\n            //return promise to caller          \n            return defferedObject.promise;\n        };\n\n    };\n\n\n})(window, window.angular);\n","/*!\n*  Component  : Uploader\n*  File       : UploaderEngine.js  \n*  Engine     : Uploader \n----------------------------------------------------------------------------- */\n(function (window, angular, undefined) {\n\n    'use strict';\n\n    /*\n     UploadedMediaController\n    -------------------------------------------------------------------------- */\n\n    angular.module('app.UploaderEngine', [])\n\n        /**\n              * Uploaded File Dialog Controller \n              *\n              * @inject object $scope\n              * @inject object __DataStore\n              * @inject object appServices\n              * @inject object appNotify\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n\n        .controller('uploadedFileDialogController', [\n            '$scope',\n            '__DataStore',\n            'appServices',\n            'appNotify',\n            '__Utils',\n            'lwFileUploader',\n            '$rootScope',\n            function ($scope, __DataStore, appServices, appNotify, __Utils, lwFileUploader, $rootScope) {\n\n                var scope = this;\n\n                scope.showLoader = true;\n                scope.ngDialogData = $scope.ngDialogData;\n\n                /**\n                  * Get temp media list\n                  *\n                  * @return void\n                  *-----------------------------------------------------------------------*/\n\n                scope.getTempUploadedMedia = function () {\n                    lwFileUploader.mediaDataService(scope.ngDialogData.url)\n                        .then(function (responseData) {\n\n                            scope.uploadedFiles = responseData.data.files;\n                            scope.showLoader = false;\n\n                        });\n\n                };\n\n\n                /**\n                  * Delete media file \n                  *\n                  * @param string fileName\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.delete = function (fileName) {\n\n                    __DataStore.post({\n                        'apiURL': 'media.upload.delete',\n                        'fileName': fileName\n                    }, scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null, function () {\n\n                                // use for slowly remove address from list\n                                $('#lw_' + fileName).fadeOut('slow', function () {\n                                    $(this).remove();\n                                });\n\n                                $rootScope.$emit('lw.media.deleted', {\n                                    'fileName': fileName\n                                });\n\n                                scope.getTempUploadedMedia();\n\n                            });\n\n                        });\n\n                };\n\n                /**\n                  * Delete multiple uploaded temparary media Files\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.deleteMultipleFiles = function () {\n\n                    __DataStore.post('media.upload.delete_multiple', scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null, function () {\n                                scope.getTempUploadedMedia();\n                                $rootScope.$emit('lw.multiple.media.deleted', {\n                                    'uploadedFiles': scope.uploadedFiles\n                                });\n                            });\n\n                        });\n\n                };\n\n                /**\n                  * Select Files\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.selectFiles = function () {\n\n                    __DataStore.post('media.upload.select_files', scope)\n                        .success(function (responseData) {\n\n                            appServices.processResponse(responseData, null, function () {\n                                $scope.closeThisDialog({ 'selectedData': responseData.data.selectedFiles });\n                            });\n\n                        });\n                }\n\n                scope.getTempUploadedMedia();\n\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function () {\n                    $scope.closeThisDialog();\n                };\n\n            }\n        ])\n\n\n})(window, window.angular);"]}